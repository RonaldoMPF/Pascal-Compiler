grammar org.xtext.example.mydsl.Pascal with org.eclipse.xtext.common.Terminals

generate pascal "http://www.xtext.org/example/mydsl/Pascal"

Pascal:
	element = program
;

program:{program}
	(program_heading=programHeading block=block ".")?
;

programHeading:
	"program" identifier=ID "(" identifierList=identifierList ")" ";"
;

identifierList:
	identifier+=ID ( "," identifier+=ID )*
;

block:
	declarationSection=declarationSection statementSection=statementSection
;

statementSection:
	"begin" statementSequence=statementSequence "end"
;

statementSequence:
	statement+=statement (";" statement+=statement)*
;

statement:
	(label=label ":")? (simpleStatement=simpleStatement | structuredStatement=structuredStatement)
;

// verify
structuredStatement:
	compoundStatement=compoundStatement | repetitiveStatement=repetitiveStatement | withStatement=withStatement
;

// verify 
withStatement:
	"with" variable+=variable ("," variable+=variable)* "do" statement=statement 
;

variable:
	entireVariable=entireVariable 
	("[" expressionList+=expressionList "]" )*
	("." fieldIdentifier+=ID)*
	("^")* ("^")*
;

expressionList:
	expression+=expression ("," expression+=expression)*
;

entireVariable:
	identifier=ID
;

repetitiveStatement:
	"repeat" statementSequence=statementSequence "until" expression=expression
;

expression:
	simpleExpression+=simpleExpression (relationalOperator=relationalOperator simpleExpression+=simpleExpression)?
;

relationalOperator:
	"<" | ">" | "=" | "in" | "<>" | "<=" | ">="
;

simpleExpression:
	(sign=sign)? term+=term (additionOperator+=additionOperator term+=term)*
;

additionOperator:
	{additionOperator} "or" | sign=sign
;

term:
	factor+=factor (multiplicationOperator+=multiplicationOperator factor+=factor)*
;

multiplicationOperator:
	"and" | "*" | "/" | "div" | "mod"
;

// verify
factor:
	variable=variable | number=number | strings=STRINGS | {factor} "nil" | boolean=boolean 
	| identifier=ID | functionDesignator=functionDesignator | "(" expression=expression ")" | "not" factor=factor 
;

functionDesignator:
	functionIdentifier=ID (actualParameterList=actualParameterList)?
;

actualParameterList:
	"(" actualParameter+=actualParameter ("," actualParameter+=actualParameter)* ")"
;

actualParameter:
	actualValue=actualValue | actualVariable=actualVariable | actualProcedure=actualProcedure | actualFunction=actualFunction
;

actualFunction:
	functionID=ID
;

actualProcedure:
	procedureID=ID
;

actualVariable:
	variable=variable
;

actualValue:
	expression=expression
;

compoundStatement:
	"begin" statementSequence=statementSequence "end"
;

label:
	integerNumber=integerNumber
;

integerNumber:
	(sign=sign)? unsignedInteger=unsignedInteger
;

sign:
	'+'|'-'
;

unsignedInteger:
	INT
;

//verify
simpleStatement:{simpleStatement}
	(assignmentStatement=assignmentStatement | procedureStatement=procedureStatement | gotoStatement=gotoStatement)?
;

// not in scope
gotoStatement:
	"goto" label=label
;

procedureStatement:
	procedureID=ID (actualParameterList=actualParameterList)?
;

assignmentStatement:
	(variable=variable | function_identifier=ID) ":=" expression=expression
; 

declarationSection:
	{declarationSection} (labelDeclarationSection=labelDeclarationSection)?
	(constantDefinitionSection=constantDefinitionSection)?
	(typeDefinitionPart=typeDefinitionSection)?
	(variableDeclarationSection=variableDeclarationSection)?
	(
		(procedureHeading+=procedureHeading ";" procedureBody+=procedureBody |
		procedureHeading+=procedureHeading ";" directive+=directive |
		procedureID+=procedureID ";" procedureBody+=procedureBody |
		
		functionHeading+=functionHeading ";" functionBody+=functionBody |
		functionHeading+=functionHeading ";" directive+=directive |
		functionID+=functionID ";" functionBody+=functionBody) ";")*
;

//checar
functionBody:
	block=block
;

functionID:
	"function" functionID=ID
;

functionHeading:
	"function" identifier=ID (formalParameterList=formalParameterList)? ":" resultType=resultType
;

resultType:
	typeID=typeIdentifier
;

formalParameterList:
	"(" formalParameterSection+=formalParameterSection (";" formalParameterSection+=formalParameterSection)* ")"
;

formalParameterSection:
	valueParameterSection=valueParameterSection |
	variableParameterSection=variableParameterSection |
	procedureParameterSection=procedureParameterSection |
	functionParameterSection=functionParameterSection
;

valueParameterSection:
	identifierList=identifierList ":" parameterType=parameterType
;

variableParameterSection:
	"var" identifierList=identifierList ":" parameterType=parameterType
;

//checar
parameterType:
	typeIdentifier=typeIdentifier
;

procedureParameterSection:
	procedureHeading=procedureHeading
;

functionParameterSection:
	functionHeading=functionHeading
;

directive:
	{directive} "forward" | compilerDefinedDirectives=compilerDefinedDirectives
;

compilerDefinedDirectives:
	procedureHeading=procedureHeading
;

procedureBody:
	procedureBlock=procedureBlock 
;

procedureBlock:
	declarationSection=declarationSection statementSection=statementSection
;

procedureID:
	"procedure" identifier=ID
;

procedureHeading:
	"procedure" identifier=ID (formalParameterList=formalParameterList)?
;

constantDefinitionSection:
	"const" constantDefinition+=constantDefinition ";" (constantDefinition+=constantDefinition ";")*
;

constantDefinition:
	identifier=ID "=" constant=constant
;

constant:
	(sign=sign)? (constantIdentifier=ID | number=number) | strings=STRINGS | boolean=boolean
;

boolean:
	"True" | "False"
;

number:
	integerNumber=integerNumber | realNumber=realNumber
;

realNumber:
	integerNumberPart1=integerNumber "." (integerNumberPart2=integerNumber)? (scale=scale)? |
	integerNumber= integerNumber scale=scale
;

scale:
	("E" | "e") (sign=sign)? integerNumber=integerNumber
;

variableDeclarationSection:
	"var" variableDeclaration+=variableDeclaration ";" (variableDeclaration+=variableDeclaration ";")*
;

variableDeclaration:
	identifierList=identifierList ":" type=type
;

type:
	typeIdentifier=typeIdentifier | simpleType=simpleType |  
	structuredType=structuredType | pointerType=pointerType
;

simpleType:
	subrangeType=subrangeType | enumeratedType=enumeratedType
;

enumeratedType:
	"(" identifierList=identifierList ")"
;

subrangeType:
	lowerBound=lowerBound ".." upperBound=upperBound
;

upperBound:
	constant=constant
;

lowerBound:
	constant=constant
;

structuredType:
	("packed")? unpackedStructuredType=unpackedStructuredType
;

unpackedStructuredType:
	recordType=recordType	
;

recordType:
	"record" fieldList=fieldList "end"
;

fieldList: {fieldList}
	( (fixedPart=fixedPart (";" variantPart=variantPart)? | variantPart=variantPart) (";")? )?
;

fixedPart:
	recordSection+=recordSection (";" recordSection+=recordSection)*
;

recordSection:
	identifierList=identifierList ":" type=type
;

variantPart:
	"case" tagField=tagField typeIdentifier=typeIdentifier "of" variant+=variant (";" variant+=variant)*
;

variant:
	caseLabelList=caseLabelList ":" "(" fieldList=fieldList ")"
;

caseLabelList:
	constant+=constant ("," constant+=constant)*
;

tagField: {tagField}
	(identifier=ID ":")?
;

pointerType:
	"^" typeIdentifier=typeIdentifier
;

typeIdentifier:
	identifier=ID
;

typeDefinitionSection:
	"type" typeDefinition+=typeDefinition ";" (typeDefinition+=typeDefinition ";")*
;

typeDefinition:
	identifier=ID "=" type=type
;

labelDeclarationSection:
	"label" label+=label ("," label+=label)* ";"
;

// Rewrite String common Terminal 

terminal STRINGS:
	"'" ('a'..'z' |'A'..'Z'|'_'|'0'..'9' | '^' | "?" | "." | "/" | "\\" | "*" | "%" | "&" | "@" | "#" | "(" | ")" | "$" | "=" | "{" | "}" | "[" | "]" | "," | "!" |"|" | "+" | "-")* "'"
;

// Multi-line comment

terminal MULTI_LINE_COMMENT:
	 '{*' -> '*}' | '(*' -> '*)'
;

// Single-line comment

terminal SINGLE_LINE_COMMENT:
	'{' !('\n'|'\r')* '}' ('\r'? '\n')?
;

