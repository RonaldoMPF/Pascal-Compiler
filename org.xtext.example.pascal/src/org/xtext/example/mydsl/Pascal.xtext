grammar org.xtext.example.mydsl.Pascal with org.eclipse.xtext.common.Terminals

generate pascal "http://www.xtext.org/example/mydsl/Pascal"

toBegin:
	elements = programStart?
;

programStart
   : programHeading=programHeading (interface="interface")? block=block dotTerminal="."
   ;

programHeading
   : program="program" identifier1=identifier (lParen="(" identifierList+=identifierList rparen=")")? semiTerminal=";"
   | {programHeading} unit="unit" identifier2=identifier semiTerminal=";"
   ;

identifier
   : identifier=IDENT
   ;

block
   : (labelDeclarationPart+=labelDeclarationPart 
   	| constantDefinitionPart+=constantDefinitionPart 
   	| typeDefinitionPart+=typeDefinitionPart 
   	| variableDeclarationPart+=variableDeclarationPart 
   	| procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart 
   	| usesUnitsPart+=usesUnitsPart 
   	| ImplemeTerminal+="implementation")* compoundStatement=compoundStatement
   ;


usesUnitsPart
   : usesTerminal="uses" identifierList=identifierList semiTerminal=";"
   ;

labelDeclarationPart
   : labelTerminal="label" labelStart1=labelStart (commaTerminal+="," labelStart2+=labelStart)* semiTerminal=";"
   ;

labelStart
   : unsignedInteger=unsignedInteger
   ;

constantDefinitionPart
   : constTerminal="const" (constantDefinition+=constantDefinition semiTerminal+=";") +
   ;

constantDefinition
   : ID=identifier equalTerminal="=" constant=constant
   ;

constantChr
   : chRTerminal="chr" lParen="(" unsignedInteger=unsignedInteger rParen=")"
   ;

constant
   : unsignedNumber=unsignedNumber
   | sign1=sign unsignedNumber=unsignedNumber
   | identifier1=identifier
   | sign2=sign identifier2=identifier
   | string=StringStart
   | constantChr=constantChr
   ;

unsignedNumber
   : unsignedInteger=unsignedInteger
   | unsignedReal=unsignedReal
   ;

unsignedInteger
   : unsignedInteger=NUM_INT
   ;

unsignedReal
   : unsignedReal=NUM_REAL
   ;

sign
   : sign= ("+" | "-")
   ;

bool
   : bool= ( "true" | "false")
   ;

StringStart
   : StringStart=STRING
   ;

typeDefinitionPart
   : typeTerminal="type" (typeDefinition+=typeDefinition semiTerminal+=";") +
   ;

typeDefinition
   : ID1=identifier equalTerminal="=" type=(typeStart | functionType | procedureType)
   ;

functionType
   : functionTerminal="function" (formalParameterList=formalParameterList)? colonTerminal=":" resultType=resultType
   ;

procedureType
   : procedureTerminal="procedure" (formalParameterList=formalParameterList)?
   ;

typeStart
   : typeStart = (simpleType | structuredType| pointerType)
   ;

simpleType
   : simpleType= (scalarType
   | subrangeType
   | typeIdentifier
   | stringtype)
   ;

scalarType
   : lParen="(" identifierList=identifierList rParen=")"
   ;

subrangeType
   : constant1=constant dotTerminal=".." constan2=constant
   ;

typeIdentifier
   : identifier=identifier | type=("Char" | "Boolean" | "Integer" | "Real" | "String")
   ;

structuredType
   : packedTerminal="packed" unpackedStructuredType1=unpackedStructuredType
   | unpackedStructuredType2=unpackedStructuredType
   ;

unpackedStructuredType
   : unpackedStructuredType=recordType
   ;

stringtype
   : stringTerminal=STRING lBrack="[" (ID=identifier | unsignedNumber=unsignedNumber) rBrack="]"
   ;

recordType
   : recordTerminal="record" (fieldList+=fieldList)? endTerminal="end"
   ;

fieldList
   : fixedPart=fixedPart (";" variantPart1=variantPart)?
   | variantPart2=variantPart
   ;

fixedPart
   : recordSection (";" recordSection+=recordSection)*
   ;

recordSection
   : identifierList=identifierList ":" typeStart=typeStart
   ;

variantPart
   : case="case" tag=tag of="of" variant1=variant (";" variant2+=variant)*
   ;

tag
   : ID=identifier ":" typeIdentifier1=typeIdentifier
   | typeIdentifier2=typeIdentifier
   ;

variant
   : constList=constList ":" "(" fieldList=fieldList ")"
   ;

pointerType
   : "^" typeIdentifier=typeIdentifier
   ;

variableDeclarationPart
   : varTerminal="var" variableDeclaration1=variableDeclaration (";" variableDeclaration2+=variableDeclaration)* ";"
   ;

variableDeclaration
   : identifierList=identifierList ":" typeStart=typeStart
   ;

procedureAndFunctionDeclarationPart
   : procedureOrFunctionDeclaration=procedureOrFunctionDeclaration ";"
   ;

procedureOrFunctionDeclaration
   : procedureDeclaration=procedureDeclaration
   | functionDeclaration=functionDeclaration
   ;

procedureDeclaration
   : procedureTerminal="procedure" identifier=identifier (formalParameterList=formalParameterList)? ";" block=block
   ;
formalParameterList
   : "(" formalParameterSection1=formalParameterSection (";" formalParameterSection2+=formalParameterSection)* ")"
   ;

formalParameterSection
   : parameterGroup=parameterGroup
   | varTerminal="var" parameterGroup=parameterGroup
   | functionTerminal="function" parameterGroup=parameterGroup
   | procedureTerminal="procedure" parameterGroup=parameterGroup
   ;

parameterGroup
   : identifierList=identifierList ":" typeIdentifier=typeIdentifier
   ;

identifierList
   : identifier1=identifier ("," identifier2+=identifier)*
   ;

constList
   : constant1=constant ("," constant2+=constant)*
   ;

functionDeclaration
   : functionTerminal="function" identifier=identifier (formalParameterList=formalParameterList)? ":" resultType=resultType ";" block=block
   ;

resultType
   : typeIdentifier=typeIdentifier
   ;

statement
   : labelStart=labelStart colonTerminal=":" unlabelledStatement=unlabelledStatement
   | unlabelledStatement=unlabelledStatement
   ;

unlabelledStatement
   : {unlabelledStatement} simpleStatement=simpleStatement
   | structuredStatement=structuredStatement
   ;

simpleStatement
   : assignmentStatement=assignmentStatement
   | procedureStatement=procedureStatement
   | gotoStatement=gotoStatement
   ;

assignmentStatement
   : variable=variable ":=" expression=expression
   ;

variable
   : ("@" identifier1=identifier | identifier2=identifier) ("[" expression+=expression ("," expression+=expression)* "]" 
   	| "(." expression+=expression ("," expression+=expression)* ".)" | "." identifier3+=identifier | "^"
   )*
   ;

expression
   : simpleExpression=simpleExpression
   ;

simpleExpression
   : term=term (additiveoperator simpleExpression=simpleExpression)?
   ;

additiveoperator
   : "+"
   | "-"
   | "or"
   | "xor"
   ;

term
   : signedFactor=signedFactor (multiplicativeoperator term=term)?
   ;

multiplicativeoperator
   : "*"
   | "/"
   | "div"
   | "mod"
   | "and"
   ;

signedFactor
   : ("+" | "-")? factor=factor
   ;

factor
   : variable=variable
   | "(" expression=expression ")"
   | functionDesignator=functionDesignator
   | unsignedConstant=unsignedConstant
   | not="not" factor=factor
   | bool=bool
   ;

unsignedConstant
   : unsignedNumber=unsignedNumber
   | constantChr=constantChr
   | StringStart=StringStart
   | nil="nil"
   ;

functionDesignator
   : identifier=identifier "(" parameterList=parameterList ")"
   ;

parameterList
   : actualParameter1=actualParameter ("," actualParameter2+=actualParameter)*
   ;

procedureStatement
   : identifier=identifier ("(" parameterList=parameterList ")")?
   ;

actualParameter
   : expression=expression
   ;

gotoStatement
   : "goto" labelStart=labelStart
   ;

structuredStatement
   : compoundStatement=compoundStatement
     repetetiveStatement=repetetiveStatement
   | withStatement=withStatement
   ;

compoundStatement
   : "begin" statements=statements "end"
   ;

statements
   : statement1+=statement (semiTerminal1+=";" statement2+=statement)* semiTerminal2=";"
   ;

repetetiveStatement
   : repeatStatement
   ;

repeatStatement
   : repeatTerminal="repeat" statement=statements "until" expression=expression
   ;

withStatement
   : withTerminal="with" recordVariableList=recordVariableList do="do" statement=statement
   ;

recordVariableList
   : variable1=variable ("," variable2+=variable)*
   ;
    
terminal COMMENT_1
   : '(*' -> '*)' 
   ;


terminal COMMENT_2
   : '{' -> '}'  
   ;


terminal IDENT
   : ('a' .. 'z' | 'A' .. 'Z') ('a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_')*
   ;


terminal NUM_INT
   : INT
   ;


terminal NUM_REAL
   : //('0' .. '9') + (('.' ('0' .. '9') + (EXPONENT)?)? | EXPONENT)
   		(NUM_INT) + (('.' NUM_INT + (EXPONENT)?)? | EXPONENT)
   ;


terminal fragment EXPONENT
   : ('e') ('+' | '-')? ('0' .. '9') +
;
