/*
 * generated by Xtext 2.16.0-SNAPSHOT
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PascalGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ToBeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.toBegin");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsProgramStartParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//toBegin:
		//	elements=programStart?;
		@Override public ParserRule getRule() { return rule; }
		
		//elements=programStart?
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//programStart
		public RuleCall getElementsProgramStartParserRuleCall_0() { return cElementsProgramStartParserRuleCall_0; }
	}
	public class ProgramStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.programStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProgramHeadingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProgramHeadingProgramHeadingParserRuleCall_0_0 = (RuleCall)cProgramHeadingAssignment_0.eContents().get(0);
		private final Assignment cInterfaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInterfaceInterfaceKeyword_1_0 = (Keyword)cInterfaceAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//programStart:
		//	programHeading=programHeading interface="interface"? block=block ".";
		@Override public ParserRule getRule() { return rule; }
		
		//programHeading=programHeading interface="interface"? block=block "."
		public Group getGroup() { return cGroup; }
		
		//programHeading=programHeading
		public Assignment getProgramHeadingAssignment_0() { return cProgramHeadingAssignment_0; }
		
		//programHeading
		public RuleCall getProgramHeadingProgramHeadingParserRuleCall_0_0() { return cProgramHeadingProgramHeadingParserRuleCall_0_0; }
		
		//interface="interface"?
		public Assignment getInterfaceAssignment_1() { return cInterfaceAssignment_1; }
		
		//"interface"
		public Keyword getInterfaceInterfaceKeyword_1_0() { return cInterfaceInterfaceKeyword_1_0; }
		
		//block=block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
		
		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class ProgramHeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.programHeading");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cProgramKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIdentifier1Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdentifier1IdentifierParserRuleCall_0_1_0 = (RuleCall)cIdentifier1Assignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cIdentifierListAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_2_1_0 = (RuleCall)cIdentifierListAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cProgramHeadingAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cUnitKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIdentifier2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdentifier2IdentifierParserRuleCall_1_2_0 = (RuleCall)cIdentifier2Assignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//programHeading:
		//	"program" identifier1=identifier ("(" identifierList+=identifierList ")")? ";"
		//	| {programHeading} "unit" identifier2=identifier ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"program" identifier1=identifier ("(" identifierList+=identifierList ")")? ";" | {programHeading} "unit"
		//identifier2=identifier ";"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"program" identifier1=identifier ("(" identifierList+=identifierList ")")? ";"
		public Group getGroup_0() { return cGroup_0; }
		
		//"program"
		public Keyword getProgramKeyword_0_0() { return cProgramKeyword_0_0; }
		
		//identifier1=identifier
		public Assignment getIdentifier1Assignment_0_1() { return cIdentifier1Assignment_0_1; }
		
		//identifier
		public RuleCall getIdentifier1IdentifierParserRuleCall_0_1_0() { return cIdentifier1IdentifierParserRuleCall_0_1_0; }
		
		//("(" identifierList+=identifierList ")")?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }
		
		//identifierList+=identifierList
		public Assignment getIdentifierListAssignment_0_2_1() { return cIdentifierListAssignment_0_2_1; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_2_1_0() { return cIdentifierListIdentifierListParserRuleCall_0_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }
		
		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }
		
		//{programHeading} "unit" identifier2=identifier ";"
		public Group getGroup_1() { return cGroup_1; }
		
		//{programHeading}
		public Action getProgramHeadingAction_1_0() { return cProgramHeadingAction_1_0; }
		
		//"unit"
		public Keyword getUnitKeyword_1_1() { return cUnitKeyword_1_1; }
		
		//identifier2=identifier
		public Assignment getIdentifier2Assignment_1_2() { return cIdentifier2Assignment_1_2; }
		
		//identifier
		public RuleCall getIdentifier2IdentifierParserRuleCall_1_2_0() { return cIdentifier2IdentifierParserRuleCall_1_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.identifier");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDENTTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//identifier:
		//	identifier=IDENT;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=IDENT
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//IDENT
		public RuleCall getIdentifierIDENTTerminalRuleCall_0() { return cIdentifierIDENTTerminalRuleCall_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cLabelDeclarationPartAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cLabelDeclarationPartLabelDeclarationPartParserRuleCall_0_0_0 = (RuleCall)cLabelDeclarationPartAssignment_0_0.eContents().get(0);
		private final Assignment cConstantDefinitionPartAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cConstantDefinitionPartConstantDefinitionPartParserRuleCall_0_1_0 = (RuleCall)cConstantDefinitionPartAssignment_0_1.eContents().get(0);
		private final Assignment cTypeDefinitionPartAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cTypeDefinitionPartTypeDefinitionPartParserRuleCall_0_2_0 = (RuleCall)cTypeDefinitionPartAssignment_0_2.eContents().get(0);
		private final Assignment cVariableDeclarationPartAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cVariableDeclarationPartVariableDeclarationPartParserRuleCall_0_3_0 = (RuleCall)cVariableDeclarationPartAssignment_0_3.eContents().get(0);
		private final Assignment cProcedureAndFunctionDeclarationPartAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cProcedureAndFunctionDeclarationPartProcedureAndFunctionDeclarationPartParserRuleCall_0_4_0 = (RuleCall)cProcedureAndFunctionDeclarationPartAssignment_0_4.eContents().get(0);
		private final Assignment cUsesUnitsPartAssignment_0_5 = (Assignment)cAlternatives_0.eContents().get(5);
		private final RuleCall cUsesUnitsPartUsesUnitsPartParserRuleCall_0_5_0 = (RuleCall)cUsesUnitsPartAssignment_0_5.eContents().get(0);
		private final Assignment cImplemeTerminalAssignment_0_6 = (Assignment)cAlternatives_0.eContents().get(6);
		private final Keyword cImplemeTerminalImplementationKeyword_0_6_0 = (Keyword)cImplemeTerminalAssignment_0_6.eContents().get(0);
		private final Assignment cCompoundStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompoundStatementCompoundStatementParserRuleCall_1_0 = (RuleCall)cCompoundStatementAssignment_1.eContents().get(0);
		
		//block:
		//	(labelDeclarationPart+=labelDeclarationPart
		//	| constantDefinitionPart+=constantDefinitionPart
		//	| typeDefinitionPart+=typeDefinitionPart
		//	| variableDeclarationPart+=variableDeclarationPart
		//	| procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart
		//	| usesUnitsPart+=usesUnitsPart
		//	| ImplemeTerminal+="implementation")* compoundStatement=compoundStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//(labelDeclarationPart+=labelDeclarationPart | constantDefinitionPart+=constantDefinitionPart |
		//typeDefinitionPart+=typeDefinitionPart | variableDeclarationPart+=variableDeclarationPart |
		//procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart | usesUnitsPart+=usesUnitsPart |
		//ImplemeTerminal+="implementation")* compoundStatement=compoundStatement
		public Group getGroup() { return cGroup; }
		
		//(labelDeclarationPart+=labelDeclarationPart | constantDefinitionPart+=constantDefinitionPart |
		//typeDefinitionPart+=typeDefinitionPart | variableDeclarationPart+=variableDeclarationPart |
		//procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart | usesUnitsPart+=usesUnitsPart |
		//ImplemeTerminal+="implementation")*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//labelDeclarationPart+=labelDeclarationPart
		public Assignment getLabelDeclarationPartAssignment_0_0() { return cLabelDeclarationPartAssignment_0_0; }
		
		//labelDeclarationPart
		public RuleCall getLabelDeclarationPartLabelDeclarationPartParserRuleCall_0_0_0() { return cLabelDeclarationPartLabelDeclarationPartParserRuleCall_0_0_0; }
		
		//constantDefinitionPart+=constantDefinitionPart
		public Assignment getConstantDefinitionPartAssignment_0_1() { return cConstantDefinitionPartAssignment_0_1; }
		
		//constantDefinitionPart
		public RuleCall getConstantDefinitionPartConstantDefinitionPartParserRuleCall_0_1_0() { return cConstantDefinitionPartConstantDefinitionPartParserRuleCall_0_1_0; }
		
		//typeDefinitionPart+=typeDefinitionPart
		public Assignment getTypeDefinitionPartAssignment_0_2() { return cTypeDefinitionPartAssignment_0_2; }
		
		//typeDefinitionPart
		public RuleCall getTypeDefinitionPartTypeDefinitionPartParserRuleCall_0_2_0() { return cTypeDefinitionPartTypeDefinitionPartParserRuleCall_0_2_0; }
		
		//variableDeclarationPart+=variableDeclarationPart
		public Assignment getVariableDeclarationPartAssignment_0_3() { return cVariableDeclarationPartAssignment_0_3; }
		
		//variableDeclarationPart
		public RuleCall getVariableDeclarationPartVariableDeclarationPartParserRuleCall_0_3_0() { return cVariableDeclarationPartVariableDeclarationPartParserRuleCall_0_3_0; }
		
		//procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart
		public Assignment getProcedureAndFunctionDeclarationPartAssignment_0_4() { return cProcedureAndFunctionDeclarationPartAssignment_0_4; }
		
		//procedureAndFunctionDeclarationPart
		public RuleCall getProcedureAndFunctionDeclarationPartProcedureAndFunctionDeclarationPartParserRuleCall_0_4_0() { return cProcedureAndFunctionDeclarationPartProcedureAndFunctionDeclarationPartParserRuleCall_0_4_0; }
		
		//usesUnitsPart+=usesUnitsPart
		public Assignment getUsesUnitsPartAssignment_0_5() { return cUsesUnitsPartAssignment_0_5; }
		
		//usesUnitsPart
		public RuleCall getUsesUnitsPartUsesUnitsPartParserRuleCall_0_5_0() { return cUsesUnitsPartUsesUnitsPartParserRuleCall_0_5_0; }
		
		//ImplemeTerminal+="implementation"
		public Assignment getImplemeTerminalAssignment_0_6() { return cImplemeTerminalAssignment_0_6; }
		
		//"implementation"
		public Keyword getImplemeTerminalImplementationKeyword_0_6_0() { return cImplemeTerminalImplementationKeyword_0_6_0; }
		
		//compoundStatement=compoundStatement
		public Assignment getCompoundStatementAssignment_1() { return cCompoundStatementAssignment_1; }
		
		//compoundStatement
		public RuleCall getCompoundStatementCompoundStatementParserRuleCall_1_0() { return cCompoundStatementCompoundStatementParserRuleCall_1_0; }
	}
	public class UsesUnitsPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.usesUnitsPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_1_0 = (RuleCall)cIdentifierListAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//usesUnitsPart:
		//	"uses" identifierList=identifierList ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"uses" identifierList=identifierList ";"
		public Group getGroup() { return cGroup; }
		
		//"uses"
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_1() { return cIdentifierListAssignment_1; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_1_0() { return cIdentifierListIdentifierListParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class LabelDeclarationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.labelDeclarationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelStart1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelStart1LabelStartParserRuleCall_1_0 = (RuleCall)cLabelStart1Assignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCommaTerminalAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cCommaTerminalCommaKeyword_2_0_0 = (Keyword)cCommaTerminalAssignment_2_0.eContents().get(0);
		private final Assignment cLabelStart2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelStart2LabelStartParserRuleCall_2_1_0 = (RuleCall)cLabelStart2Assignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//labelDeclarationPart:
		//	"label" labelStart1=labelStart (commaTerminal+="," labelStart2+=labelStart)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"label" labelStart1=labelStart (commaTerminal+="," labelStart2+=labelStart)* ";"
		public Group getGroup() { return cGroup; }
		
		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//labelStart1=labelStart
		public Assignment getLabelStart1Assignment_1() { return cLabelStart1Assignment_1; }
		
		//labelStart
		public RuleCall getLabelStart1LabelStartParserRuleCall_1_0() { return cLabelStart1LabelStartParserRuleCall_1_0; }
		
		//(commaTerminal+="," labelStart2+=labelStart)*
		public Group getGroup_2() { return cGroup_2; }
		
		//commaTerminal+=","
		public Assignment getCommaTerminalAssignment_2_0() { return cCommaTerminalAssignment_2_0; }
		
		//","
		public Keyword getCommaTerminalCommaKeyword_2_0_0() { return cCommaTerminalCommaKeyword_2_0_0; }
		
		//labelStart2+=labelStart
		public Assignment getLabelStart2Assignment_2_1() { return cLabelStart2Assignment_2_1; }
		
		//labelStart
		public RuleCall getLabelStart2LabelStartParserRuleCall_2_1_0() { return cLabelStart2LabelStartParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LabelStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.labelStart");
		private final Assignment cUnsignedIntegerAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUnsignedIntegerUnsignedIntegerParserRuleCall_0 = (RuleCall)cUnsignedIntegerAssignment.eContents().get(0);
		
		//labelStart:
		//	unsignedInteger=unsignedInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//unsignedInteger=unsignedInteger
		public Assignment getUnsignedIntegerAssignment() { return cUnsignedIntegerAssignment; }
		
		//unsignedInteger
		public RuleCall getUnsignedIntegerUnsignedIntegerParserRuleCall_0() { return cUnsignedIntegerUnsignedIntegerParserRuleCall_0; }
	}
	public class ConstantDefinitionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.constantDefinitionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cConstantDefinitionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConstantDefinitionConstantDefinitionParserRuleCall_1_0_0 = (RuleCall)cConstantDefinitionAssignment_1_0.eContents().get(0);
		private final Assignment cSemiTerminalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSemiTerminalSemicolonKeyword_1_1_0 = (Keyword)cSemiTerminalAssignment_1_1.eContents().get(0);
		
		//constantDefinitionPart:
		//	"const" (constantDefinition+=constantDefinition semiTerminal+=";")+;
		@Override public ParserRule getRule() { return rule; }
		
		//"const" (constantDefinition+=constantDefinition semiTerminal+=";")+
		public Group getGroup() { return cGroup; }
		
		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//(constantDefinition+=constantDefinition semiTerminal+=";")+
		public Group getGroup_1() { return cGroup_1; }
		
		//constantDefinition+=constantDefinition
		public Assignment getConstantDefinitionAssignment_1_0() { return cConstantDefinitionAssignment_1_0; }
		
		//constantDefinition
		public RuleCall getConstantDefinitionConstantDefinitionParserRuleCall_1_0_0() { return cConstantDefinitionConstantDefinitionParserRuleCall_1_0_0; }
		
		//semiTerminal+=";"
		public Assignment getSemiTerminalAssignment_1_1() { return cSemiTerminalAssignment_1_1; }
		
		//";"
		public Keyword getSemiTerminalSemicolonKeyword_1_1_0() { return cSemiTerminalSemicolonKeyword_1_1_0; }
	}
	public class ConstantDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.constantDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIDIdentifierParserRuleCall_0_0 = (RuleCall)cIDAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantConstantParserRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		
		//constantDefinition:
		//	ID=identifier "=" constant=constant;
		@Override public ParserRule getRule() { return rule; }
		
		//ID=identifier "=" constant=constant
		public Group getGroup() { return cGroup; }
		
		//ID=identifier
		public Assignment getIDAssignment_0() { return cIDAssignment_0; }
		
		//identifier
		public RuleCall getIDIdentifierParserRuleCall_0_0() { return cIDIdentifierParserRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//constant=constant
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//constant
		public RuleCall getConstantConstantParserRuleCall_2_0() { return cConstantConstantParserRuleCall_2_0; }
	}
	public class ConstantChrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.constantChr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUnsignedIntegerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnsignedIntegerUnsignedIntegerParserRuleCall_2_0 = (RuleCall)cUnsignedIntegerAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//constantChr:
		//	"chr" "(" unsignedInteger=unsignedInteger ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"chr" "(" unsignedInteger=unsignedInteger ")"
		public Group getGroup() { return cGroup; }
		
		//"chr"
		public Keyword getChrKeyword_0() { return cChrKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//unsignedInteger=unsignedInteger
		public Assignment getUnsignedIntegerAssignment_2() { return cUnsignedIntegerAssignment_2; }
		
		//unsignedInteger
		public RuleCall getUnsignedIntegerUnsignedIntegerParserRuleCall_2_0() { return cUnsignedIntegerUnsignedIntegerParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUnsignedNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUnsignedNumberUnsignedNumberParserRuleCall_0_0 = (RuleCall)cUnsignedNumberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSign1Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSign1SignParserRuleCall_1_0_0 = (RuleCall)cSign1Assignment_1_0.eContents().get(0);
		private final Assignment cUnsignedNumberAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnsignedNumberUnsignedNumberParserRuleCall_1_1_0 = (RuleCall)cUnsignedNumberAssignment_1_1.eContents().get(0);
		private final Assignment cIdentifier1Assignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdentifier1IdentifierParserRuleCall_2_0 = (RuleCall)cIdentifier1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cSign2Assignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSign2SignParserRuleCall_3_0_0 = (RuleCall)cSign2Assignment_3_0.eContents().get(0);
		private final Assignment cIdentifier2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdentifier2IdentifierParserRuleCall_3_1_0 = (RuleCall)cIdentifier2Assignment_3_1.eContents().get(0);
		private final Assignment cStringAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStringStringStartParserRuleCall_4_0 = (RuleCall)cStringAssignment_4.eContents().get(0);
		private final Assignment cConstantChrAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cConstantChrConstantChrParserRuleCall_5_0 = (RuleCall)cConstantChrAssignment_5.eContents().get(0);
		private final RuleCall cBoolParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//constant:
		//	unsignedNumber=unsignedNumber
		//	| sign1=sign unsignedNumber=unsignedNumber
		//	| identifier1=identifier
		//	| sign2=sign identifier2=identifier
		//	| string=StringStart
		//	| constantChr=constantChr
		//	| bool;
		@Override public ParserRule getRule() { return rule; }
		
		//unsignedNumber=unsignedNumber | sign1=sign unsignedNumber=unsignedNumber | identifier1=identifier | sign2=sign
		//identifier2=identifier | string=StringStart | constantChr=constantChr | bool
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unsignedNumber=unsignedNumber
		public Assignment getUnsignedNumberAssignment_0() { return cUnsignedNumberAssignment_0; }
		
		//unsignedNumber
		public RuleCall getUnsignedNumberUnsignedNumberParserRuleCall_0_0() { return cUnsignedNumberUnsignedNumberParserRuleCall_0_0; }
		
		//sign1=sign unsignedNumber=unsignedNumber
		public Group getGroup_1() { return cGroup_1; }
		
		//sign1=sign
		public Assignment getSign1Assignment_1_0() { return cSign1Assignment_1_0; }
		
		//sign
		public RuleCall getSign1SignParserRuleCall_1_0_0() { return cSign1SignParserRuleCall_1_0_0; }
		
		//unsignedNumber=unsignedNumber
		public Assignment getUnsignedNumberAssignment_1_1() { return cUnsignedNumberAssignment_1_1; }
		
		//unsignedNumber
		public RuleCall getUnsignedNumberUnsignedNumberParserRuleCall_1_1_0() { return cUnsignedNumberUnsignedNumberParserRuleCall_1_1_0; }
		
		//identifier1=identifier
		public Assignment getIdentifier1Assignment_2() { return cIdentifier1Assignment_2; }
		
		//identifier
		public RuleCall getIdentifier1IdentifierParserRuleCall_2_0() { return cIdentifier1IdentifierParserRuleCall_2_0; }
		
		//sign2=sign identifier2=identifier
		public Group getGroup_3() { return cGroup_3; }
		
		//sign2=sign
		public Assignment getSign2Assignment_3_0() { return cSign2Assignment_3_0; }
		
		//sign
		public RuleCall getSign2SignParserRuleCall_3_0_0() { return cSign2SignParserRuleCall_3_0_0; }
		
		//identifier2=identifier
		public Assignment getIdentifier2Assignment_3_1() { return cIdentifier2Assignment_3_1; }
		
		//identifier
		public RuleCall getIdentifier2IdentifierParserRuleCall_3_1_0() { return cIdentifier2IdentifierParserRuleCall_3_1_0; }
		
		//string=StringStart
		public Assignment getStringAssignment_4() { return cStringAssignment_4; }
		
		//StringStart
		public RuleCall getStringStringStartParserRuleCall_4_0() { return cStringStringStartParserRuleCall_4_0; }
		
		//constantChr=constantChr
		public Assignment getConstantChrAssignment_5() { return cConstantChrAssignment_5; }
		
		//constantChr
		public RuleCall getConstantChrConstantChrParserRuleCall_5_0() { return cConstantChrConstantChrParserRuleCall_5_0; }
		
		//bool
		public RuleCall getBoolParserRuleCall_6() { return cBoolParserRuleCall_6; }
	}
	public class UnsignedNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.unsignedNumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUnsignedIntegerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUnsignedIntegerUnsignedIntegerParserRuleCall_0_0 = (RuleCall)cUnsignedIntegerAssignment_0.eContents().get(0);
		private final Assignment cUnsignedRealAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnsignedRealUnsignedRealParserRuleCall_1_0 = (RuleCall)cUnsignedRealAssignment_1.eContents().get(0);
		
		//unsignedNumber:
		//	unsignedInteger=unsignedInteger
		//	| unsignedReal=unsignedReal;
		@Override public ParserRule getRule() { return rule; }
		
		//unsignedInteger=unsignedInteger | unsignedReal=unsignedReal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unsignedInteger=unsignedInteger
		public Assignment getUnsignedIntegerAssignment_0() { return cUnsignedIntegerAssignment_0; }
		
		//unsignedInteger
		public RuleCall getUnsignedIntegerUnsignedIntegerParserRuleCall_0_0() { return cUnsignedIntegerUnsignedIntegerParserRuleCall_0_0; }
		
		//unsignedReal=unsignedReal
		public Assignment getUnsignedRealAssignment_1() { return cUnsignedRealAssignment_1; }
		
		//unsignedReal
		public RuleCall getUnsignedRealUnsignedRealParserRuleCall_1_0() { return cUnsignedRealUnsignedRealParserRuleCall_1_0; }
	}
	public class UnsignedIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.unsignedInteger");
		private final Assignment cUnsignedIntegerAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUnsignedIntegerNUM_INTTerminalRuleCall_0 = (RuleCall)cUnsignedIntegerAssignment.eContents().get(0);
		
		//unsignedInteger:
		//	unsignedInteger=NUM_INT;
		@Override public ParserRule getRule() { return rule; }
		
		//unsignedInteger=NUM_INT
		public Assignment getUnsignedIntegerAssignment() { return cUnsignedIntegerAssignment; }
		
		//NUM_INT
		public RuleCall getUnsignedIntegerNUM_INTTerminalRuleCall_0() { return cUnsignedIntegerNUM_INTTerminalRuleCall_0; }
	}
	public class UnsignedRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.unsignedReal");
		private final Assignment cUnsignedRealAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUnsignedRealNUM_REALTerminalRuleCall_0 = (RuleCall)cUnsignedRealAssignment.eContents().get(0);
		
		//unsignedReal:
		//	unsignedReal=NUM_REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//unsignedReal=NUM_REAL
		public Assignment getUnsignedRealAssignment() { return cUnsignedRealAssignment; }
		
		//NUM_REAL
		public RuleCall getUnsignedRealNUM_REALTerminalRuleCall_0() { return cUnsignedRealNUM_REALTerminalRuleCall_0; }
	}
	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.sign");
		private final Assignment cSignAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSignAlternatives_0 = (Alternatives)cSignAssignment.eContents().get(0);
		private final Keyword cSignPlusSignKeyword_0_0 = (Keyword)cSignAlternatives_0.eContents().get(0);
		private final Keyword cSignHyphenMinusKeyword_0_1 = (Keyword)cSignAlternatives_0.eContents().get(1);
		
		//sign:
		//	sign=("+" | "-");
		@Override public ParserRule getRule() { return rule; }
		
		//sign=("+" | "-")
		public Assignment getSignAssignment() { return cSignAssignment; }
		
		//("+" | "-")
		public Alternatives getSignAlternatives_0() { return cSignAlternatives_0; }
		
		//"+"
		public Keyword getSignPlusSignKeyword_0_0() { return cSignPlusSignKeyword_0_0; }
		
		//"-"
		public Keyword getSignHyphenMinusKeyword_0_1() { return cSignHyphenMinusKeyword_0_1; }
	}
	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.bool");
		private final Assignment cBoolAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBoolAlternatives_0 = (Alternatives)cBoolAssignment.eContents().get(0);
		private final Keyword cBoolTrueKeyword_0_0 = (Keyword)cBoolAlternatives_0.eContents().get(0);
		private final Keyword cBoolFalseKeyword_0_1 = (Keyword)cBoolAlternatives_0.eContents().get(1);
		
		//bool:
		//	bool=("true" | "false");
		@Override public ParserRule getRule() { return rule; }
		
		//bool=("true" | "false")
		public Assignment getBoolAssignment() { return cBoolAssignment; }
		
		//("true" | "false")
		public Alternatives getBoolAlternatives_0() { return cBoolAlternatives_0; }
		
		//"true"
		public Keyword getBoolTrueKeyword_0_0() { return cBoolTrueKeyword_0_0; }
		
		//"false"
		public Keyword getBoolFalseKeyword_0_1() { return cBoolFalseKeyword_0_1; }
	}
	public class StringStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.StringStart");
		private final Assignment cStringStartAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringStartSTRINGTerminalRuleCall_0 = (RuleCall)cStringStartAssignment.eContents().get(0);
		
		//StringStart:
		//	StringStart=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//StringStart=STRING
		public Assignment getStringStartAssignment() { return cStringStartAssignment; }
		
		//STRING
		public RuleCall getStringStartSTRINGTerminalRuleCall_0() { return cStringStartSTRINGTerminalRuleCall_0; }
	}
	public class TypeDefinitionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.typeDefinitionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypeDefinitionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_1_0_0 = (RuleCall)cTypeDefinitionAssignment_1_0.eContents().get(0);
		private final Assignment cSemiTerminalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSemiTerminalSemicolonKeyword_1_1_0 = (Keyword)cSemiTerminalAssignment_1_1.eContents().get(0);
		
		//typeDefinitionPart:
		//	"type" (typeDefinition+=typeDefinition semiTerminal+=";")+;
		@Override public ParserRule getRule() { return rule; }
		
		//"type" (typeDefinition+=typeDefinition semiTerminal+=";")+
		public Group getGroup() { return cGroup; }
		
		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//(typeDefinition+=typeDefinition semiTerminal+=";")+
		public Group getGroup_1() { return cGroup_1; }
		
		//typeDefinition+=typeDefinition
		public Assignment getTypeDefinitionAssignment_1_0() { return cTypeDefinitionAssignment_1_0; }
		
		//typeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_1_0_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_1_0_0; }
		
		//semiTerminal+=";"
		public Assignment getSemiTerminalAssignment_1_1() { return cSemiTerminalAssignment_1_1; }
		
		//";"
		public Keyword getSemiTerminalSemicolonKeyword_1_1_0() { return cSemiTerminalSemicolonKeyword_1_1_0; }
	}
	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.typeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cID1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cID1IdentifierParserRuleCall_0_0 = (RuleCall)cID1Assignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeStartParserRuleCall_2_0_0 = (RuleCall)cTypeAlternatives_2_0.eContents().get(0);
		private final RuleCall cTypeFunctionTypeParserRuleCall_2_0_1 = (RuleCall)cTypeAlternatives_2_0.eContents().get(1);
		private final RuleCall cTypeProcedureTypeParserRuleCall_2_0_2 = (RuleCall)cTypeAlternatives_2_0.eContents().get(2);
		
		//typeDefinition:
		//	ID1=identifier "=" type=(typeStart | functionType | procedureType);
		@Override public ParserRule getRule() { return rule; }
		
		//ID1=identifier "=" type=(typeStart | functionType | procedureType)
		public Group getGroup() { return cGroup; }
		
		//ID1=identifier
		public Assignment getID1Assignment_0() { return cID1Assignment_0; }
		
		//identifier
		public RuleCall getID1IdentifierParserRuleCall_0_0() { return cID1IdentifierParserRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//type=(typeStart | functionType | procedureType)
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//(typeStart | functionType | procedureType)
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//typeStart
		public RuleCall getTypeTypeStartParserRuleCall_2_0_0() { return cTypeTypeStartParserRuleCall_2_0_0; }
		
		//functionType
		public RuleCall getTypeFunctionTypeParserRuleCall_2_0_1() { return cTypeFunctionTypeParserRuleCall_2_0_1; }
		
		//procedureType
		public RuleCall getTypeProcedureTypeParserRuleCall_2_0_2() { return cTypeProcedureTypeParserRuleCall_2_0_2; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.functionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormalParameterListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormalParameterListFormalParameterListParserRuleCall_1_0 = (RuleCall)cFormalParameterListAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResultTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultTypeResultTypeParserRuleCall_3_0 = (RuleCall)cResultTypeAssignment_3.eContents().get(0);
		
		//functionType:
		//	"function" formalParameterList=formalParameterList? ":" resultType=resultType;
		@Override public ParserRule getRule() { return rule; }
		
		//"function" formalParameterList=formalParameterList? ":" resultType=resultType
		public Group getGroup() { return cGroup; }
		
		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//formalParameterList=formalParameterList?
		public Assignment getFormalParameterListAssignment_1() { return cFormalParameterListAssignment_1; }
		
		//formalParameterList
		public RuleCall getFormalParameterListFormalParameterListParserRuleCall_1_0() { return cFormalParameterListFormalParameterListParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//resultType=resultType
		public Assignment getResultTypeAssignment_3() { return cResultTypeAssignment_3; }
		
		//resultType
		public RuleCall getResultTypeResultTypeParserRuleCall_3_0() { return cResultTypeResultTypeParserRuleCall_3_0; }
	}
	public class ProcedureTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.procedureType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcedureTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProcedureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormalParameterListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParameterListFormalParameterListParserRuleCall_2_0 = (RuleCall)cFormalParameterListAssignment_2.eContents().get(0);
		
		//procedureType:
		//	{procedureType} "procedure" formalParameterList=formalParameterList?;
		@Override public ParserRule getRule() { return rule; }
		
		//{procedureType} "procedure" formalParameterList=formalParameterList?
		public Group getGroup() { return cGroup; }
		
		//{procedureType}
		public Action getProcedureTypeAction_0() { return cProcedureTypeAction_0; }
		
		//"procedure"
		public Keyword getProcedureKeyword_1() { return cProcedureKeyword_1; }
		
		//formalParameterList=formalParameterList?
		public Assignment getFormalParameterListAssignment_2() { return cFormalParameterListAssignment_2; }
		
		//formalParameterList
		public RuleCall getFormalParameterListFormalParameterListParserRuleCall_2_0() { return cFormalParameterListFormalParameterListParserRuleCall_2_0; }
	}
	public class TypeStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.typeStart");
		private final Assignment cTypeStartAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeStartAlternatives_0 = (Alternatives)cTypeStartAssignment.eContents().get(0);
		private final RuleCall cTypeStartSimpleTypeParserRuleCall_0_0 = (RuleCall)cTypeStartAlternatives_0.eContents().get(0);
		private final RuleCall cTypeStartStructuredTypeParserRuleCall_0_1 = (RuleCall)cTypeStartAlternatives_0.eContents().get(1);
		private final RuleCall cTypeStartPointerTypeParserRuleCall_0_2 = (RuleCall)cTypeStartAlternatives_0.eContents().get(2);
		
		//typeStart:
		//	typeStart=(simpleType | structuredType | pointerType);
		@Override public ParserRule getRule() { return rule; }
		
		//typeStart=(simpleType | structuredType | pointerType)
		public Assignment getTypeStartAssignment() { return cTypeStartAssignment; }
		
		//(simpleType | structuredType | pointerType)
		public Alternatives getTypeStartAlternatives_0() { return cTypeStartAlternatives_0; }
		
		//simpleType
		public RuleCall getTypeStartSimpleTypeParserRuleCall_0_0() { return cTypeStartSimpleTypeParserRuleCall_0_0; }
		
		//structuredType
		public RuleCall getTypeStartStructuredTypeParserRuleCall_0_1() { return cTypeStartStructuredTypeParserRuleCall_0_1; }
		
		//pointerType
		public RuleCall getTypeStartPointerTypeParserRuleCall_0_2() { return cTypeStartPointerTypeParserRuleCall_0_2; }
	}
	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.simpleType");
		private final Assignment cSimpleTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSimpleTypeAlternatives_0 = (Alternatives)cSimpleTypeAssignment.eContents().get(0);
		private final RuleCall cSimpleTypeScalarTypeParserRuleCall_0_0 = (RuleCall)cSimpleTypeAlternatives_0.eContents().get(0);
		private final RuleCall cSimpleTypeSubrangeTypeParserRuleCall_0_1 = (RuleCall)cSimpleTypeAlternatives_0.eContents().get(1);
		private final RuleCall cSimpleTypeTypeIdentifierParserRuleCall_0_2 = (RuleCall)cSimpleTypeAlternatives_0.eContents().get(2);
		private final RuleCall cSimpleTypeStringtypeParserRuleCall_0_3 = (RuleCall)cSimpleTypeAlternatives_0.eContents().get(3);
		
		//simpleType:
		//	simpleType=(scalarType
		//	| subrangeType
		//	| typeIdentifier
		//	| stringtype);
		@Override public ParserRule getRule() { return rule; }
		
		//simpleType=(scalarType | subrangeType | typeIdentifier | stringtype)
		public Assignment getSimpleTypeAssignment() { return cSimpleTypeAssignment; }
		
		//(scalarType | subrangeType | typeIdentifier | stringtype)
		public Alternatives getSimpleTypeAlternatives_0() { return cSimpleTypeAlternatives_0; }
		
		//scalarType
		public RuleCall getSimpleTypeScalarTypeParserRuleCall_0_0() { return cSimpleTypeScalarTypeParserRuleCall_0_0; }
		
		//subrangeType
		public RuleCall getSimpleTypeSubrangeTypeParserRuleCall_0_1() { return cSimpleTypeSubrangeTypeParserRuleCall_0_1; }
		
		//typeIdentifier
		public RuleCall getSimpleTypeTypeIdentifierParserRuleCall_0_2() { return cSimpleTypeTypeIdentifierParserRuleCall_0_2; }
		
		//stringtype
		public RuleCall getSimpleTypeStringtypeParserRuleCall_0_3() { return cSimpleTypeStringtypeParserRuleCall_0_3; }
	}
	public class ScalarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.scalarType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_1_0 = (RuleCall)cIdentifierListAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//scalarType:
		//	"(" identifierList=identifierList ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" identifierList=identifierList ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_1() { return cIdentifierListAssignment_1; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_1_0() { return cIdentifierListIdentifierListParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SubrangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.subrangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstant1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstant1ConstantParserRuleCall_0_0 = (RuleCall)cConstant1Assignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstan2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstan2ConstantParserRuleCall_2_0 = (RuleCall)cConstan2Assignment_2.eContents().get(0);
		
		//subrangeType:
		//	constant1=constant ".." constan2=constant;
		@Override public ParserRule getRule() { return rule; }
		
		//constant1=constant ".." constan2=constant
		public Group getGroup() { return cGroup; }
		
		//constant1=constant
		public Assignment getConstant1Assignment_0() { return cConstant1Assignment_0; }
		
		//constant
		public RuleCall getConstant1ConstantParserRuleCall_0_0() { return cConstant1ConstantParserRuleCall_0_0; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//constan2=constant
		public Assignment getConstan2Assignment_2() { return cConstan2Assignment_2; }
		
		//constant
		public RuleCall getConstan2ConstantParserRuleCall_2_0() { return cConstan2ConstantParserRuleCall_2_0; }
	}
	public class TypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.typeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final Keyword cTypeCharKeyword_1_0_0 = (Keyword)cTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cTypeBooleanKeyword_1_0_1 = (Keyword)cTypeAlternatives_1_0.eContents().get(1);
		private final Keyword cTypeIntegerKeyword_1_0_2 = (Keyword)cTypeAlternatives_1_0.eContents().get(2);
		private final Keyword cTypeRealKeyword_1_0_3 = (Keyword)cTypeAlternatives_1_0.eContents().get(3);
		private final Keyword cTypeStringKeyword_1_0_4 = (Keyword)cTypeAlternatives_1_0.eContents().get(4);
		
		//typeIdentifier:
		//	identifier=identifier | type=("Char" | "Boolean" | "Integer" | "Real" | "String");
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier | type=("Char" | "Boolean" | "Integer" | "Real" | "String")
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0() { return cIdentifierIdentifierParserRuleCall_0_0; }
		
		//type=("Char" | "Boolean" | "Integer" | "Real" | "String")
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//("Char" | "Boolean" | "Integer" | "Real" | "String")
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }
		
		//"Char"
		public Keyword getTypeCharKeyword_1_0_0() { return cTypeCharKeyword_1_0_0; }
		
		//"Boolean"
		public Keyword getTypeBooleanKeyword_1_0_1() { return cTypeBooleanKeyword_1_0_1; }
		
		//"Integer"
		public Keyword getTypeIntegerKeyword_1_0_2() { return cTypeIntegerKeyword_1_0_2; }
		
		//"Real"
		public Keyword getTypeRealKeyword_1_0_3() { return cTypeRealKeyword_1_0_3; }
		
		//"String"
		public Keyword getTypeStringKeyword_1_0_4() { return cTypeStringKeyword_1_0_4; }
	}
	public class StructuredTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.structuredType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPackedKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cUnpackedStructuredType1Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cUnpackedStructuredType1UnpackedStructuredTypeParserRuleCall_0_1_0 = (RuleCall)cUnpackedStructuredType1Assignment_0_1.eContents().get(0);
		private final Assignment cUnpackedStructuredType2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnpackedStructuredType2UnpackedStructuredTypeParserRuleCall_1_0 = (RuleCall)cUnpackedStructuredType2Assignment_1.eContents().get(0);
		
		//structuredType:
		//	"packed" unpackedStructuredType1=unpackedStructuredType
		//	| unpackedStructuredType2=unpackedStructuredType;
		@Override public ParserRule getRule() { return rule; }
		
		//"packed" unpackedStructuredType1=unpackedStructuredType | unpackedStructuredType2=unpackedStructuredType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"packed" unpackedStructuredType1=unpackedStructuredType
		public Group getGroup_0() { return cGroup_0; }
		
		//"packed"
		public Keyword getPackedKeyword_0_0() { return cPackedKeyword_0_0; }
		
		//unpackedStructuredType1=unpackedStructuredType
		public Assignment getUnpackedStructuredType1Assignment_0_1() { return cUnpackedStructuredType1Assignment_0_1; }
		
		//unpackedStructuredType
		public RuleCall getUnpackedStructuredType1UnpackedStructuredTypeParserRuleCall_0_1_0() { return cUnpackedStructuredType1UnpackedStructuredTypeParserRuleCall_0_1_0; }
		
		//unpackedStructuredType2=unpackedStructuredType
		public Assignment getUnpackedStructuredType2Assignment_1() { return cUnpackedStructuredType2Assignment_1; }
		
		//unpackedStructuredType
		public RuleCall getUnpackedStructuredType2UnpackedStructuredTypeParserRuleCall_1_0() { return cUnpackedStructuredType2UnpackedStructuredTypeParserRuleCall_1_0; }
	}
	public class UnpackedStructuredTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.unpackedStructuredType");
		private final Assignment cUnpackedStructuredTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUnpackedStructuredTypeRecordTypeParserRuleCall_0 = (RuleCall)cUnpackedStructuredTypeAssignment.eContents().get(0);
		
		//unpackedStructuredType:
		//	unpackedStructuredType=recordType;
		@Override public ParserRule getRule() { return rule; }
		
		//unpackedStructuredType=recordType
		public Assignment getUnpackedStructuredTypeAssignment() { return cUnpackedStructuredTypeAssignment; }
		
		//recordType
		public RuleCall getUnpackedStructuredTypeRecordTypeParserRuleCall_0() { return cUnpackedStructuredTypeRecordTypeParserRuleCall_0; }
	}
	public class StringtypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.stringtype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStringTerminalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStringTerminalSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringTerminalAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIDAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIDIdentifierParserRuleCall_2_0_0 = (RuleCall)cIDAssignment_2_0.eContents().get(0);
		private final Assignment cUnsignedNumberAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cUnsignedNumberUnsignedNumberParserRuleCall_2_1_0 = (RuleCall)cUnsignedNumberAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//stringtype:
		//	stringTerminal=STRING "[" (ID=identifier | unsignedNumber=unsignedNumber) "]";
		@Override public ParserRule getRule() { return rule; }
		
		//stringTerminal=STRING "[" (ID=identifier | unsignedNumber=unsignedNumber) "]"
		public Group getGroup() { return cGroup; }
		
		//stringTerminal=STRING
		public Assignment getStringTerminalAssignment_0() { return cStringTerminalAssignment_0; }
		
		//STRING
		public RuleCall getStringTerminalSTRINGTerminalRuleCall_0_0() { return cStringTerminalSTRINGTerminalRuleCall_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//ID=identifier | unsignedNumber=unsignedNumber
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ID=identifier
		public Assignment getIDAssignment_2_0() { return cIDAssignment_2_0; }
		
		//identifier
		public RuleCall getIDIdentifierParserRuleCall_2_0_0() { return cIDIdentifierParserRuleCall_2_0_0; }
		
		//unsignedNumber=unsignedNumber
		public Assignment getUnsignedNumberAssignment_2_1() { return cUnsignedNumberAssignment_2_1; }
		
		//unsignedNumber
		public RuleCall getUnsignedNumberUnsignedNumberParserRuleCall_2_1_0() { return cUnsignedNumberUnsignedNumberParserRuleCall_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class RecordTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.recordType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecordTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRecordKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFieldListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFieldListFieldListParserRuleCall_2_0_0 = (RuleCall)cFieldListAssignment_2_0.eContents().get(0);
		private final Assignment cSemiTerminalAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cSemiTerminalSemicolonKeyword_2_1_0 = (Keyword)cSemiTerminalAssignment_2_1.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//recordType:
		//	{recordType} "record" (fieldList=fieldList semiTerminal=";")? "end";
		@Override public ParserRule getRule() { return rule; }
		
		//{recordType} "record" (fieldList=fieldList semiTerminal=";")? "end"
		public Group getGroup() { return cGroup; }
		
		//{recordType}
		public Action getRecordTypeAction_0() { return cRecordTypeAction_0; }
		
		//"record"
		public Keyword getRecordKeyword_1() { return cRecordKeyword_1; }
		
		//(fieldList=fieldList semiTerminal=";")?
		public Group getGroup_2() { return cGroup_2; }
		
		//fieldList=fieldList
		public Assignment getFieldListAssignment_2_0() { return cFieldListAssignment_2_0; }
		
		//fieldList
		public RuleCall getFieldListFieldListParserRuleCall_2_0_0() { return cFieldListFieldListParserRuleCall_2_0_0; }
		
		//semiTerminal=";"
		public Assignment getSemiTerminalAssignment_2_1() { return cSemiTerminalAssignment_2_1; }
		
		//";"
		public Keyword getSemiTerminalSemicolonKeyword_2_1_0() { return cSemiTerminalSemicolonKeyword_2_1_0; }
		
		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class FieldListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.fieldList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFixedPartAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFixedPartFixedPartParserRuleCall_0_0_0 = (RuleCall)cFixedPartAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cSemiTerminalAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cSemiTerminalSemicolonKeyword_0_1_0_0 = (Keyword)cSemiTerminalAssignment_0_1_0.eContents().get(0);
		private final Assignment cVariantPart1Assignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cVariantPart1VariantPartParserRuleCall_0_1_1_0 = (RuleCall)cVariantPart1Assignment_0_1_1.eContents().get(0);
		private final Assignment cVariantPart2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariantPart2VariantPartParserRuleCall_1_0 = (RuleCall)cVariantPart2Assignment_1.eContents().get(0);
		
		//fieldList:
		//	fixedPart=fixedPart (semiTerminal=";" variantPart1=variantPart)?
		//	| variantPart2=variantPart;
		@Override public ParserRule getRule() { return rule; }
		
		//fixedPart=fixedPart (semiTerminal=";" variantPart1=variantPart)? | variantPart2=variantPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fixedPart=fixedPart (semiTerminal=";" variantPart1=variantPart)?
		public Group getGroup_0() { return cGroup_0; }
		
		//fixedPart=fixedPart
		public Assignment getFixedPartAssignment_0_0() { return cFixedPartAssignment_0_0; }
		
		//fixedPart
		public RuleCall getFixedPartFixedPartParserRuleCall_0_0_0() { return cFixedPartFixedPartParserRuleCall_0_0_0; }
		
		//(semiTerminal=";" variantPart1=variantPart)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//semiTerminal=";"
		public Assignment getSemiTerminalAssignment_0_1_0() { return cSemiTerminalAssignment_0_1_0; }
		
		//";"
		public Keyword getSemiTerminalSemicolonKeyword_0_1_0_0() { return cSemiTerminalSemicolonKeyword_0_1_0_0; }
		
		//variantPart1=variantPart
		public Assignment getVariantPart1Assignment_0_1_1() { return cVariantPart1Assignment_0_1_1; }
		
		//variantPart
		public RuleCall getVariantPart1VariantPartParserRuleCall_0_1_1_0() { return cVariantPart1VariantPartParserRuleCall_0_1_1_0; }
		
		//variantPart2=variantPart
		public Assignment getVariantPart2Assignment_1() { return cVariantPart2Assignment_1; }
		
		//variantPart
		public RuleCall getVariantPart2VariantPartParserRuleCall_1_0() { return cVariantPart2VariantPartParserRuleCall_1_0; }
	}
	public class FixedPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.fixedPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRecordSectionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSemiTerminalAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cSemiTerminalSemicolonKeyword_1_0_0 = (Keyword)cSemiTerminalAssignment_1_0.eContents().get(0);
		private final Assignment cRecordSectionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRecordSectionRecordSectionParserRuleCall_1_1_0 = (RuleCall)cRecordSectionAssignment_1_1.eContents().get(0);
		
		//fixedPart:
		//	recordSection (semiTerminal+=";" recordSection+=recordSection)*;
		@Override public ParserRule getRule() { return rule; }
		
		//recordSection (semiTerminal+=";" recordSection+=recordSection)*
		public Group getGroup() { return cGroup; }
		
		//recordSection
		public RuleCall getRecordSectionParserRuleCall_0() { return cRecordSectionParserRuleCall_0; }
		
		//(semiTerminal+=";" recordSection+=recordSection)*
		public Group getGroup_1() { return cGroup_1; }
		
		//semiTerminal+=";"
		public Assignment getSemiTerminalAssignment_1_0() { return cSemiTerminalAssignment_1_0; }
		
		//";"
		public Keyword getSemiTerminalSemicolonKeyword_1_0_0() { return cSemiTerminalSemicolonKeyword_1_0_0; }
		
		//recordSection+=recordSection
		public Assignment getRecordSectionAssignment_1_1() { return cRecordSectionAssignment_1_1; }
		
		//recordSection
		public RuleCall getRecordSectionRecordSectionParserRuleCall_1_1_0() { return cRecordSectionRecordSectionParserRuleCall_1_1_0; }
	}
	public class RecordSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.recordSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeStartTypeStartParserRuleCall_2_0 = (RuleCall)cTypeStartAssignment_2.eContents().get(0);
		
		//recordSection:
		//	identifierList=identifierList ":" typeStart=typeStart;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList=identifierList ":" typeStart=typeStart
		public Group getGroup() { return cGroup; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeStart=typeStart
		public Assignment getTypeStartAssignment_2() { return cTypeStartAssignment_2; }
		
		//typeStart
		public RuleCall getTypeStartTypeStartParserRuleCall_2_0() { return cTypeStartTypeStartParserRuleCall_2_0; }
	}
	public class VariantPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.variantPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariant1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariant1VariantParserRuleCall_3_0 = (RuleCall)cVariant1Assignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSemiTerminalAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cSemiTerminalSemicolonKeyword_4_0_0 = (Keyword)cSemiTerminalAssignment_4_0.eContents().get(0);
		private final Assignment cVariant2Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariant2VariantParserRuleCall_4_1_0 = (RuleCall)cVariant2Assignment_4_1.eContents().get(0);
		
		//variantPart:
		//	"case" tag=tag "of" variant1=variant (semiTerminal+=";" variant2+=variant)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"case" tag=tag "of" variant1=variant (semiTerminal+=";" variant2+=variant)*
		public Group getGroup() { return cGroup; }
		
		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//tag=tag
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//tag
		public RuleCall getTagTagParserRuleCall_1_0() { return cTagTagParserRuleCall_1_0; }
		
		//"of"
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//variant1=variant
		public Assignment getVariant1Assignment_3() { return cVariant1Assignment_3; }
		
		//variant
		public RuleCall getVariant1VariantParserRuleCall_3_0() { return cVariant1VariantParserRuleCall_3_0; }
		
		//(semiTerminal+=";" variant2+=variant)*
		public Group getGroup_4() { return cGroup_4; }
		
		//semiTerminal+=";"
		public Assignment getSemiTerminalAssignment_4_0() { return cSemiTerminalAssignment_4_0; }
		
		//";"
		public Keyword getSemiTerminalSemicolonKeyword_4_0_0() { return cSemiTerminalSemicolonKeyword_4_0_0; }
		
		//variant2+=variant
		public Assignment getVariant2Assignment_4_1() { return cVariant2Assignment_4_1; }
		
		//variant
		public RuleCall getVariant2VariantParserRuleCall_4_1_0() { return cVariant2VariantParserRuleCall_4_1_0; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.tag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIDAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIDIdentifierParserRuleCall_0_0_0 = (RuleCall)cIDAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeIdentifier1Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeIdentifier1TypeIdentifierParserRuleCall_0_2_0 = (RuleCall)cTypeIdentifier1Assignment_0_2.eContents().get(0);
		private final Assignment cTypeIdentifier2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeIdentifier2TypeIdentifierParserRuleCall_1_0 = (RuleCall)cTypeIdentifier2Assignment_1.eContents().get(0);
		
		//tag:
		//	ID=identifier ":" typeIdentifier1=typeIdentifier
		//	| typeIdentifier2=typeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//ID=identifier ":" typeIdentifier1=typeIdentifier | typeIdentifier2=typeIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID=identifier ":" typeIdentifier1=typeIdentifier
		public Group getGroup_0() { return cGroup_0; }
		
		//ID=identifier
		public Assignment getIDAssignment_0_0() { return cIDAssignment_0_0; }
		
		//identifier
		public RuleCall getIDIdentifierParserRuleCall_0_0_0() { return cIDIdentifierParserRuleCall_0_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//typeIdentifier1=typeIdentifier
		public Assignment getTypeIdentifier1Assignment_0_2() { return cTypeIdentifier1Assignment_0_2; }
		
		//typeIdentifier
		public RuleCall getTypeIdentifier1TypeIdentifierParserRuleCall_0_2_0() { return cTypeIdentifier1TypeIdentifierParserRuleCall_0_2_0; }
		
		//typeIdentifier2=typeIdentifier
		public Assignment getTypeIdentifier2Assignment_1() { return cTypeIdentifier2Assignment_1; }
		
		//typeIdentifier
		public RuleCall getTypeIdentifier2TypeIdentifierParserRuleCall_1_0() { return cTypeIdentifier2TypeIdentifierParserRuleCall_1_0; }
	}
	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.variant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstListConstListParserRuleCall_0_0 = (RuleCall)cConstListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldListFieldListParserRuleCall_3_0 = (RuleCall)cFieldListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//variant:
		//	constList=constList ":" "(" fieldList=fieldList ")";
		@Override public ParserRule getRule() { return rule; }
		
		//constList=constList ":" "(" fieldList=fieldList ")"
		public Group getGroup() { return cGroup; }
		
		//constList=constList
		public Assignment getConstListAssignment_0() { return cConstListAssignment_0; }
		
		//constList
		public RuleCall getConstListConstListParserRuleCall_0_0() { return cConstListConstListParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//fieldList=fieldList
		public Assignment getFieldListAssignment_3() { return cFieldListAssignment_3; }
		
		//fieldList
		public RuleCall getFieldListFieldListParserRuleCall_3_0() { return cFieldListFieldListParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PointerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.pointerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIdentifierTypeIdentifierParserRuleCall_1_0 = (RuleCall)cTypeIdentifierAssignment_1.eContents().get(0);
		
		//pointerType:
		//	"^" typeIdentifier=typeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//"^" typeIdentifier=typeIdentifier
		public Group getGroup() { return cGroup; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_0() { return cCircumflexAccentKeyword_0; }
		
		//typeIdentifier=typeIdentifier
		public Assignment getTypeIdentifierAssignment_1() { return cTypeIdentifierAssignment_1; }
		
		//typeIdentifier
		public RuleCall getTypeIdentifierTypeIdentifierParserRuleCall_1_0() { return cTypeIdentifierTypeIdentifierParserRuleCall_1_0; }
	}
	public class VariableDeclarationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.variableDeclarationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableDeclaration1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableDeclaration1VariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableDeclaration1Assignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSemiTerminalAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cSemiTerminalSemicolonKeyword_2_0_0 = (Keyword)cSemiTerminalAssignment_2_0.eContents().get(0);
		private final Assignment cVariableDeclaration2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableDeclaration2VariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariableDeclaration2Assignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//variableDeclarationPart:
		//	"var" variableDeclaration1=variableDeclaration (semiTerminal+=";" variableDeclaration2+=variableDeclaration)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"var" variableDeclaration1=variableDeclaration (semiTerminal+=";" variableDeclaration2+=variableDeclaration)* ";"
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//variableDeclaration1=variableDeclaration
		public Assignment getVariableDeclaration1Assignment_1() { return cVariableDeclaration1Assignment_1; }
		
		//variableDeclaration
		public RuleCall getVariableDeclaration1VariableDeclarationParserRuleCall_1_0() { return cVariableDeclaration1VariableDeclarationParserRuleCall_1_0; }
		
		//(semiTerminal+=";" variableDeclaration2+=variableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }
		
		//semiTerminal+=";"
		public Assignment getSemiTerminalAssignment_2_0() { return cSemiTerminalAssignment_2_0; }
		
		//";"
		public Keyword getSemiTerminalSemicolonKeyword_2_0_0() { return cSemiTerminalSemicolonKeyword_2_0_0; }
		
		//variableDeclaration2+=variableDeclaration
		public Assignment getVariableDeclaration2Assignment_2_1() { return cVariableDeclaration2Assignment_2_1; }
		
		//variableDeclaration
		public RuleCall getVariableDeclaration2VariableDeclarationParserRuleCall_2_1_0() { return cVariableDeclaration2VariableDeclarationParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.variableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeStartTypeStartParserRuleCall_2_0 = (RuleCall)cTypeStartAssignment_2.eContents().get(0);
		
		//variableDeclaration:
		//	identifierList=identifierList ":" typeStart=typeStart;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList=identifierList ":" typeStart=typeStart
		public Group getGroup() { return cGroup; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeStart=typeStart
		public Assignment getTypeStartAssignment_2() { return cTypeStartAssignment_2; }
		
		//typeStart
		public RuleCall getTypeStartTypeStartParserRuleCall_2_0() { return cTypeStartTypeStartParserRuleCall_2_0; }
	}
	public class ProcedureAndFunctionDeclarationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.procedureAndFunctionDeclarationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcedureOrFunctionDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcedureOrFunctionDeclarationProcedureOrFunctionDeclarationParserRuleCall_0_0 = (RuleCall)cProcedureOrFunctionDeclarationAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//procedureAndFunctionDeclarationPart:
		//	procedureOrFunctionDeclaration=procedureOrFunctionDeclaration ";";
		@Override public ParserRule getRule() { return rule; }
		
		//procedureOrFunctionDeclaration=procedureOrFunctionDeclaration ";"
		public Group getGroup() { return cGroup; }
		
		//procedureOrFunctionDeclaration=procedureOrFunctionDeclaration
		public Assignment getProcedureOrFunctionDeclarationAssignment_0() { return cProcedureOrFunctionDeclarationAssignment_0; }
		
		//procedureOrFunctionDeclaration
		public RuleCall getProcedureOrFunctionDeclarationProcedureOrFunctionDeclarationParserRuleCall_0_0() { return cProcedureOrFunctionDeclarationProcedureOrFunctionDeclarationParserRuleCall_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ProcedureOrFunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.procedureOrFunctionDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cProcedureDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cProcedureDeclarationProcedureDeclarationParserRuleCall_0_0 = (RuleCall)cProcedureDeclarationAssignment_0.eContents().get(0);
		private final Assignment cFunctionDeclarationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionDeclarationFunctionDeclarationParserRuleCall_1_0 = (RuleCall)cFunctionDeclarationAssignment_1.eContents().get(0);
		
		//procedureOrFunctionDeclaration:
		//	procedureDeclaration=procedureDeclaration
		//	| functionDeclaration=functionDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//procedureDeclaration=procedureDeclaration | functionDeclaration=functionDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//procedureDeclaration=procedureDeclaration
		public Assignment getProcedureDeclarationAssignment_0() { return cProcedureDeclarationAssignment_0; }
		
		//procedureDeclaration
		public RuleCall getProcedureDeclarationProcedureDeclarationParserRuleCall_0_0() { return cProcedureDeclarationProcedureDeclarationParserRuleCall_0_0; }
		
		//functionDeclaration=functionDeclaration
		public Assignment getFunctionDeclarationAssignment_1() { return cFunctionDeclarationAssignment_1; }
		
		//functionDeclaration
		public RuleCall getFunctionDeclarationFunctionDeclarationParserRuleCall_1_0() { return cFunctionDeclarationFunctionDeclarationParserRuleCall_1_0; }
	}
	public class ProcedureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.procedureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Assignment cFormalParameterListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParameterListFormalParameterListParserRuleCall_2_0 = (RuleCall)cFormalParameterListAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//procedureDeclaration:
		//	"procedure" identifier=identifier formalParameterList=formalParameterList? ";" block=block;
		@Override public ParserRule getRule() { return rule; }
		
		//"procedure" identifier=identifier formalParameterList=formalParameterList? ";" block=block
		public Group getGroup() { return cGroup; }
		
		//"procedure"
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_1_0() { return cIdentifierIdentifierParserRuleCall_1_0; }
		
		//formalParameterList=formalParameterList?
		public Assignment getFormalParameterListAssignment_2() { return cFormalParameterListAssignment_2; }
		
		//formalParameterList
		public RuleCall getFormalParameterListFormalParameterListParserRuleCall_2_0() { return cFormalParameterListFormalParameterListParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//block=block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
	}
	public class FormalParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.formalParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormalParameterSection1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormalParameterSection1FormalParameterSectionParserRuleCall_1_0 = (RuleCall)cFormalParameterSection1Assignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSemiterminalAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cSemiterminalSemicolonKeyword_2_0_0 = (Keyword)cSemiterminalAssignment_2_0.eContents().get(0);
		private final Assignment cFormalParameterSection2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormalParameterSection2FormalParameterSectionParserRuleCall_2_1_0 = (RuleCall)cFormalParameterSection2Assignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//formalParameterList:
		//	"(" formalParameterSection1=formalParameterSection (semiterminal+=";"
		//	formalParameterSection2+=formalParameterSection)* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" formalParameterSection1=formalParameterSection (semiterminal+=";" formalParameterSection2+=formalParameterSection)*
		//")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//formalParameterSection1=formalParameterSection
		public Assignment getFormalParameterSection1Assignment_1() { return cFormalParameterSection1Assignment_1; }
		
		//formalParameterSection
		public RuleCall getFormalParameterSection1FormalParameterSectionParserRuleCall_1_0() { return cFormalParameterSection1FormalParameterSectionParserRuleCall_1_0; }
		
		//(semiterminal+=";" formalParameterSection2+=formalParameterSection)*
		public Group getGroup_2() { return cGroup_2; }
		
		//semiterminal+=";"
		public Assignment getSemiterminalAssignment_2_0() { return cSemiterminalAssignment_2_0; }
		
		//";"
		public Keyword getSemiterminalSemicolonKeyword_2_0_0() { return cSemiterminalSemicolonKeyword_2_0_0; }
		
		//formalParameterSection2+=formalParameterSection
		public Assignment getFormalParameterSection2Assignment_2_1() { return cFormalParameterSection2Assignment_2_1; }
		
		//formalParameterSection
		public RuleCall getFormalParameterSection2FormalParameterSectionParserRuleCall_2_1_0() { return cFormalParameterSection2FormalParameterSectionParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FormalParameterSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.formalParameterSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParameterGroupAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParameterGroupParameterGroupParserRuleCall_0_0 = (RuleCall)cParameterGroupAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVarKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterGroupAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterGroupParameterGroupParserRuleCall_1_1_0 = (RuleCall)cParameterGroupAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFunctionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterGroupAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterGroupParameterGroupParserRuleCall_2_1_0 = (RuleCall)cParameterGroupAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cProcedureKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterGroupAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterGroupParameterGroupParserRuleCall_3_1_0 = (RuleCall)cParameterGroupAssignment_3_1.eContents().get(0);
		
		//formalParameterSection:
		//	parameterGroup=parameterGroup
		//	| "var" parameterGroup=parameterGroup
		//	| "function" parameterGroup=parameterGroup
		//	| "procedure" parameterGroup=parameterGroup;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterGroup=parameterGroup | "var" parameterGroup=parameterGroup | "function" parameterGroup=parameterGroup |
		//"procedure" parameterGroup=parameterGroup
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//parameterGroup=parameterGroup
		public Assignment getParameterGroupAssignment_0() { return cParameterGroupAssignment_0; }
		
		//parameterGroup
		public RuleCall getParameterGroupParameterGroupParserRuleCall_0_0() { return cParameterGroupParameterGroupParserRuleCall_0_0; }
		
		//"var" parameterGroup=parameterGroup
		public Group getGroup_1() { return cGroup_1; }
		
		//"var"
		public Keyword getVarKeyword_1_0() { return cVarKeyword_1_0; }
		
		//parameterGroup=parameterGroup
		public Assignment getParameterGroupAssignment_1_1() { return cParameterGroupAssignment_1_1; }
		
		//parameterGroup
		public RuleCall getParameterGroupParameterGroupParserRuleCall_1_1_0() { return cParameterGroupParameterGroupParserRuleCall_1_1_0; }
		
		//"function" parameterGroup=parameterGroup
		public Group getGroup_2() { return cGroup_2; }
		
		//"function"
		public Keyword getFunctionKeyword_2_0() { return cFunctionKeyword_2_0; }
		
		//parameterGroup=parameterGroup
		public Assignment getParameterGroupAssignment_2_1() { return cParameterGroupAssignment_2_1; }
		
		//parameterGroup
		public RuleCall getParameterGroupParameterGroupParserRuleCall_2_1_0() { return cParameterGroupParameterGroupParserRuleCall_2_1_0; }
		
		//"procedure" parameterGroup=parameterGroup
		public Group getGroup_3() { return cGroup_3; }
		
		//"procedure"
		public Keyword getProcedureKeyword_3_0() { return cProcedureKeyword_3_0; }
		
		//parameterGroup=parameterGroup
		public Assignment getParameterGroupAssignment_3_1() { return cParameterGroupAssignment_3_1; }
		
		//parameterGroup
		public RuleCall getParameterGroupParameterGroupParserRuleCall_3_1_0() { return cParameterGroupParameterGroupParserRuleCall_3_1_0; }
	}
	public class ParameterGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.parameterGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIdentifierTypeIdentifierParserRuleCall_2_0 = (RuleCall)cTypeIdentifierAssignment_2.eContents().get(0);
		
		//parameterGroup:
		//	identifierList=identifierList ":" typeIdentifier=typeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList=identifierList ":" typeIdentifier=typeIdentifier
		public Group getGroup() { return cGroup; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeIdentifier=typeIdentifier
		public Assignment getTypeIdentifierAssignment_2() { return cTypeIdentifierAssignment_2; }
		
		//typeIdentifier
		public RuleCall getTypeIdentifierTypeIdentifierParserRuleCall_2_0() { return cTypeIdentifierTypeIdentifierParserRuleCall_2_0; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.identifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifier1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifier1IdentifierParserRuleCall_0_0 = (RuleCall)cIdentifier1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCommaTerminalAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cCommaTerminalCommaKeyword_1_0_0 = (Keyword)cCommaTerminalAssignment_1_0.eContents().get(0);
		private final Assignment cIdentifier2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifier2IdentifierParserRuleCall_1_1_0 = (RuleCall)cIdentifier2Assignment_1_1.eContents().get(0);
		
		//identifierList:
		//	identifier1=identifier (commaTerminal+="," identifier2+=identifier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier1=identifier (commaTerminal+="," identifier2+=identifier)*
		public Group getGroup() { return cGroup; }
		
		//identifier1=identifier
		public Assignment getIdentifier1Assignment_0() { return cIdentifier1Assignment_0; }
		
		//identifier
		public RuleCall getIdentifier1IdentifierParserRuleCall_0_0() { return cIdentifier1IdentifierParserRuleCall_0_0; }
		
		//(commaTerminal+="," identifier2+=identifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//commaTerminal+=","
		public Assignment getCommaTerminalAssignment_1_0() { return cCommaTerminalAssignment_1_0; }
		
		//","
		public Keyword getCommaTerminalCommaKeyword_1_0_0() { return cCommaTerminalCommaKeyword_1_0_0; }
		
		//identifier2+=identifier
		public Assignment getIdentifier2Assignment_1_1() { return cIdentifier2Assignment_1_1; }
		
		//identifier
		public RuleCall getIdentifier2IdentifierParserRuleCall_1_1_0() { return cIdentifier2IdentifierParserRuleCall_1_1_0; }
	}
	public class ConstListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.constList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstant1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstant1ConstantParserRuleCall_0_0 = (RuleCall)cConstant1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCommaTerminalAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cCommaTerminalCommaKeyword_1_0_0 = (Keyword)cCommaTerminalAssignment_1_0.eContents().get(0);
		private final Assignment cConstant2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstant2ConstantParserRuleCall_1_1_0 = (RuleCall)cConstant2Assignment_1_1.eContents().get(0);
		
		//constList:
		//	constant1=constant (commaTerminal+="," constant2+=constant)*;
		@Override public ParserRule getRule() { return rule; }
		
		//constant1=constant (commaTerminal+="," constant2+=constant)*
		public Group getGroup() { return cGroup; }
		
		//constant1=constant
		public Assignment getConstant1Assignment_0() { return cConstant1Assignment_0; }
		
		//constant
		public RuleCall getConstant1ConstantParserRuleCall_0_0() { return cConstant1ConstantParserRuleCall_0_0; }
		
		//(commaTerminal+="," constant2+=constant)*
		public Group getGroup_1() { return cGroup_1; }
		
		//commaTerminal+=","
		public Assignment getCommaTerminalAssignment_1_0() { return cCommaTerminalAssignment_1_0; }
		
		//","
		public Keyword getCommaTerminalCommaKeyword_1_0_0() { return cCommaTerminalCommaKeyword_1_0_0; }
		
		//constant2+=constant
		public Assignment getConstant2Assignment_1_1() { return cConstant2Assignment_1_1; }
		
		//constant
		public RuleCall getConstant2ConstantParserRuleCall_1_1_0() { return cConstant2ConstantParserRuleCall_1_1_0; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.functionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Assignment cFormalParameterListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParameterListFormalParameterListParserRuleCall_2_0 = (RuleCall)cFormalParameterListAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cResultTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResultTypeResultTypeParserRuleCall_4_0 = (RuleCall)cResultTypeAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlockBlockParserRuleCall_6_0 = (RuleCall)cBlockAssignment_6.eContents().get(0);
		
		//functionDeclaration:
		//	"function" identifier=identifier formalParameterList=formalParameterList? ":" resultType=resultType ";" block=block;
		@Override public ParserRule getRule() { return rule; }
		
		//"function" identifier=identifier formalParameterList=formalParameterList? ":" resultType=resultType ";" block=block
		public Group getGroup() { return cGroup; }
		
		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_1_0() { return cIdentifierIdentifierParserRuleCall_1_0; }
		
		//formalParameterList=formalParameterList?
		public Assignment getFormalParameterListAssignment_2() { return cFormalParameterListAssignment_2; }
		
		//formalParameterList
		public RuleCall getFormalParameterListFormalParameterListParserRuleCall_2_0() { return cFormalParameterListFormalParameterListParserRuleCall_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//resultType=resultType
		public Assignment getResultTypeAssignment_4() { return cResultTypeAssignment_4; }
		
		//resultType
		public RuleCall getResultTypeResultTypeParserRuleCall_4_0() { return cResultTypeResultTypeParserRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//block=block
		public Assignment getBlockAssignment_6() { return cBlockAssignment_6; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_6_0() { return cBlockBlockParserRuleCall_6_0; }
	}
	public class ResultTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.resultType");
		private final Assignment cTypeIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeIdentifierTypeIdentifierParserRuleCall_0 = (RuleCall)cTypeIdentifierAssignment.eContents().get(0);
		
		//resultType:
		//	typeIdentifier=typeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//typeIdentifier=typeIdentifier
		public Assignment getTypeIdentifierAssignment() { return cTypeIdentifierAssignment; }
		
		//typeIdentifier
		public RuleCall getTypeIdentifierTypeIdentifierParserRuleCall_0() { return cTypeIdentifierTypeIdentifierParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLabelStartAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLabelStartLabelStartParserRuleCall_0_0_0 = (RuleCall)cLabelStartAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cUnlabelledStatementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cUnlabelledStatementUnlabelledStatementParserRuleCall_0_2_0 = (RuleCall)cUnlabelledStatementAssignment_0_2.eContents().get(0);
		private final Assignment cUnlabelledStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnlabelledStatementUnlabelledStatementParserRuleCall_1_0 = (RuleCall)cUnlabelledStatementAssignment_1.eContents().get(0);
		
		//statement:
		//	labelStart=labelStart ":" unlabelledStatement=unlabelledStatement
		//	| unlabelledStatement=unlabelledStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//labelStart=labelStart ":" unlabelledStatement=unlabelledStatement | unlabelledStatement=unlabelledStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//labelStart=labelStart ":" unlabelledStatement=unlabelledStatement
		public Group getGroup_0() { return cGroup_0; }
		
		//labelStart=labelStart
		public Assignment getLabelStartAssignment_0_0() { return cLabelStartAssignment_0_0; }
		
		//labelStart
		public RuleCall getLabelStartLabelStartParserRuleCall_0_0_0() { return cLabelStartLabelStartParserRuleCall_0_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//unlabelledStatement=unlabelledStatement
		public Assignment getUnlabelledStatementAssignment_0_2() { return cUnlabelledStatementAssignment_0_2; }
		
		//unlabelledStatement
		public RuleCall getUnlabelledStatementUnlabelledStatementParserRuleCall_0_2_0() { return cUnlabelledStatementUnlabelledStatementParserRuleCall_0_2_0; }
		
		//unlabelledStatement=unlabelledStatement
		public Assignment getUnlabelledStatementAssignment_1() { return cUnlabelledStatementAssignment_1; }
		
		//unlabelledStatement
		public RuleCall getUnlabelledStatementUnlabelledStatementParserRuleCall_1_0() { return cUnlabelledStatementUnlabelledStatementParserRuleCall_1_0; }
	}
	public class UnlabelledStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.unlabelledStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnlabelledStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cSimpleStatementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSimpleStatementSimpleStatementParserRuleCall_0_1_0 = (RuleCall)cSimpleStatementAssignment_0_1.eContents().get(0);
		private final Assignment cStructuredStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStructuredStatementStructuredStatementParserRuleCall_1_0 = (RuleCall)cStructuredStatementAssignment_1.eContents().get(0);
		
		//unlabelledStatement:
		//	{unlabelledStatement} simpleStatement=simpleStatement
		//	| structuredStatement=structuredStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//{unlabelledStatement} simpleStatement=simpleStatement | structuredStatement=structuredStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{unlabelledStatement} simpleStatement=simpleStatement
		public Group getGroup_0() { return cGroup_0; }
		
		//{unlabelledStatement}
		public Action getUnlabelledStatementAction_0_0() { return cUnlabelledStatementAction_0_0; }
		
		//simpleStatement=simpleStatement
		public Assignment getSimpleStatementAssignment_0_1() { return cSimpleStatementAssignment_0_1; }
		
		//simpleStatement
		public RuleCall getSimpleStatementSimpleStatementParserRuleCall_0_1_0() { return cSimpleStatementSimpleStatementParserRuleCall_0_1_0; }
		
		//structuredStatement=structuredStatement
		public Assignment getStructuredStatementAssignment_1() { return cStructuredStatementAssignment_1; }
		
		//structuredStatement
		public RuleCall getStructuredStatementStructuredStatementParserRuleCall_1_0() { return cStructuredStatementStructuredStatementParserRuleCall_1_0; }
	}
	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.simpleStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAssignmentStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentStatementAssignmentStatementParserRuleCall_0_0 = (RuleCall)cAssignmentStatementAssignment_0.eContents().get(0);
		private final Assignment cProcedureStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cProcedureStatementProcedureStatementParserRuleCall_1_0 = (RuleCall)cProcedureStatementAssignment_1.eContents().get(0);
		private final Assignment cGotoStatementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cGotoStatementGotoStatementParserRuleCall_2_0 = (RuleCall)cGotoStatementAssignment_2.eContents().get(0);
		
		//simpleStatement:
		//	assignmentStatement=assignmentStatement
		//	| procedureStatement=procedureStatement
		//	| gotoStatement=gotoStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//assignmentStatement=assignmentStatement | procedureStatement=procedureStatement | gotoStatement=gotoStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//assignmentStatement=assignmentStatement
		public Assignment getAssignmentStatementAssignment_0() { return cAssignmentStatementAssignment_0; }
		
		//assignmentStatement
		public RuleCall getAssignmentStatementAssignmentStatementParserRuleCall_0_0() { return cAssignmentStatementAssignmentStatementParserRuleCall_0_0; }
		
		//procedureStatement=procedureStatement
		public Assignment getProcedureStatementAssignment_1() { return cProcedureStatementAssignment_1; }
		
		//procedureStatement
		public RuleCall getProcedureStatementProcedureStatementParserRuleCall_1_0() { return cProcedureStatementProcedureStatementParserRuleCall_1_0; }
		
		//gotoStatement=gotoStatement
		public Assignment getGotoStatementAssignment_2() { return cGotoStatementAssignment_2; }
		
		//gotoStatement
		public RuleCall getGotoStatementGotoStatementParserRuleCall_2_0() { return cGotoStatementGotoStatementParserRuleCall_2_0; }
	}
	public class AssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.assignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//assignmentStatement:
		//	variable=variable ":=" expression=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=variable ":=" expression=expression
		public Group getGroup() { return cGroup; }
		
		//variable=variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cIdentifier1Assignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cIdentifier1IdentifierParserRuleCall_0_0_1_0 = (RuleCall)cIdentifier1Assignment_0_0_1.eContents().get(0);
		private final Assignment cIdentifier2Assignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifier2IdentifierParserRuleCall_0_1_0 = (RuleCall)cIdentifier2Assignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpressionAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_2_1_0 = (RuleCall)cExpressionAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpressionAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cExpressionAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cFullStopRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cIdentifier3Assignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIdentifier3IdentifierParserRuleCall_1_2_1_0 = (RuleCall)cIdentifier3Assignment_1_2_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		//variable:
		//	("@" identifier1=identifier | identifier2=identifier) ("[" expression+=expression ("," expression+=expression)* "]"
		//	| "(." expression+=expression ("," expression+=expression)* ".)" | "." identifier3+=identifier | "^")*;
		@Override public ParserRule getRule() { return rule; }
		
		//("@" identifier1=identifier | identifier2=identifier) ("[" expression+=expression ("," expression+=expression)* "]" |
		//"(." expression+=expression ("," expression+=expression)* ".)" | "." identifier3+=identifier | "^")*
		public Group getGroup() { return cGroup; }
		
		//"@" identifier1=identifier | identifier2=identifier
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"@" identifier1=identifier
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//"@"
		public Keyword getCommercialAtKeyword_0_0_0() { return cCommercialAtKeyword_0_0_0; }
		
		//identifier1=identifier
		public Assignment getIdentifier1Assignment_0_0_1() { return cIdentifier1Assignment_0_0_1; }
		
		//identifier
		public RuleCall getIdentifier1IdentifierParserRuleCall_0_0_1_0() { return cIdentifier1IdentifierParserRuleCall_0_0_1_0; }
		
		//identifier2=identifier
		public Assignment getIdentifier2Assignment_0_1() { return cIdentifier2Assignment_0_1; }
		
		//identifier
		public RuleCall getIdentifier2IdentifierParserRuleCall_0_1_0() { return cIdentifier2IdentifierParserRuleCall_0_1_0; }
		
		//("[" expression+=expression ("," expression+=expression)* "]" | "(." expression+=expression (","
		//expression+=expression)* ".)" | "." identifier3+=identifier | "^")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"[" expression+=expression ("," expression+=expression)* "]"
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_1_0_1() { return cExpressionAssignment_1_0_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_1_0() { return cExpressionExpressionParserRuleCall_1_0_1_0; }
		
		//("," expression+=expression)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//","
		public Keyword getCommaKeyword_1_0_2_0() { return cCommaKeyword_1_0_2_0; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_1_0_2_1() { return cExpressionAssignment_1_0_2_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_2_1_0() { return cExpressionExpressionParserRuleCall_1_0_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_3() { return cRightSquareBracketKeyword_1_0_3; }
		
		//"(." expression+=expression ("," expression+=expression)* ".)"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"(."
		public Keyword getLeftParenthesisFullStopKeyword_1_1_0() { return cLeftParenthesisFullStopKeyword_1_1_0; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_1_1_1() { return cExpressionAssignment_1_1_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_1_0; }
		
		//("," expression+=expression)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_1_1_2_1() { return cExpressionAssignment_1_1_2_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_2_1_0() { return cExpressionExpressionParserRuleCall_1_1_2_1_0; }
		
		//".)"
		public Keyword getFullStopRightParenthesisKeyword_1_1_3() { return cFullStopRightParenthesisKeyword_1_1_3; }
		
		//"." identifier3+=identifier
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//"."
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }
		
		//identifier3+=identifier
		public Assignment getIdentifier3Assignment_1_2_1() { return cIdentifier3Assignment_1_2_1; }
		
		//identifier
		public RuleCall getIdentifier3IdentifierParserRuleCall_1_2_1_0() { return cIdentifier3IdentifierParserRuleCall_1_2_1_0; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_1_3() { return cCircumflexAccentKeyword_1_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.expression");
		private final Assignment cSimpleExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionSimpleExpressionParserRuleCall_0 = (RuleCall)cSimpleExpressionAssignment.eContents().get(0);
		
		//expression:
		//	simpleExpression=simpleExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleExpression=simpleExpression
		public Assignment getSimpleExpressionAssignment() { return cSimpleExpressionAssignment; }
		
		//simpleExpression
		public RuleCall getSimpleExpressionSimpleExpressionParserRuleCall_0() { return cSimpleExpressionSimpleExpressionParserRuleCall_0; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.simpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermTermParserRuleCall_0_0 = (RuleCall)cTermAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cAdditiveoperatorParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSimpleExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSimpleExpressionSimpleExpressionParserRuleCall_1_1_0 = (RuleCall)cSimpleExpressionAssignment_1_1.eContents().get(0);
		
		//simpleExpression:
		//	term=term (additiveoperator simpleExpression=simpleExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//term=term (additiveoperator simpleExpression=simpleExpression)?
		public Group getGroup() { return cGroup; }
		
		//term=term
		public Assignment getTermAssignment_0() { return cTermAssignment_0; }
		
		//term
		public RuleCall getTermTermParserRuleCall_0_0() { return cTermTermParserRuleCall_0_0; }
		
		//(additiveoperator simpleExpression=simpleExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//additiveoperator
		public RuleCall getAdditiveoperatorParserRuleCall_1_0() { return cAdditiveoperatorParserRuleCall_1_0; }
		
		//simpleExpression=simpleExpression
		public Assignment getSimpleExpressionAssignment_1_1() { return cSimpleExpressionAssignment_1_1; }
		
		//simpleExpression
		public RuleCall getSimpleExpressionSimpleExpressionParserRuleCall_1_1_0() { return cSimpleExpressionSimpleExpressionParserRuleCall_1_1_0; }
	}
	public class AdditiveoperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.additiveoperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOrKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cXorKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//additiveoperator:
		//	"+"
		//	| "-"
		//	| "or"
		//	| "xor";
		@Override public ParserRule getRule() { return rule; }
		
		//"+" | "-" | "or" | "xor"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//"or"
		public Keyword getOrKeyword_2() { return cOrKeyword_2; }
		
		//"xor"
		public Keyword getXorKeyword_3() { return cXorKeyword_3; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignedFactorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignedFactorSignedFactorParserRuleCall_0_0 = (RuleCall)cSignedFactorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cMultiplicativeoperatorParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTermAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_1_0 = (RuleCall)cTermAssignment_1_1.eContents().get(0);
		
		//term:
		//	signedFactor=signedFactor (multiplicativeoperator term=term)?;
		@Override public ParserRule getRule() { return rule; }
		
		//signedFactor=signedFactor (multiplicativeoperator term=term)?
		public Group getGroup() { return cGroup; }
		
		//signedFactor=signedFactor
		public Assignment getSignedFactorAssignment_0() { return cSignedFactorAssignment_0; }
		
		//signedFactor
		public RuleCall getSignedFactorSignedFactorParserRuleCall_0_0() { return cSignedFactorSignedFactorParserRuleCall_0_0; }
		
		//(multiplicativeoperator term=term)?
		public Group getGroup_1() { return cGroup_1; }
		
		//multiplicativeoperator
		public RuleCall getMultiplicativeoperatorParserRuleCall_1_0() { return cMultiplicativeoperatorParserRuleCall_1_0; }
		
		//term=term
		public Assignment getTermAssignment_1_1() { return cTermAssignment_1_1; }
		
		//term
		public RuleCall getTermTermParserRuleCall_1_1_0() { return cTermTermParserRuleCall_1_1_0; }
	}
	public class MultiplicativeoperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.multiplicativeoperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDivKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cModKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAndKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignGreaterThanSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//multiplicativeoperator:
		//	"*"
		//	| "/"
		//	| "div"
		//	| "mod"
		//	| "and"
		//	| "="
		//	| "<>";
		@Override public ParserRule getRule() { return rule; }
		
		//"*" | "/" | "div" | "mod" | "and" | "=" | "<>"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//"div"
		public Keyword getDivKeyword_2() { return cDivKeyword_2; }
		
		//"mod"
		public Keyword getModKeyword_3() { return cModKeyword_3; }
		
		//"and"
		public Keyword getAndKeyword_4() { return cAndKeyword_4; }
		
		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_6() { return cLessThanSignGreaterThanSignKeyword_6; }
	}
	public class SignedFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.signedFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cFactorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFactorFactorParserRuleCall_1_0 = (RuleCall)cFactorAssignment_1.eContents().get(0);
		
		//signedFactor:
		//	("+" | "-")? factor=factor;
		@Override public ParserRule getRule() { return rule; }
		
		//("+" | "-")? factor=factor
		public Group getGroup() { return cGroup; }
		
		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//factor=factor
		public Assignment getFactorAssignment_1() { return cFactorAssignment_1; }
		
		//factor
		public RuleCall getFactorFactorParserRuleCall_1_0() { return cFactorFactorParserRuleCall_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFunctionDesignatorAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionDesignatorFunctionDesignatorParserRuleCall_2_0 = (RuleCall)cFunctionDesignatorAssignment_2.eContents().get(0);
		private final Assignment cUnsignedConstantAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cUnsignedConstantUnsignedConstantParserRuleCall_3_0 = (RuleCall)cUnsignedConstantAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cNotAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cNotNotKeyword_4_0_0 = (Keyword)cNotAssignment_4_0.eContents().get(0);
		private final Assignment cFactorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFactorFactorParserRuleCall_4_1_0 = (RuleCall)cFactorAssignment_4_1.eContents().get(0);
		private final Assignment cBoolAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBoolBoolParserRuleCall_5_0 = (RuleCall)cBoolAssignment_5.eContents().get(0);
		
		//factor:
		//	variable=variable
		//	| "(" expression=expression ")"
		//	| functionDesignator=functionDesignator
		//	| unsignedConstant=unsignedConstant
		//	| not="not" factor=factor
		//	| bool=bool;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=variable | "(" expression=expression ")" | functionDesignator=functionDesignator |
		//unsignedConstant=unsignedConstant | not="not" factor=factor | bool=bool
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variable=variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//"(" expression=expression ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//functionDesignator=functionDesignator
		public Assignment getFunctionDesignatorAssignment_2() { return cFunctionDesignatorAssignment_2; }
		
		//functionDesignator
		public RuleCall getFunctionDesignatorFunctionDesignatorParserRuleCall_2_0() { return cFunctionDesignatorFunctionDesignatorParserRuleCall_2_0; }
		
		//unsignedConstant=unsignedConstant
		public Assignment getUnsignedConstantAssignment_3() { return cUnsignedConstantAssignment_3; }
		
		//unsignedConstant
		public RuleCall getUnsignedConstantUnsignedConstantParserRuleCall_3_0() { return cUnsignedConstantUnsignedConstantParserRuleCall_3_0; }
		
		//not="not" factor=factor
		public Group getGroup_4() { return cGroup_4; }
		
		//not="not"
		public Assignment getNotAssignment_4_0() { return cNotAssignment_4_0; }
		
		//"not"
		public Keyword getNotNotKeyword_4_0_0() { return cNotNotKeyword_4_0_0; }
		
		//factor=factor
		public Assignment getFactorAssignment_4_1() { return cFactorAssignment_4_1; }
		
		//factor
		public RuleCall getFactorFactorParserRuleCall_4_1_0() { return cFactorFactorParserRuleCall_4_1_0; }
		
		//bool=bool
		public Assignment getBoolAssignment_5() { return cBoolAssignment_5; }
		
		//bool
		public RuleCall getBoolBoolParserRuleCall_5_0() { return cBoolBoolParserRuleCall_5_0; }
	}
	public class UnsignedConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.unsignedConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUnsignedNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUnsignedNumberUnsignedNumberParserRuleCall_0_0 = (RuleCall)cUnsignedNumberAssignment_0.eContents().get(0);
		private final Assignment cConstantChrAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantChrConstantChrParserRuleCall_1_0 = (RuleCall)cConstantChrAssignment_1.eContents().get(0);
		private final Assignment cStringStartAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringStartStringStartParserRuleCall_2_0 = (RuleCall)cStringStartAssignment_2.eContents().get(0);
		private final Assignment cNilAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNilNilKeyword_3_0 = (Keyword)cNilAssignment_3.eContents().get(0);
		
		//unsignedConstant:
		//	unsignedNumber=unsignedNumber
		//	| constantChr=constantChr
		//	| StringStart=StringStart
		//	| nil="nil";
		@Override public ParserRule getRule() { return rule; }
		
		//unsignedNumber=unsignedNumber | constantChr=constantChr | StringStart=StringStart | nil="nil"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unsignedNumber=unsignedNumber
		public Assignment getUnsignedNumberAssignment_0() { return cUnsignedNumberAssignment_0; }
		
		//unsignedNumber
		public RuleCall getUnsignedNumberUnsignedNumberParserRuleCall_0_0() { return cUnsignedNumberUnsignedNumberParserRuleCall_0_0; }
		
		//constantChr=constantChr
		public Assignment getConstantChrAssignment_1() { return cConstantChrAssignment_1; }
		
		//constantChr
		public RuleCall getConstantChrConstantChrParserRuleCall_1_0() { return cConstantChrConstantChrParserRuleCall_1_0; }
		
		//StringStart=StringStart
		public Assignment getStringStartAssignment_2() { return cStringStartAssignment_2; }
		
		//StringStart
		public RuleCall getStringStartStringStartParserRuleCall_2_0() { return cStringStartStringStartParserRuleCall_2_0; }
		
		//nil="nil"
		public Assignment getNilAssignment_3() { return cNilAssignment_3; }
		
		//"nil"
		public Keyword getNilNilKeyword_3_0() { return cNilNilKeyword_3_0; }
	}
	public class FunctionDesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.functionDesignator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterListParameterListParserRuleCall_2_0 = (RuleCall)cParameterListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//functionDesignator:
		//	identifier=identifier "(" parameterList=parameterList ")";
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier "(" parameterList=parameterList ")"
		public Group getGroup() { return cGroup; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0() { return cIdentifierIdentifierParserRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_2() { return cParameterListAssignment_2; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_2_0() { return cParameterListParameterListParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.parameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActualParameter1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActualParameter1ActualParameterParserRuleCall_0_0 = (RuleCall)cActualParameter1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActualParameter2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActualParameter2ActualParameterParserRuleCall_1_1_0 = (RuleCall)cActualParameter2Assignment_1_1.eContents().get(0);
		
		//parameterList:
		//	actualParameter1=actualParameter ("," actualParameter2+=actualParameter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//actualParameter1=actualParameter ("," actualParameter2+=actualParameter)*
		public Group getGroup() { return cGroup; }
		
		//actualParameter1=actualParameter
		public Assignment getActualParameter1Assignment_0() { return cActualParameter1Assignment_0; }
		
		//actualParameter
		public RuleCall getActualParameter1ActualParameterParserRuleCall_0_0() { return cActualParameter1ActualParameterParserRuleCall_0_0; }
		
		//("," actualParameter2+=actualParameter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//actualParameter2+=actualParameter
		public Assignment getActualParameter2Assignment_1_1() { return cActualParameter2Assignment_1_1; }
		
		//actualParameter
		public RuleCall getActualParameter2ActualParameterParserRuleCall_1_1_0() { return cActualParameter2ActualParameterParserRuleCall_1_1_0; }
	}
	public class ProcedureStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.procedureStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterListParameterListParserRuleCall_1_1_0 = (RuleCall)cParameterListAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//procedureStatement:
		//	identifier=identifier ("(" parameterList=parameterList ")")?;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier ("(" parameterList=parameterList ")")?
		public Group getGroup() { return cGroup; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0() { return cIdentifierIdentifierParserRuleCall_0_0; }
		
		//("(" parameterList=parameterList ")")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_1_1() { return cParameterListAssignment_1_1; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_1_1_0() { return cParameterListParameterListParserRuleCall_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ActualParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.actualParameter");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//actualParameter:
		//	expression=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class GotoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.gotoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelStartLabelStartParserRuleCall_1_0 = (RuleCall)cLabelStartAssignment_1.eContents().get(0);
		
		//gotoStatement:
		//	"goto" labelStart=labelStart;
		@Override public ParserRule getRule() { return rule; }
		
		//"goto" labelStart=labelStart
		public Group getGroup() { return cGroup; }
		
		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//labelStart=labelStart
		public Assignment getLabelStartAssignment_1() { return cLabelStartAssignment_1; }
		
		//labelStart
		public RuleCall getLabelStartLabelStartParserRuleCall_1_0() { return cLabelStartLabelStartParserRuleCall_1_0; }
	}
	public class StructuredStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.structuredStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCompoundStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundStatementCompoundStatementParserRuleCall_0_0 = (RuleCall)cCompoundStatementAssignment_0.eContents().get(0);
		private final Assignment cRepetetiveStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRepetetiveStatementRepetetiveStatementParserRuleCall_1_0 = (RuleCall)cRepetetiveStatementAssignment_1.eContents().get(0);
		private final Assignment cWithStatementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cWithStatementWithStatementParserRuleCall_2_0 = (RuleCall)cWithStatementAssignment_2.eContents().get(0);
		
		//structuredStatement:
		//	compoundStatement=compoundStatement
		//	| repetetiveStatement=repetetiveStatement
		//	| withStatement=withStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//compoundStatement=compoundStatement | repetetiveStatement=repetetiveStatement | withStatement=withStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//compoundStatement=compoundStatement
		public Assignment getCompoundStatementAssignment_0() { return cCompoundStatementAssignment_0; }
		
		//compoundStatement
		public RuleCall getCompoundStatementCompoundStatementParserRuleCall_0_0() { return cCompoundStatementCompoundStatementParserRuleCall_0_0; }
		
		//repetetiveStatement=repetetiveStatement
		public Assignment getRepetetiveStatementAssignment_1() { return cRepetetiveStatementAssignment_1; }
		
		//repetetiveStatement
		public RuleCall getRepetetiveStatementRepetetiveStatementParserRuleCall_1_0() { return cRepetetiveStatementRepetetiveStatementParserRuleCall_1_0; }
		
		//withStatement=withStatement
		public Assignment getWithStatementAssignment_2() { return cWithStatementAssignment_2; }
		
		//withStatement
		public RuleCall getWithStatementWithStatementParserRuleCall_2_0() { return cWithStatementWithStatementParserRuleCall_2_0; }
	}
	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.compoundStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementsParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//compoundStatement:
		//	"begin" statements=statements "end";
		@Override public ParserRule getRule() { return rule; }
		
		//"begin" statements=statements "end"
		public Group getGroup() { return cGroup; }
		
		//"begin"
		public Keyword getBeginKeyword_0() { return cBeginKeyword_0; }
		
		//statements=statements
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//statements
		public RuleCall getStatementsStatementsParserRuleCall_1_0() { return cStatementsStatementsParserRuleCall_1_0; }
		
		//"end"
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }
	}
	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.statements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatement1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatement1StatementParserRuleCall_0_0 = (RuleCall)cStatement1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSemiTerminal1Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cSemiTerminal1SemicolonKeyword_1_0_0 = (Keyword)cSemiTerminal1Assignment_1_0.eContents().get(0);
		private final Assignment cStatement2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatement2StatementParserRuleCall_1_1_0 = (RuleCall)cStatement2Assignment_1_1.eContents().get(0);
		private final Assignment cSemiTerminal2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cSemiTerminal2SemicolonKeyword_2_0 = (Keyword)cSemiTerminal2Assignment_2.eContents().get(0);
		
		//statements:
		//	statement1+=statement (semiTerminal1+=";" statement2+=statement)* semiTerminal2=";";
		@Override public ParserRule getRule() { return rule; }
		
		//statement1+=statement (semiTerminal1+=";" statement2+=statement)* semiTerminal2=";"
		public Group getGroup() { return cGroup; }
		
		//statement1+=statement
		public Assignment getStatement1Assignment_0() { return cStatement1Assignment_0; }
		
		//statement
		public RuleCall getStatement1StatementParserRuleCall_0_0() { return cStatement1StatementParserRuleCall_0_0; }
		
		//(semiTerminal1+=";" statement2+=statement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//semiTerminal1+=";"
		public Assignment getSemiTerminal1Assignment_1_0() { return cSemiTerminal1Assignment_1_0; }
		
		//";"
		public Keyword getSemiTerminal1SemicolonKeyword_1_0_0() { return cSemiTerminal1SemicolonKeyword_1_0_0; }
		
		//statement2+=statement
		public Assignment getStatement2Assignment_1_1() { return cStatement2Assignment_1_1; }
		
		//statement
		public RuleCall getStatement2StatementParserRuleCall_1_1_0() { return cStatement2StatementParserRuleCall_1_1_0; }
		
		//semiTerminal2=";"
		public Assignment getSemiTerminal2Assignment_2() { return cSemiTerminal2Assignment_2; }
		
		//";"
		public Keyword getSemiTerminal2SemicolonKeyword_2_0() { return cSemiTerminal2SemicolonKeyword_2_0; }
	}
	public class RepetetiveStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.repetetiveStatement");
		private final RuleCall cRepeatStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//repetetiveStatement:
		//	repeatStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//repeatStatement
		public RuleCall getRepeatStatementParserRuleCall() { return cRepeatStatementParserRuleCall; }
	}
	public class RepeatStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.repeatStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementsParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cUntilKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//repeatStatement:
		//	"repeat" statement=statements "until" expression=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//"repeat" statement=statements "until" expression=expression
		public Group getGroup() { return cGroup; }
		
		//"repeat"
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }
		
		//statement=statements
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//statements
		public RuleCall getStatementStatementsParserRuleCall_1_0() { return cStatementStatementsParserRuleCall_1_0; }
		
		//"until"
		public Keyword getUntilKeyword_2() { return cUntilKeyword_2; }
		
		//expression=expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}
	public class WithStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.withStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRecordVariableListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecordVariableListRecordVariableListParserRuleCall_1_0 = (RuleCall)cRecordVariableListAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		
		//withStatement:
		//	"with" recordVariableList=recordVariableList "do" statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//"with" recordVariableList=recordVariableList "do" statement=statement
		public Group getGroup() { return cGroup; }
		
		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//recordVariableList=recordVariableList
		public Assignment getRecordVariableListAssignment_1() { return cRecordVariableListAssignment_1; }
		
		//recordVariableList
		public RuleCall getRecordVariableListRecordVariableListParserRuleCall_1_0() { return cRecordVariableListRecordVariableListParserRuleCall_1_0; }
		
		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//statement=statement
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
	}
	public class RecordVariableListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.recordVariableList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariable1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariable1VariableParserRuleCall_0_0 = (RuleCall)cVariable1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCommaTerminalAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cCommaTerminalCommaKeyword_1_0_0 = (Keyword)cCommaTerminalAssignment_1_0.eContents().get(0);
		private final Assignment cVariable2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariable2VariableParserRuleCall_1_1_0 = (RuleCall)cVariable2Assignment_1_1.eContents().get(0);
		
		//recordVariableList:
		//	variable1=variable (commaTerminal+="," variable2+=variable)*;
		@Override public ParserRule getRule() { return rule; }
		
		//variable1=variable (commaTerminal+="," variable2+=variable)*
		public Group getGroup() { return cGroup; }
		
		//variable1=variable
		public Assignment getVariable1Assignment_0() { return cVariable1Assignment_0; }
		
		//variable
		public RuleCall getVariable1VariableParserRuleCall_0_0() { return cVariable1VariableParserRuleCall_0_0; }
		
		//(commaTerminal+="," variable2+=variable)*
		public Group getGroup_1() { return cGroup_1; }
		
		//commaTerminal+=","
		public Assignment getCommaTerminalAssignment_1_0() { return cCommaTerminalAssignment_1_0; }
		
		//","
		public Keyword getCommaTerminalCommaKeyword_1_0_0() { return cCommaTerminalCommaKeyword_1_0_0; }
		
		//variable2+=variable
		public Assignment getVariable2Assignment_1_1() { return cVariable2Assignment_1_1; }
		
		//variable
		public RuleCall getVariable2VariableParserRuleCall_1_1_0() { return cVariable2VariableParserRuleCall_1_1_0; }
	}
	
	
	private final ToBeginElements pToBegin;
	private final ProgramStartElements pProgramStart;
	private final ProgramHeadingElements pProgramHeading;
	private final IdentifierElements pIdentifier;
	private final BlockElements pBlock;
	private final UsesUnitsPartElements pUsesUnitsPart;
	private final LabelDeclarationPartElements pLabelDeclarationPart;
	private final LabelStartElements pLabelStart;
	private final ConstantDefinitionPartElements pConstantDefinitionPart;
	private final ConstantDefinitionElements pConstantDefinition;
	private final ConstantChrElements pConstantChr;
	private final ConstantElements pConstant;
	private final UnsignedNumberElements pUnsignedNumber;
	private final UnsignedIntegerElements pUnsignedInteger;
	private final UnsignedRealElements pUnsignedReal;
	private final SignElements pSign;
	private final BoolElements pBool;
	private final StringStartElements pStringStart;
	private final TypeDefinitionPartElements pTypeDefinitionPart;
	private final TypeDefinitionElements pTypeDefinition;
	private final FunctionTypeElements pFunctionType;
	private final ProcedureTypeElements pProcedureType;
	private final TypeStartElements pTypeStart;
	private final SimpleTypeElements pSimpleType;
	private final ScalarTypeElements pScalarType;
	private final SubrangeTypeElements pSubrangeType;
	private final TypeIdentifierElements pTypeIdentifier;
	private final StructuredTypeElements pStructuredType;
	private final UnpackedStructuredTypeElements pUnpackedStructuredType;
	private final StringtypeElements pStringtype;
	private final RecordTypeElements pRecordType;
	private final FieldListElements pFieldList;
	private final FixedPartElements pFixedPart;
	private final RecordSectionElements pRecordSection;
	private final VariantPartElements pVariantPart;
	private final TagElements pTag;
	private final VariantElements pVariant;
	private final PointerTypeElements pPointerType;
	private final VariableDeclarationPartElements pVariableDeclarationPart;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ProcedureAndFunctionDeclarationPartElements pProcedureAndFunctionDeclarationPart;
	private final ProcedureOrFunctionDeclarationElements pProcedureOrFunctionDeclaration;
	private final ProcedureDeclarationElements pProcedureDeclaration;
	private final FormalParameterListElements pFormalParameterList;
	private final FormalParameterSectionElements pFormalParameterSection;
	private final ParameterGroupElements pParameterGroup;
	private final IdentifierListElements pIdentifierList;
	private final ConstListElements pConstList;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final ResultTypeElements pResultType;
	private final StatementElements pStatement;
	private final UnlabelledStatementElements pUnlabelledStatement;
	private final SimpleStatementElements pSimpleStatement;
	private final AssignmentStatementElements pAssignmentStatement;
	private final VariableElements pVariable;
	private final ExpressionElements pExpression;
	private final SimpleExpressionElements pSimpleExpression;
	private final AdditiveoperatorElements pAdditiveoperator;
	private final TermElements pTerm;
	private final MultiplicativeoperatorElements pMultiplicativeoperator;
	private final SignedFactorElements pSignedFactor;
	private final FactorElements pFactor;
	private final UnsignedConstantElements pUnsignedConstant;
	private final FunctionDesignatorElements pFunctionDesignator;
	private final ParameterListElements pParameterList;
	private final ProcedureStatementElements pProcedureStatement;
	private final ActualParameterElements pActualParameter;
	private final GotoStatementElements pGotoStatement;
	private final StructuredStatementElements pStructuredStatement;
	private final CompoundStatementElements pCompoundStatement;
	private final StatementsElements pStatements;
	private final RepetetiveStatementElements pRepetetiveStatement;
	private final RepeatStatementElements pRepeatStatement;
	private final WithStatementElements pWithStatement;
	private final RecordVariableListElements pRecordVariableList;
	private final TerminalRule tCOMMENT_1;
	private final TerminalRule tCOMMENT_2;
	private final TerminalRule tIDENT;
	private final TerminalRule tNUM_INT;
	private final TerminalRule tNUM_REAL;
	private final TerminalRule tEXPONENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PascalGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pToBegin = new ToBeginElements();
		this.pProgramStart = new ProgramStartElements();
		this.pProgramHeading = new ProgramHeadingElements();
		this.pIdentifier = new IdentifierElements();
		this.pBlock = new BlockElements();
		this.pUsesUnitsPart = new UsesUnitsPartElements();
		this.pLabelDeclarationPart = new LabelDeclarationPartElements();
		this.pLabelStart = new LabelStartElements();
		this.pConstantDefinitionPart = new ConstantDefinitionPartElements();
		this.pConstantDefinition = new ConstantDefinitionElements();
		this.pConstantChr = new ConstantChrElements();
		this.pConstant = new ConstantElements();
		this.pUnsignedNumber = new UnsignedNumberElements();
		this.pUnsignedInteger = new UnsignedIntegerElements();
		this.pUnsignedReal = new UnsignedRealElements();
		this.pSign = new SignElements();
		this.pBool = new BoolElements();
		this.pStringStart = new StringStartElements();
		this.pTypeDefinitionPart = new TypeDefinitionPartElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pProcedureType = new ProcedureTypeElements();
		this.pTypeStart = new TypeStartElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pScalarType = new ScalarTypeElements();
		this.pSubrangeType = new SubrangeTypeElements();
		this.pTypeIdentifier = new TypeIdentifierElements();
		this.pStructuredType = new StructuredTypeElements();
		this.pUnpackedStructuredType = new UnpackedStructuredTypeElements();
		this.pStringtype = new StringtypeElements();
		this.pRecordType = new RecordTypeElements();
		this.pFieldList = new FieldListElements();
		this.pFixedPart = new FixedPartElements();
		this.pRecordSection = new RecordSectionElements();
		this.pVariantPart = new VariantPartElements();
		this.pTag = new TagElements();
		this.pVariant = new VariantElements();
		this.pPointerType = new PointerTypeElements();
		this.pVariableDeclarationPart = new VariableDeclarationPartElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pProcedureAndFunctionDeclarationPart = new ProcedureAndFunctionDeclarationPartElements();
		this.pProcedureOrFunctionDeclaration = new ProcedureOrFunctionDeclarationElements();
		this.pProcedureDeclaration = new ProcedureDeclarationElements();
		this.pFormalParameterList = new FormalParameterListElements();
		this.pFormalParameterSection = new FormalParameterSectionElements();
		this.pParameterGroup = new ParameterGroupElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pConstList = new ConstListElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pResultType = new ResultTypeElements();
		this.pStatement = new StatementElements();
		this.pUnlabelledStatement = new UnlabelledStatementElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pAssignmentStatement = new AssignmentStatementElements();
		this.pVariable = new VariableElements();
		this.pExpression = new ExpressionElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pAdditiveoperator = new AdditiveoperatorElements();
		this.pTerm = new TermElements();
		this.pMultiplicativeoperator = new MultiplicativeoperatorElements();
		this.pSignedFactor = new SignedFactorElements();
		this.pFactor = new FactorElements();
		this.pUnsignedConstant = new UnsignedConstantElements();
		this.pFunctionDesignator = new FunctionDesignatorElements();
		this.pParameterList = new ParameterListElements();
		this.pProcedureStatement = new ProcedureStatementElements();
		this.pActualParameter = new ActualParameterElements();
		this.pGotoStatement = new GotoStatementElements();
		this.pStructuredStatement = new StructuredStatementElements();
		this.pCompoundStatement = new CompoundStatementElements();
		this.pStatements = new StatementsElements();
		this.pRepetetiveStatement = new RepetetiveStatementElements();
		this.pRepeatStatement = new RepeatStatementElements();
		this.pWithStatement = new WithStatementElements();
		this.pRecordVariableList = new RecordVariableListElements();
		this.tCOMMENT_1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.COMMENT_1");
		this.tCOMMENT_2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.COMMENT_2");
		this.tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.IDENT");
		this.tNUM_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.NUM_INT");
		this.tNUM_REAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.NUM_REAL");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Pascal.EXPONENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Pascal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//toBegin:
	//	elements=programStart?;
	public ToBeginElements getToBeginAccess() {
		return pToBegin;
	}
	
	public ParserRule getToBeginRule() {
		return getToBeginAccess().getRule();
	}
	
	//programStart:
	//	programHeading=programHeading interface="interface"? block=block ".";
	public ProgramStartElements getProgramStartAccess() {
		return pProgramStart;
	}
	
	public ParserRule getProgramStartRule() {
		return getProgramStartAccess().getRule();
	}
	
	//programHeading:
	//	"program" identifier1=identifier ("(" identifierList+=identifierList ")")? ";"
	//	| {programHeading} "unit" identifier2=identifier ";";
	public ProgramHeadingElements getProgramHeadingAccess() {
		return pProgramHeading;
	}
	
	public ParserRule getProgramHeadingRule() {
		return getProgramHeadingAccess().getRule();
	}
	
	//identifier:
	//	identifier=IDENT;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//block:
	//	(labelDeclarationPart+=labelDeclarationPart
	//	| constantDefinitionPart+=constantDefinitionPart
	//	| typeDefinitionPart+=typeDefinitionPart
	//	| variableDeclarationPart+=variableDeclarationPart
	//	| procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart
	//	| usesUnitsPart+=usesUnitsPart
	//	| ImplemeTerminal+="implementation")* compoundStatement=compoundStatement;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//usesUnitsPart:
	//	"uses" identifierList=identifierList ";";
	public UsesUnitsPartElements getUsesUnitsPartAccess() {
		return pUsesUnitsPart;
	}
	
	public ParserRule getUsesUnitsPartRule() {
		return getUsesUnitsPartAccess().getRule();
	}
	
	//labelDeclarationPart:
	//	"label" labelStart1=labelStart (commaTerminal+="," labelStart2+=labelStart)* ";";
	public LabelDeclarationPartElements getLabelDeclarationPartAccess() {
		return pLabelDeclarationPart;
	}
	
	public ParserRule getLabelDeclarationPartRule() {
		return getLabelDeclarationPartAccess().getRule();
	}
	
	//labelStart:
	//	unsignedInteger=unsignedInteger;
	public LabelStartElements getLabelStartAccess() {
		return pLabelStart;
	}
	
	public ParserRule getLabelStartRule() {
		return getLabelStartAccess().getRule();
	}
	
	//constantDefinitionPart:
	//	"const" (constantDefinition+=constantDefinition semiTerminal+=";")+;
	public ConstantDefinitionPartElements getConstantDefinitionPartAccess() {
		return pConstantDefinitionPart;
	}
	
	public ParserRule getConstantDefinitionPartRule() {
		return getConstantDefinitionPartAccess().getRule();
	}
	
	//constantDefinition:
	//	ID=identifier "=" constant=constant;
	public ConstantDefinitionElements getConstantDefinitionAccess() {
		return pConstantDefinition;
	}
	
	public ParserRule getConstantDefinitionRule() {
		return getConstantDefinitionAccess().getRule();
	}
	
	//constantChr:
	//	"chr" "(" unsignedInteger=unsignedInteger ")";
	public ConstantChrElements getConstantChrAccess() {
		return pConstantChr;
	}
	
	public ParserRule getConstantChrRule() {
		return getConstantChrAccess().getRule();
	}
	
	//constant:
	//	unsignedNumber=unsignedNumber
	//	| sign1=sign unsignedNumber=unsignedNumber
	//	| identifier1=identifier
	//	| sign2=sign identifier2=identifier
	//	| string=StringStart
	//	| constantChr=constantChr
	//	| bool;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//unsignedNumber:
	//	unsignedInteger=unsignedInteger
	//	| unsignedReal=unsignedReal;
	public UnsignedNumberElements getUnsignedNumberAccess() {
		return pUnsignedNumber;
	}
	
	public ParserRule getUnsignedNumberRule() {
		return getUnsignedNumberAccess().getRule();
	}
	
	//unsignedInteger:
	//	unsignedInteger=NUM_INT;
	public UnsignedIntegerElements getUnsignedIntegerAccess() {
		return pUnsignedInteger;
	}
	
	public ParserRule getUnsignedIntegerRule() {
		return getUnsignedIntegerAccess().getRule();
	}
	
	//unsignedReal:
	//	unsignedReal=NUM_REAL;
	public UnsignedRealElements getUnsignedRealAccess() {
		return pUnsignedReal;
	}
	
	public ParserRule getUnsignedRealRule() {
		return getUnsignedRealAccess().getRule();
	}
	
	//sign:
	//	sign=("+" | "-");
	public SignElements getSignAccess() {
		return pSign;
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}
	
	//bool:
	//	bool=("true" | "false");
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}
	
	//StringStart:
	//	StringStart=STRING;
	public StringStartElements getStringStartAccess() {
		return pStringStart;
	}
	
	public ParserRule getStringStartRule() {
		return getStringStartAccess().getRule();
	}
	
	//typeDefinitionPart:
	//	"type" (typeDefinition+=typeDefinition semiTerminal+=";")+;
	public TypeDefinitionPartElements getTypeDefinitionPartAccess() {
		return pTypeDefinitionPart;
	}
	
	public ParserRule getTypeDefinitionPartRule() {
		return getTypeDefinitionPartAccess().getRule();
	}
	
	//typeDefinition:
	//	ID1=identifier "=" type=(typeStart | functionType | procedureType);
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//functionType:
	//	"function" formalParameterList=formalParameterList? ":" resultType=resultType;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//procedureType:
	//	{procedureType} "procedure" formalParameterList=formalParameterList?;
	public ProcedureTypeElements getProcedureTypeAccess() {
		return pProcedureType;
	}
	
	public ParserRule getProcedureTypeRule() {
		return getProcedureTypeAccess().getRule();
	}
	
	//typeStart:
	//	typeStart=(simpleType | structuredType | pointerType);
	public TypeStartElements getTypeStartAccess() {
		return pTypeStart;
	}
	
	public ParserRule getTypeStartRule() {
		return getTypeStartAccess().getRule();
	}
	
	//simpleType:
	//	simpleType=(scalarType
	//	| subrangeType
	//	| typeIdentifier
	//	| stringtype);
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}
	
	//scalarType:
	//	"(" identifierList=identifierList ")";
	public ScalarTypeElements getScalarTypeAccess() {
		return pScalarType;
	}
	
	public ParserRule getScalarTypeRule() {
		return getScalarTypeAccess().getRule();
	}
	
	//subrangeType:
	//	constant1=constant ".." constan2=constant;
	public SubrangeTypeElements getSubrangeTypeAccess() {
		return pSubrangeType;
	}
	
	public ParserRule getSubrangeTypeRule() {
		return getSubrangeTypeAccess().getRule();
	}
	
	//typeIdentifier:
	//	identifier=identifier | type=("Char" | "Boolean" | "Integer" | "Real" | "String");
	public TypeIdentifierElements getTypeIdentifierAccess() {
		return pTypeIdentifier;
	}
	
	public ParserRule getTypeIdentifierRule() {
		return getTypeIdentifierAccess().getRule();
	}
	
	//structuredType:
	//	"packed" unpackedStructuredType1=unpackedStructuredType
	//	| unpackedStructuredType2=unpackedStructuredType;
	public StructuredTypeElements getStructuredTypeAccess() {
		return pStructuredType;
	}
	
	public ParserRule getStructuredTypeRule() {
		return getStructuredTypeAccess().getRule();
	}
	
	//unpackedStructuredType:
	//	unpackedStructuredType=recordType;
	public UnpackedStructuredTypeElements getUnpackedStructuredTypeAccess() {
		return pUnpackedStructuredType;
	}
	
	public ParserRule getUnpackedStructuredTypeRule() {
		return getUnpackedStructuredTypeAccess().getRule();
	}
	
	//stringtype:
	//	stringTerminal=STRING "[" (ID=identifier | unsignedNumber=unsignedNumber) "]";
	public StringtypeElements getStringtypeAccess() {
		return pStringtype;
	}
	
	public ParserRule getStringtypeRule() {
		return getStringtypeAccess().getRule();
	}
	
	//recordType:
	//	{recordType} "record" (fieldList=fieldList semiTerminal=";")? "end";
	public RecordTypeElements getRecordTypeAccess() {
		return pRecordType;
	}
	
	public ParserRule getRecordTypeRule() {
		return getRecordTypeAccess().getRule();
	}
	
	//fieldList:
	//	fixedPart=fixedPart (semiTerminal=";" variantPart1=variantPart)?
	//	| variantPart2=variantPart;
	public FieldListElements getFieldListAccess() {
		return pFieldList;
	}
	
	public ParserRule getFieldListRule() {
		return getFieldListAccess().getRule();
	}
	
	//fixedPart:
	//	recordSection (semiTerminal+=";" recordSection+=recordSection)*;
	public FixedPartElements getFixedPartAccess() {
		return pFixedPart;
	}
	
	public ParserRule getFixedPartRule() {
		return getFixedPartAccess().getRule();
	}
	
	//recordSection:
	//	identifierList=identifierList ":" typeStart=typeStart;
	public RecordSectionElements getRecordSectionAccess() {
		return pRecordSection;
	}
	
	public ParserRule getRecordSectionRule() {
		return getRecordSectionAccess().getRule();
	}
	
	//variantPart:
	//	"case" tag=tag "of" variant1=variant (semiTerminal+=";" variant2+=variant)*;
	public VariantPartElements getVariantPartAccess() {
		return pVariantPart;
	}
	
	public ParserRule getVariantPartRule() {
		return getVariantPartAccess().getRule();
	}
	
	//tag:
	//	ID=identifier ":" typeIdentifier1=typeIdentifier
	//	| typeIdentifier2=typeIdentifier;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//variant:
	//	constList=constList ":" "(" fieldList=fieldList ")";
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}
	
	//pointerType:
	//	"^" typeIdentifier=typeIdentifier;
	public PointerTypeElements getPointerTypeAccess() {
		return pPointerType;
	}
	
	public ParserRule getPointerTypeRule() {
		return getPointerTypeAccess().getRule();
	}
	
	//variableDeclarationPart:
	//	"var" variableDeclaration1=variableDeclaration (semiTerminal+=";" variableDeclaration2+=variableDeclaration)* ";";
	public VariableDeclarationPartElements getVariableDeclarationPartAccess() {
		return pVariableDeclarationPart;
	}
	
	public ParserRule getVariableDeclarationPartRule() {
		return getVariableDeclarationPartAccess().getRule();
	}
	
	//variableDeclaration:
	//	identifierList=identifierList ":" typeStart=typeStart;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//procedureAndFunctionDeclarationPart:
	//	procedureOrFunctionDeclaration=procedureOrFunctionDeclaration ";";
	public ProcedureAndFunctionDeclarationPartElements getProcedureAndFunctionDeclarationPartAccess() {
		return pProcedureAndFunctionDeclarationPart;
	}
	
	public ParserRule getProcedureAndFunctionDeclarationPartRule() {
		return getProcedureAndFunctionDeclarationPartAccess().getRule();
	}
	
	//procedureOrFunctionDeclaration:
	//	procedureDeclaration=procedureDeclaration
	//	| functionDeclaration=functionDeclaration;
	public ProcedureOrFunctionDeclarationElements getProcedureOrFunctionDeclarationAccess() {
		return pProcedureOrFunctionDeclaration;
	}
	
	public ParserRule getProcedureOrFunctionDeclarationRule() {
		return getProcedureOrFunctionDeclarationAccess().getRule();
	}
	
	//procedureDeclaration:
	//	"procedure" identifier=identifier formalParameterList=formalParameterList? ";" block=block;
	public ProcedureDeclarationElements getProcedureDeclarationAccess() {
		return pProcedureDeclaration;
	}
	
	public ParserRule getProcedureDeclarationRule() {
		return getProcedureDeclarationAccess().getRule();
	}
	
	//formalParameterList:
	//	"(" formalParameterSection1=formalParameterSection (semiterminal+=";"
	//	formalParameterSection2+=formalParameterSection)* ")";
	public FormalParameterListElements getFormalParameterListAccess() {
		return pFormalParameterList;
	}
	
	public ParserRule getFormalParameterListRule() {
		return getFormalParameterListAccess().getRule();
	}
	
	//formalParameterSection:
	//	parameterGroup=parameterGroup
	//	| "var" parameterGroup=parameterGroup
	//	| "function" parameterGroup=parameterGroup
	//	| "procedure" parameterGroup=parameterGroup;
	public FormalParameterSectionElements getFormalParameterSectionAccess() {
		return pFormalParameterSection;
	}
	
	public ParserRule getFormalParameterSectionRule() {
		return getFormalParameterSectionAccess().getRule();
	}
	
	//parameterGroup:
	//	identifierList=identifierList ":" typeIdentifier=typeIdentifier;
	public ParameterGroupElements getParameterGroupAccess() {
		return pParameterGroup;
	}
	
	public ParserRule getParameterGroupRule() {
		return getParameterGroupAccess().getRule();
	}
	
	//identifierList:
	//	identifier1=identifier (commaTerminal+="," identifier2+=identifier)*;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//constList:
	//	constant1=constant (commaTerminal+="," constant2+=constant)*;
	public ConstListElements getConstListAccess() {
		return pConstList;
	}
	
	public ParserRule getConstListRule() {
		return getConstListAccess().getRule();
	}
	
	//functionDeclaration:
	//	"function" identifier=identifier formalParameterList=formalParameterList? ":" resultType=resultType ";" block=block;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//resultType:
	//	typeIdentifier=typeIdentifier;
	public ResultTypeElements getResultTypeAccess() {
		return pResultType;
	}
	
	public ParserRule getResultTypeRule() {
		return getResultTypeAccess().getRule();
	}
	
	//statement:
	//	labelStart=labelStart ":" unlabelledStatement=unlabelledStatement
	//	| unlabelledStatement=unlabelledStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//unlabelledStatement:
	//	{unlabelledStatement} simpleStatement=simpleStatement
	//	| structuredStatement=structuredStatement;
	public UnlabelledStatementElements getUnlabelledStatementAccess() {
		return pUnlabelledStatement;
	}
	
	public ParserRule getUnlabelledStatementRule() {
		return getUnlabelledStatementAccess().getRule();
	}
	
	//simpleStatement:
	//	assignmentStatement=assignmentStatement
	//	| procedureStatement=procedureStatement
	//	| gotoStatement=gotoStatement;
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}
	
	//assignmentStatement:
	//	variable=variable ":=" expression=expression;
	public AssignmentStatementElements getAssignmentStatementAccess() {
		return pAssignmentStatement;
	}
	
	public ParserRule getAssignmentStatementRule() {
		return getAssignmentStatementAccess().getRule();
	}
	
	//variable:
	//	("@" identifier1=identifier | identifier2=identifier) ("[" expression+=expression ("," expression+=expression)* "]"
	//	| "(." expression+=expression ("," expression+=expression)* ".)" | "." identifier3+=identifier | "^")*;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//expression:
	//	simpleExpression=simpleExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//simpleExpression:
	//	term=term (additiveoperator simpleExpression=simpleExpression)?;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//additiveoperator:
	//	"+"
	//	| "-"
	//	| "or"
	//	| "xor";
	public AdditiveoperatorElements getAdditiveoperatorAccess() {
		return pAdditiveoperator;
	}
	
	public ParserRule getAdditiveoperatorRule() {
		return getAdditiveoperatorAccess().getRule();
	}
	
	//term:
	//	signedFactor=signedFactor (multiplicativeoperator term=term)?;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//multiplicativeoperator:
	//	"*"
	//	| "/"
	//	| "div"
	//	| "mod"
	//	| "and"
	//	| "="
	//	| "<>";
	public MultiplicativeoperatorElements getMultiplicativeoperatorAccess() {
		return pMultiplicativeoperator;
	}
	
	public ParserRule getMultiplicativeoperatorRule() {
		return getMultiplicativeoperatorAccess().getRule();
	}
	
	//signedFactor:
	//	("+" | "-")? factor=factor;
	public SignedFactorElements getSignedFactorAccess() {
		return pSignedFactor;
	}
	
	public ParserRule getSignedFactorRule() {
		return getSignedFactorAccess().getRule();
	}
	
	//factor:
	//	variable=variable
	//	| "(" expression=expression ")"
	//	| functionDesignator=functionDesignator
	//	| unsignedConstant=unsignedConstant
	//	| not="not" factor=factor
	//	| bool=bool;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//unsignedConstant:
	//	unsignedNumber=unsignedNumber
	//	| constantChr=constantChr
	//	| StringStart=StringStart
	//	| nil="nil";
	public UnsignedConstantElements getUnsignedConstantAccess() {
		return pUnsignedConstant;
	}
	
	public ParserRule getUnsignedConstantRule() {
		return getUnsignedConstantAccess().getRule();
	}
	
	//functionDesignator:
	//	identifier=identifier "(" parameterList=parameterList ")";
	public FunctionDesignatorElements getFunctionDesignatorAccess() {
		return pFunctionDesignator;
	}
	
	public ParserRule getFunctionDesignatorRule() {
		return getFunctionDesignatorAccess().getRule();
	}
	
	//parameterList:
	//	actualParameter1=actualParameter ("," actualParameter2+=actualParameter)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//procedureStatement:
	//	identifier=identifier ("(" parameterList=parameterList ")")?;
	public ProcedureStatementElements getProcedureStatementAccess() {
		return pProcedureStatement;
	}
	
	public ParserRule getProcedureStatementRule() {
		return getProcedureStatementAccess().getRule();
	}
	
	//actualParameter:
	//	expression=expression;
	public ActualParameterElements getActualParameterAccess() {
		return pActualParameter;
	}
	
	public ParserRule getActualParameterRule() {
		return getActualParameterAccess().getRule();
	}
	
	//gotoStatement:
	//	"goto" labelStart=labelStart;
	public GotoStatementElements getGotoStatementAccess() {
		return pGotoStatement;
	}
	
	public ParserRule getGotoStatementRule() {
		return getGotoStatementAccess().getRule();
	}
	
	//structuredStatement:
	//	compoundStatement=compoundStatement
	//	| repetetiveStatement=repetetiveStatement
	//	| withStatement=withStatement;
	public StructuredStatementElements getStructuredStatementAccess() {
		return pStructuredStatement;
	}
	
	public ParserRule getStructuredStatementRule() {
		return getStructuredStatementAccess().getRule();
	}
	
	//compoundStatement:
	//	"begin" statements=statements "end";
	public CompoundStatementElements getCompoundStatementAccess() {
		return pCompoundStatement;
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}
	
	//statements:
	//	statement1+=statement (semiTerminal1+=";" statement2+=statement)* semiTerminal2=";";
	public StatementsElements getStatementsAccess() {
		return pStatements;
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}
	
	//repetetiveStatement:
	//	repeatStatement;
	public RepetetiveStatementElements getRepetetiveStatementAccess() {
		return pRepetetiveStatement;
	}
	
	public ParserRule getRepetetiveStatementRule() {
		return getRepetetiveStatementAccess().getRule();
	}
	
	//repeatStatement:
	//	"repeat" statement=statements "until" expression=expression;
	public RepeatStatementElements getRepeatStatementAccess() {
		return pRepeatStatement;
	}
	
	public ParserRule getRepeatStatementRule() {
		return getRepeatStatementAccess().getRule();
	}
	
	//withStatement:
	//	"with" recordVariableList=recordVariableList "do" statement=statement;
	public WithStatementElements getWithStatementAccess() {
		return pWithStatement;
	}
	
	public ParserRule getWithStatementRule() {
		return getWithStatementAccess().getRule();
	}
	
	//recordVariableList:
	//	variable1=variable (commaTerminal+="," variable2+=variable)*;
	public RecordVariableListElements getRecordVariableListAccess() {
		return pRecordVariableList;
	}
	
	public ParserRule getRecordVariableListRule() {
		return getRecordVariableListAccess().getRule();
	}
	
	//terminal COMMENT_1:
	//	'(*'->'*)';
	public TerminalRule getCOMMENT_1Rule() {
		return tCOMMENT_1;
	}
	
	//terminal COMMENT_2:
	//	'{'->'}';
	public TerminalRule getCOMMENT_2Rule() {
		return tCOMMENT_2;
	}
	
	//terminal IDENT:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*;
	public TerminalRule getIDENTRule() {
		return tIDENT;
	}
	
	//terminal NUM_INT:
	//	INT;
	public TerminalRule getNUM_INTRule() {
		return tNUM_INT;
	}
	
	//terminal NUM_REAL:
	//	NUM_INT+ ('.' NUM_INT+ EXPONENT?? | EXPONENT);
	public TerminalRule getNUM_REALRule() {
		return tNUM_REAL;
	}
	
	//terminal fragment EXPONENT:
	//	'e' ('+' | '-')? '0'..'9'+;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
