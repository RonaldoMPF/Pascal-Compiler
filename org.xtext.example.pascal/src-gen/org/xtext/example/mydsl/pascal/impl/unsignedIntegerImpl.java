/**
 * generated by Xtext 2.16.0-SNAPSHOT
 */
package org.xtext.example.mydsl.pascal.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.pascal.PascalPackage;
import org.xtext.example.mydsl.pascal.unsignedInteger;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>unsigned Integer</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.pascal.impl.unsignedIntegerImpl#getUnsignedInteger <em>Unsigned Integer</em>}</li>
 * </ul>
 *
 * @generated
 */
public class unsignedIntegerImpl extends MinimalEObjectImpl.Container implements unsignedInteger
{
  /**
   * The default value of the '{@link #getUnsignedInteger() <em>Unsigned Integer</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnsignedInteger()
   * @generated
   * @ordered
   */
  protected static final String UNSIGNED_INTEGER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUnsignedInteger() <em>Unsigned Integer</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnsignedInteger()
   * @generated
   * @ordered
   */
  protected String unsignedInteger = UNSIGNED_INTEGER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected unsignedIntegerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.UNSIGNED_INTEGER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getUnsignedInteger()
  {
    return unsignedInteger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnsignedInteger(String newUnsignedInteger)
  {
    String oldUnsignedInteger = unsignedInteger;
    unsignedInteger = newUnsignedInteger;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.UNSIGNED_INTEGER__UNSIGNED_INTEGER, oldUnsignedInteger, unsignedInteger));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.UNSIGNED_INTEGER__UNSIGNED_INTEGER:
        return getUnsignedInteger();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.UNSIGNED_INTEGER__UNSIGNED_INTEGER:
        setUnsignedInteger((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.UNSIGNED_INTEGER__UNSIGNED_INTEGER:
        setUnsignedInteger(UNSIGNED_INTEGER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.UNSIGNED_INTEGER__UNSIGNED_INTEGER:
        return UNSIGNED_INTEGER_EDEFAULT == null ? unsignedInteger != null : !UNSIGNED_INTEGER_EDEFAULT.equals(unsignedInteger);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (unsignedInteger: ");
    result.append(unsignedInteger);
    result.append(')');
    return result.toString();
  }

} //unsignedIntegerImpl
