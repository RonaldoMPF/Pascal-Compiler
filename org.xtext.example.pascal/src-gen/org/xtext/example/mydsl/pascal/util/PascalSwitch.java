/**
 * generated by Xtext 2.16.0-SNAPSHOT
 */
package org.xtext.example.mydsl.pascal.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.pascal.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.pascal.PascalPackage
 * @generated
 */
public class PascalSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static PascalPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PascalSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = PascalPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case PascalPackage.TO_BEGIN:
      {
        toBegin toBegin = (toBegin)theEObject;
        T result = casetoBegin(toBegin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.PROGRAM_START:
      {
        programStart programStart = (programStart)theEObject;
        T result = caseprogramStart(programStart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.PROGRAM_HEADING:
      {
        programHeading programHeading = (programHeading)theEObject;
        T result = caseprogramHeading(programHeading);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.IDENTIFIER:
      {
        identifier identifier = (identifier)theEObject;
        T result = caseidentifier(identifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.BLOCK:
      {
        block block = (block)theEObject;
        T result = caseblock(block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.USES_UNITS_PART:
      {
        usesUnitsPart usesUnitsPart = (usesUnitsPart)theEObject;
        T result = caseusesUnitsPart(usesUnitsPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.LABEL_DECLARATION_PART:
      {
        labelDeclarationPart labelDeclarationPart = (labelDeclarationPart)theEObject;
        T result = caselabelDeclarationPart(labelDeclarationPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.LABEL_START:
      {
        labelStart labelStart = (labelStart)theEObject;
        T result = caselabelStart(labelStart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.CONSTANT_DEFINITION_PART:
      {
        constantDefinitionPart constantDefinitionPart = (constantDefinitionPart)theEObject;
        T result = caseconstantDefinitionPart(constantDefinitionPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.CONSTANT_DEFINITION:
      {
        constantDefinition constantDefinition = (constantDefinition)theEObject;
        T result = caseconstantDefinition(constantDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.CONSTANT_CHR:
      {
        constantChr constantChr = (constantChr)theEObject;
        T result = caseconstantChr(constantChr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.CONSTANT:
      {
        constant constant = (constant)theEObject;
        T result = caseconstant(constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.UNSIGNED_NUMBER:
      {
        unsignedNumber unsignedNumber = (unsignedNumber)theEObject;
        T result = caseunsignedNumber(unsignedNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.UNSIGNED_INTEGER:
      {
        unsignedInteger unsignedInteger = (unsignedInteger)theEObject;
        T result = caseunsignedInteger(unsignedInteger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.UNSIGNED_REAL:
      {
        unsignedReal unsignedReal = (unsignedReal)theEObject;
        T result = caseunsignedReal(unsignedReal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.SIGN:
      {
        sign sign = (sign)theEObject;
        T result = casesign(sign);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.BOOL:
      {
        bool bool = (bool)theEObject;
        T result = casebool(bool);
        if (result == null) result = caseconstant(bool);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.STRING_START:
      {
        StringStart stringStart = (StringStart)theEObject;
        T result = caseStringStart(stringStart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.TYPE_DEFINITION_PART:
      {
        typeDefinitionPart typeDefinitionPart = (typeDefinitionPart)theEObject;
        T result = casetypeDefinitionPart(typeDefinitionPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.TYPE_DEFINITION:
      {
        typeDefinition typeDefinition = (typeDefinition)theEObject;
        T result = casetypeDefinition(typeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.FUNCTION_TYPE:
      {
        functionType functionType = (functionType)theEObject;
        T result = casefunctionType(functionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.PROCEDURE_TYPE:
      {
        procedureType procedureType = (procedureType)theEObject;
        T result = caseprocedureType(procedureType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.TYPE_START:
      {
        typeStart typeStart = (typeStart)theEObject;
        T result = casetypeStart(typeStart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.SIMPLE_TYPE:
      {
        simpleType simpleType = (simpleType)theEObject;
        T result = casesimpleType(simpleType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.SCALAR_TYPE:
      {
        scalarType scalarType = (scalarType)theEObject;
        T result = casescalarType(scalarType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.SUBRANGE_TYPE:
      {
        subrangeType subrangeType = (subrangeType)theEObject;
        T result = casesubrangeType(subrangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.TYPE_IDENTIFIER:
      {
        typeIdentifier typeIdentifier = (typeIdentifier)theEObject;
        T result = casetypeIdentifier(typeIdentifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.STRUCTURED_TYPE:
      {
        structuredType structuredType = (structuredType)theEObject;
        T result = casestructuredType(structuredType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.UNPACKED_STRUCTURED_TYPE:
      {
        unpackedStructuredType unpackedStructuredType = (unpackedStructuredType)theEObject;
        T result = caseunpackedStructuredType(unpackedStructuredType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.STRINGTYPE:
      {
        stringtype stringtype = (stringtype)theEObject;
        T result = casestringtype(stringtype);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.RECORD_TYPE:
      {
        recordType recordType = (recordType)theEObject;
        T result = caserecordType(recordType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.FIELD_LIST:
      {
        fieldList fieldList = (fieldList)theEObject;
        T result = casefieldList(fieldList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.FIXED_PART:
      {
        fixedPart fixedPart = (fixedPart)theEObject;
        T result = casefixedPart(fixedPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.RECORD_SECTION:
      {
        recordSection recordSection = (recordSection)theEObject;
        T result = caserecordSection(recordSection);
        if (result == null) result = casefixedPart(recordSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.VARIANT_PART:
      {
        variantPart variantPart = (variantPart)theEObject;
        T result = casevariantPart(variantPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.TAG:
      {
        tag tag = (tag)theEObject;
        T result = casetag(tag);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.VARIANT:
      {
        variant variant = (variant)theEObject;
        T result = casevariant(variant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.POINTER_TYPE:
      {
        pointerType pointerType = (pointerType)theEObject;
        T result = casepointerType(pointerType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.VARIABLE_DECLARATION_PART:
      {
        variableDeclarationPart variableDeclarationPart = (variableDeclarationPart)theEObject;
        T result = casevariableDeclarationPart(variableDeclarationPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.VARIABLE_DECLARATION:
      {
        variableDeclaration variableDeclaration = (variableDeclaration)theEObject;
        T result = casevariableDeclaration(variableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.PROCEDURE_AND_FUNCTION_DECLARATION_PART:
      {
        procedureAndFunctionDeclarationPart procedureAndFunctionDeclarationPart = (procedureAndFunctionDeclarationPart)theEObject;
        T result = caseprocedureAndFunctionDeclarationPart(procedureAndFunctionDeclarationPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION:
      {
        procedureOrFunctionDeclaration procedureOrFunctionDeclaration = (procedureOrFunctionDeclaration)theEObject;
        T result = caseprocedureOrFunctionDeclaration(procedureOrFunctionDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.PROCEDURE_DECLARATION:
      {
        procedureDeclaration procedureDeclaration = (procedureDeclaration)theEObject;
        T result = caseprocedureDeclaration(procedureDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.FORMAL_PARAMETER_LIST:
      {
        formalParameterList formalParameterList = (formalParameterList)theEObject;
        T result = caseformalParameterList(formalParameterList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.FORMAL_PARAMETER_SECTION:
      {
        formalParameterSection formalParameterSection = (formalParameterSection)theEObject;
        T result = caseformalParameterSection(formalParameterSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.PARAMETER_GROUP:
      {
        parameterGroup parameterGroup = (parameterGroup)theEObject;
        T result = caseparameterGroup(parameterGroup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.IDENTIFIER_LIST:
      {
        identifierList identifierList = (identifierList)theEObject;
        T result = caseidentifierList(identifierList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.CONST_LIST:
      {
        constList constList = (constList)theEObject;
        T result = caseconstList(constList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.FUNCTION_DECLARATION:
      {
        functionDeclaration functionDeclaration = (functionDeclaration)theEObject;
        T result = casefunctionDeclaration(functionDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.RESULT_TYPE:
      {
        resultType resultType = (resultType)theEObject;
        T result = caseresultType(resultType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.STATEMENT:
      {
        statement statement = (statement)theEObject;
        T result = casestatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.UNLABELLED_STATEMENT:
      {
        unlabelledStatement unlabelledStatement = (unlabelledStatement)theEObject;
        T result = caseunlabelledStatement(unlabelledStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.SIMPLE_STATEMENT:
      {
        simpleStatement simpleStatement = (simpleStatement)theEObject;
        T result = casesimpleStatement(simpleStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.ASSIGNMENT_STATEMENT:
      {
        assignmentStatement assignmentStatement = (assignmentStatement)theEObject;
        T result = caseassignmentStatement(assignmentStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.VARIABLE:
      {
        variable variable = (variable)theEObject;
        T result = casevariable(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.EXPRESSION:
      {
        expression expression = (expression)theEObject;
        T result = caseexpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.SIMPLE_EXPRESSION:
      {
        simpleExpression simpleExpression = (simpleExpression)theEObject;
        T result = casesimpleExpression(simpleExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.TERM:
      {
        term term = (term)theEObject;
        T result = caseterm(term);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.SIGNED_FACTOR:
      {
        signedFactor signedFactor = (signedFactor)theEObject;
        T result = casesignedFactor(signedFactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.FACTOR:
      {
        factor factor = (factor)theEObject;
        T result = casefactor(factor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.UNSIGNED_CONSTANT:
      {
        unsignedConstant unsignedConstant = (unsignedConstant)theEObject;
        T result = caseunsignedConstant(unsignedConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.FUNCTION_DESIGNATOR:
      {
        functionDesignator functionDesignator = (functionDesignator)theEObject;
        T result = casefunctionDesignator(functionDesignator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.PARAMETER_LIST:
      {
        parameterList parameterList = (parameterList)theEObject;
        T result = caseparameterList(parameterList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.PROCEDURE_STATEMENT:
      {
        procedureStatement procedureStatement = (procedureStatement)theEObject;
        T result = caseprocedureStatement(procedureStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.ACTUAL_PARAMETER:
      {
        actualParameter actualParameter = (actualParameter)theEObject;
        T result = caseactualParameter(actualParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.GOTO_STATEMENT:
      {
        gotoStatement gotoStatement = (gotoStatement)theEObject;
        T result = casegotoStatement(gotoStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.STRUCTURED_STATEMENT:
      {
        structuredStatement structuredStatement = (structuredStatement)theEObject;
        T result = casestructuredStatement(structuredStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.COMPOUND_STATEMENT:
      {
        compoundStatement compoundStatement = (compoundStatement)theEObject;
        T result = casecompoundStatement(compoundStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.STATEMENTS:
      {
        statements statements = (statements)theEObject;
        T result = casestatements(statements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.REPETETIVE_STATEMENT:
      {
        repetetiveStatement repetetiveStatement = (repetetiveStatement)theEObject;
        T result = caserepetetiveStatement(repetetiveStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.REPEAT_STATEMENT:
      {
        repeatStatement repeatStatement = (repeatStatement)theEObject;
        T result = caserepeatStatement(repeatStatement);
        if (result == null) result = caserepetetiveStatement(repeatStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.WITH_STATEMENT:
      {
        withStatement withStatement = (withStatement)theEObject;
        T result = casewithStatement(withStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PascalPackage.RECORD_VARIABLE_LIST:
      {
        recordVariableList recordVariableList = (recordVariableList)theEObject;
        T result = caserecordVariableList(recordVariableList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>to Begin</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>to Begin</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetoBegin(toBegin object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>program Start</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>program Start</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprogramStart(programStart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>program Heading</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>program Heading</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprogramHeading(programHeading object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseidentifier(identifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseblock(block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>uses Units Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>uses Units Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseusesUnitsPart(usesUnitsPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>label Declaration Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>label Declaration Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselabelDeclarationPart(labelDeclarationPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>label Start</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>label Start</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselabelStart(labelStart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>constant Definition Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>constant Definition Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstantDefinitionPart(constantDefinitionPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>constant Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>constant Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstantDefinition(constantDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>constant Chr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>constant Chr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstantChr(constantChr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstant(constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>unsigned Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>unsigned Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseunsignedNumber(unsignedNumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>unsigned Integer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>unsigned Integer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseunsignedInteger(unsignedInteger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>unsigned Real</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>unsigned Real</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseunsignedReal(unsignedReal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>sign</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>sign</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesign(sign object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>bool</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>bool</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebool(bool object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Start</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Start</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringStart(StringStart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type Definition Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type Definition Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetypeDefinitionPart(typeDefinitionPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetypeDefinition(typeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>function Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>function Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefunctionType(functionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>procedure Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>procedure Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprocedureType(procedureType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type Start</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type Start</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetypeStart(typeStart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>simple Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>simple Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesimpleType(simpleType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>scalar Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>scalar Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casescalarType(scalarType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>subrange Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>subrange Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesubrangeType(subrangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetypeIdentifier(typeIdentifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>structured Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>structured Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestructuredType(structuredType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>unpacked Structured Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>unpacked Structured Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseunpackedStructuredType(unpackedStructuredType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>stringtype</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>stringtype</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestringtype(stringtype object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>record Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>record Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserecordType(recordType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>field List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>field List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefieldList(fieldList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>fixed Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>fixed Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefixedPart(fixedPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>record Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>record Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserecordSection(recordSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variant Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variant Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariantPart(variantPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tag</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tag</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetag(tag object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariant(variant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>pointer Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>pointer Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepointerType(pointerType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variable Declaration Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variable Declaration Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariableDeclarationPart(variableDeclarationPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariableDeclaration(variableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>procedure And Function Declaration Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>procedure And Function Declaration Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprocedureAndFunctionDeclarationPart(procedureAndFunctionDeclarationPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>procedure Or Function Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>procedure Or Function Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprocedureOrFunctionDeclaration(procedureOrFunctionDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>procedure Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>procedure Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprocedureDeclaration(procedureDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>formal Parameter List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>formal Parameter List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseformalParameterList(formalParameterList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>formal Parameter Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>formal Parameter Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseformalParameterSection(formalParameterSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameterGroup(parameterGroup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>identifier List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>identifier List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseidentifierList(identifierList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>const List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>const List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstList(constList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>function Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>function Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefunctionDeclaration(functionDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>result Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>result Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseresultType(resultType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatement(statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>unlabelled Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>unlabelled Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseunlabelledStatement(unlabelledStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>simple Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>simple Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesimpleStatement(simpleStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>assignment Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>assignment Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseassignmentStatement(assignmentStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariable(variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpression(expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>simple Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>simple Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesimpleExpression(simpleExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseterm(term object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>signed Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>signed Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesignedFactor(signedFactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefactor(factor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>unsigned Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>unsigned Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseunsignedConstant(unsignedConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>function Designator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>function Designator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefunctionDesignator(functionDesignator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameterList(parameterList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>procedure Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>procedure Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprocedureStatement(procedureStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>actual Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>actual Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseactualParameter(actualParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>goto Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>goto Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casegotoStatement(gotoStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>structured Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>structured Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestructuredStatement(structuredStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>compound Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>compound Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecompoundStatement(compoundStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatements(statements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>repetetive Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>repetetive Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserepetetiveStatement(repetetiveStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>repeat Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>repeat Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserepeatStatement(repeatStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>with Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>with Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casewithStatement(withStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>record Variable List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>record Variable List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserecordVariableList(recordVariableList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //PascalSwitch
