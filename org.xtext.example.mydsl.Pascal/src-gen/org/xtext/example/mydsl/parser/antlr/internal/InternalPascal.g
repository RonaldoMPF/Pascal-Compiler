/*
 * generated by Xtext 2.15.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.PascalGrammarAccess;

}

@parser::members {

 	private PascalGrammarAccess grammarAccess;

    public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "toBegin";
   	}

   	@Override
   	protected PascalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuletoBegin
entryRuletoBegin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getToBeginRule()); }
	iv_ruletoBegin=ruletoBegin
	{ $current=$iv_ruletoBegin.current; }
	EOF;

// Rule toBegin
ruletoBegin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getToBeginAccess().getElementsProgramStartParserRuleCall_0());
			}
			lv_elements_0_0=ruleprogramStart
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getToBeginRule());
				}
				set(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.mydsl.Pascal.programStart");
				afterParserOrEnumRuleCall();
			}
		)
	)?
;

// Entry rule entryRuleprogramStart
entryRuleprogramStart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramStartRule()); }
	iv_ruleprogramStart=ruleprogramStart
	{ $current=$iv_ruleprogramStart.current; }
	EOF;

// Rule programStart
ruleprogramStart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramStartAccess().getProgramHeadingProgramHeadingParserRuleCall_0_0());
				}
				lv_programHeading_0_0=ruleprogramHeading
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramStartRule());
					}
					set(
						$current,
						"programHeading",
						lv_programHeading_0_0,
						"org.xtext.example.mydsl.Pascal.programHeading");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_interface_1_0='interface'
				{
					newLeafNode(lv_interface_1_0, grammarAccess.getProgramStartAccess().getInterfaceInterfaceKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramStartRule());
					}
					setWithLastConsumed($current, "interface", lv_interface_1_0, "interface");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramStartAccess().getBlockBlockParserRuleCall_2_0());
				}
				lv_block_2_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramStartRule());
					}
					set(
						$current,
						"block",
						lv_block_2_0,
						"org.xtext.example.mydsl.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getProgramStartAccess().getFullStopKeyword_3());
		}
	)
;

// Entry rule entryRuleprogramHeading
entryRuleprogramHeading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramHeadingRule()); }
	iv_ruleprogramHeading=ruleprogramHeading
	{ $current=$iv_ruleprogramHeading.current; }
	EOF;

// Rule programHeading
ruleprogramHeading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='program'
			{
				newLeafNode(otherlv_0, grammarAccess.getProgramHeadingAccess().getProgramKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramHeadingAccess().getIdentifier1IdentifierParserRuleCall_0_1_0());
					}
					lv_identifier1_1_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramHeadingRule());
						}
						set(
							$current,
							"identifier1",
							lv_identifier1_1_0,
							"org.xtext.example.mydsl.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getProgramHeadingAccess().getLeftParenthesisKeyword_0_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getProgramHeadingAccess().getIdentifierListIdentifierListParserRuleCall_0_2_1_0());
						}
						lv_identifierList_3_0=ruleidentifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProgramHeadingRule());
							}
							add(
								$current,
								"identifierList",
								lv_identifierList_3_0,
								"org.xtext.example.mydsl.Pascal.identifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getProgramHeadingAccess().getRightParenthesisKeyword_0_2_2());
				}
			)?
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getProgramHeadingAccess().getSemicolonKeyword_0_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getProgramHeadingAccess().getProgramHeadingAction_1_0(),
						$current);
				}
			)
			otherlv_7='unit'
			{
				newLeafNode(otherlv_7, grammarAccess.getProgramHeadingAccess().getUnitKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramHeadingAccess().getIdentifier2IdentifierParserRuleCall_1_2_0());
					}
					lv_identifier2_8_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramHeadingRule());
						}
						set(
							$current,
							"identifier2",
							lv_identifier2_8_0,
							"org.xtext.example.mydsl.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getProgramHeadingAccess().getSemicolonKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleidentifier
entryRuleidentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleidentifier=ruleidentifier
	{ $current=$iv_ruleidentifier.current; }
	EOF;

// Rule identifier
ruleidentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_IDENT
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getIdentifierAccess().getIdentifierIDENTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIdentifierRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.xtext.example.mydsl.Pascal.IDENT");
			}
		)
	)
;

// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current; }
	EOF;

// Rule block
ruleblock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getLabelDeclarationPartLabelDeclarationPartParserRuleCall_0_0_0());
					}
					lv_labelDeclarationPart_0_0=rulelabelDeclarationPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"labelDeclarationPart",
							lv_labelDeclarationPart_0_0,
							"org.xtext.example.mydsl.Pascal.labelDeclarationPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getConstantDefinitionPartConstantDefinitionPartParserRuleCall_0_1_0());
					}
					lv_constantDefinitionPart_1_0=ruleconstantDefinitionPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"constantDefinitionPart",
							lv_constantDefinitionPart_1_0,
							"org.xtext.example.mydsl.Pascal.constantDefinitionPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getTypeDefinitionPartTypeDefinitionPartParserRuleCall_0_2_0());
					}
					lv_typeDefinitionPart_2_0=ruletypeDefinitionPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"typeDefinitionPart",
							lv_typeDefinitionPart_2_0,
							"org.xtext.example.mydsl.Pascal.typeDefinitionPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getVariableDeclarationPartVariableDeclarationPartParserRuleCall_0_3_0());
					}
					lv_variableDeclarationPart_3_0=rulevariableDeclarationPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"variableDeclarationPart",
							lv_variableDeclarationPart_3_0,
							"org.xtext.example.mydsl.Pascal.variableDeclarationPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getProcedureAndFunctionDeclarationPartProcedureAndFunctionDeclarationPartParserRuleCall_0_4_0());
					}
					lv_procedureAndFunctionDeclarationPart_4_0=ruleprocedureAndFunctionDeclarationPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"procedureAndFunctionDeclarationPart",
							lv_procedureAndFunctionDeclarationPart_4_0,
							"org.xtext.example.mydsl.Pascal.procedureAndFunctionDeclarationPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getUsesUnitsPartUsesUnitsPartParserRuleCall_0_5_0());
					}
					lv_usesUnitsPart_5_0=ruleusesUnitsPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"usesUnitsPart",
							lv_usesUnitsPart_5_0,
							"org.xtext.example.mydsl.Pascal.usesUnitsPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_ImplemeTerminal_6_0='implementation'
					{
						newLeafNode(lv_ImplemeTerminal_6_0, grammarAccess.getBlockAccess().getImplemeTerminalImplementationKeyword_0_6_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlockRule());
						}
						addWithLastConsumed($current, "ImplemeTerminal", lv_ImplemeTerminal_6_0, "implementation");
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getCompoundStatementCompoundStatementParserRuleCall_1_0());
				}
				lv_compoundStatement_7_0=rulecompoundStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"compoundStatement",
						lv_compoundStatement_7_0,
						"org.xtext.example.mydsl.Pascal.compoundStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleusesUnitsPart
entryRuleusesUnitsPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUsesUnitsPartRule()); }
	iv_ruleusesUnitsPart=ruleusesUnitsPart
	{ $current=$iv_ruleusesUnitsPart.current; }
	EOF;

// Rule usesUnitsPart
ruleusesUnitsPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='uses'
		{
			newLeafNode(otherlv_0, grammarAccess.getUsesUnitsPartAccess().getUsesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUsesUnitsPartAccess().getIdentifierListIdentifierListParserRuleCall_1_0());
				}
				lv_identifierList_1_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUsesUnitsPartRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_1_0,
						"org.xtext.example.mydsl.Pascal.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getUsesUnitsPartAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRulelabelDeclarationPart
entryRulelabelDeclarationPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelDeclarationPartRule()); }
	iv_rulelabelDeclarationPart=rulelabelDeclarationPart
	{ $current=$iv_rulelabelDeclarationPart.current; }
	EOF;

// Rule labelDeclarationPart
rulelabelDeclarationPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='label'
		{
			newLeafNode(otherlv_0, grammarAccess.getLabelDeclarationPartAccess().getLabelKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLabelDeclarationPartAccess().getLabelStart1LabelStartParserRuleCall_1_0());
				}
				lv_labelStart1_1_0=rulelabelStart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabelDeclarationPartRule());
					}
					set(
						$current,
						"labelStart1",
						lv_labelStart1_1_0,
						"org.xtext.example.mydsl.Pascal.labelStart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_commaTerminal_2_0=','
					{
						newLeafNode(lv_commaTerminal_2_0, grammarAccess.getLabelDeclarationPartAccess().getCommaTerminalCommaKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLabelDeclarationPartRule());
						}
						addWithLastConsumed($current, "commaTerminal", lv_commaTerminal_2_0, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLabelDeclarationPartAccess().getLabelStart2LabelStartParserRuleCall_2_1_0());
					}
					lv_labelStart2_3_0=rulelabelStart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLabelDeclarationPartRule());
						}
						add(
							$current,
							"labelStart2",
							lv_labelStart2_3_0,
							"org.xtext.example.mydsl.Pascal.labelStart");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getLabelDeclarationPartAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulelabelStart
entryRulelabelStart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelStartRule()); }
	iv_rulelabelStart=rulelabelStart
	{ $current=$iv_rulelabelStart.current; }
	EOF;

// Rule labelStart
rulelabelStart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLabelStartAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_0());
			}
			lv_unsignedInteger_0_0=ruleunsignedInteger
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLabelStartRule());
				}
				set(
					$current,
					"unsignedInteger",
					lv_unsignedInteger_0_0,
					"org.xtext.example.mydsl.Pascal.unsignedInteger");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleconstantDefinitionPart
entryRuleconstantDefinitionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantDefinitionPartRule()); }
	iv_ruleconstantDefinitionPart=ruleconstantDefinitionPart
	{ $current=$iv_ruleconstantDefinitionPart.current; }
	EOF;

// Rule constantDefinitionPart
ruleconstantDefinitionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstantDefinitionPartAccess().getConstKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantDefinitionPartAccess().getConstantDefinitionConstantDefinitionParserRuleCall_1_0_0());
					}
					lv_constantDefinition_1_0=ruleconstantDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantDefinitionPartRule());
						}
						add(
							$current,
							"constantDefinition",
							lv_constantDefinition_1_0,
							"org.xtext.example.mydsl.Pascal.constantDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_semiTerminal_2_0=';'
					{
						newLeafNode(lv_semiTerminal_2_0, grammarAccess.getConstantDefinitionPartAccess().getSemiTerminalSemicolonKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantDefinitionPartRule());
						}
						addWithLastConsumed($current, "semiTerminal", lv_semiTerminal_2_0, ";");
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleconstantDefinition
entryRuleconstantDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantDefinitionRule()); }
	iv_ruleconstantDefinition=ruleconstantDefinition
	{ $current=$iv_ruleconstantDefinition.current; }
	EOF;

// Rule constantDefinition
ruleconstantDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantDefinitionAccess().getIDIdentifierParserRuleCall_0_0());
				}
				lv_ID_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
					}
					set(
						$current,
						"ID",
						lv_ID_0_0,
						"org.xtext.example.mydsl.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getConstantDefinitionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantDefinitionAccess().getConstantConstantParserRuleCall_2_0());
				}
				lv_constant_2_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
					}
					set(
						$current,
						"constant",
						lv_constant_2_0,
						"org.xtext.example.mydsl.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleconstantChr
entryRuleconstantChr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantChrRule()); }
	iv_ruleconstantChr=ruleconstantChr
	{ $current=$iv_ruleconstantChr.current; }
	EOF;

// Rule constantChr
ruleconstantChr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='chr'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstantChrAccess().getChrKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConstantChrAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantChrAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_2_0());
				}
				lv_unsignedInteger_2_0=ruleunsignedInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantChrRule());
					}
					set(
						$current,
						"unsignedInteger",
						lv_unsignedInteger_2_0,
						"org.xtext.example.mydsl.Pascal.unsignedInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getConstantChrAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleconstant
entryRuleconstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleconstant=ruleconstant
	{ $current=$iv_ruleconstant.current; }
	EOF;

// Rule constant
ruleconstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getUnsignedNumberUnsignedNumberParserRuleCall_0_0());
				}
				lv_unsignedNumber_0_0=ruleunsignedNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"unsignedNumber",
						lv_unsignedNumber_0_0,
						"org.xtext.example.mydsl.Pascal.unsignedNumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantAccess().getSign1SignParserRuleCall_1_0_0());
					}
					lv_sign1_1_0=rulesign
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantRule());
						}
						set(
							$current,
							"sign1",
							lv_sign1_1_0,
							"org.xtext.example.mydsl.Pascal.sign");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantAccess().getUnsignedNumberUnsignedNumberParserRuleCall_1_1_0());
					}
					lv_unsignedNumber_2_0=ruleunsignedNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantRule());
						}
						set(
							$current,
							"unsignedNumber",
							lv_unsignedNumber_2_0,
							"org.xtext.example.mydsl.Pascal.unsignedNumber");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getIdentifier1IdentifierParserRuleCall_2_0());
				}
				lv_identifier1_3_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"identifier1",
						lv_identifier1_3_0,
						"org.xtext.example.mydsl.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantAccess().getSign2SignParserRuleCall_3_0_0());
					}
					lv_sign2_4_0=rulesign
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantRule());
						}
						set(
							$current,
							"sign2",
							lv_sign2_4_0,
							"org.xtext.example.mydsl.Pascal.sign");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantAccess().getIdentifier2IdentifierParserRuleCall_3_1_0());
					}
					lv_identifier2_5_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantRule());
						}
						set(
							$current,
							"identifier2",
							lv_identifier2_5_0,
							"org.xtext.example.mydsl.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getStringStringStartParserRuleCall_4_0());
				}
				lv_string_6_0=ruleStringStart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"string",
						lv_string_6_0,
						"org.xtext.example.mydsl.Pascal.StringStart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getConstantChrConstantChrParserRuleCall_5_0());
				}
				lv_constantChr_7_0=ruleconstantChr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"constantChr",
						lv_constantChr_7_0,
						"org.xtext.example.mydsl.Pascal.constantChr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getBoolParserRuleCall_6());
		}
		this_bool_8=rulebool
		{
			$current = $this_bool_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleunsignedNumber
entryRuleunsignedNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnsignedNumberRule()); }
	iv_ruleunsignedNumber=ruleunsignedNumber
	{ $current=$iv_ruleunsignedNumber.current; }
	EOF;

// Rule unsignedNumber
ruleunsignedNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsignedNumberAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_0_0());
				}
				lv_unsignedInteger_0_0=ruleunsignedInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsignedNumberRule());
					}
					set(
						$current,
						"unsignedInteger",
						lv_unsignedInteger_0_0,
						"org.xtext.example.mydsl.Pascal.unsignedInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsignedNumberAccess().getUnsignedRealUnsignedRealParserRuleCall_1_0());
				}
				lv_unsignedReal_1_0=ruleunsignedReal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsignedNumberRule());
					}
					set(
						$current,
						"unsignedReal",
						lv_unsignedReal_1_0,
						"org.xtext.example.mydsl.Pascal.unsignedReal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunsignedInteger
entryRuleunsignedInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnsignedIntegerRule()); }
	iv_ruleunsignedInteger=ruleunsignedInteger
	{ $current=$iv_ruleunsignedInteger.current; }
	EOF;

// Rule unsignedInteger
ruleunsignedInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_unsignedInteger_0_0=RULE_NUM_INT
			{
				newLeafNode(lv_unsignedInteger_0_0, grammarAccess.getUnsignedIntegerAccess().getUnsignedIntegerNUM_INTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getUnsignedIntegerRule());
				}
				setWithLastConsumed(
					$current,
					"unsignedInteger",
					lv_unsignedInteger_0_0,
					"org.xtext.example.mydsl.Pascal.NUM_INT");
			}
		)
	)
;

// Entry rule entryRuleunsignedReal
entryRuleunsignedReal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnsignedRealRule()); }
	iv_ruleunsignedReal=ruleunsignedReal
	{ $current=$iv_ruleunsignedReal.current; }
	EOF;

// Rule unsignedReal
ruleunsignedReal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_unsignedReal_0_0=RULE_NUM_REAL
			{
				newLeafNode(lv_unsignedReal_0_0, grammarAccess.getUnsignedRealAccess().getUnsignedRealNUM_REALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getUnsignedRealRule());
				}
				setWithLastConsumed(
					$current,
					"unsignedReal",
					lv_unsignedReal_0_0,
					"org.xtext.example.mydsl.Pascal.NUM_REAL");
			}
		)
	)
;

// Entry rule entryRulesign
entryRulesign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignRule()); }
	iv_rulesign=rulesign
	{ $current=$iv_rulesign.current; }
	EOF;

// Rule sign
rulesign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_sign_0_1='+'
				{
					newLeafNode(lv_sign_0_1, grammarAccess.getSignAccess().getSignPlusSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignRule());
					}
					setWithLastConsumed($current, "sign", lv_sign_0_1, null);
				}
				    |
				lv_sign_0_2='-'
				{
					newLeafNode(lv_sign_0_2, grammarAccess.getSignAccess().getSignHyphenMinusKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignRule());
					}
					setWithLastConsumed($current, "sign", lv_sign_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRulebool
entryRulebool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolRule()); }
	iv_rulebool=rulebool
	{ $current=$iv_rulebool.current; }
	EOF;

// Rule bool
rulebool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_bool_0_1='true'
				{
					newLeafNode(lv_bool_0_1, grammarAccess.getBoolAccess().getBoolTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolRule());
					}
					setWithLastConsumed($current, "bool", lv_bool_0_1, null);
				}
				    |
				lv_bool_0_2='false'
				{
					newLeafNode(lv_bool_0_2, grammarAccess.getBoolAccess().getBoolFalseKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolRule());
					}
					setWithLastConsumed($current, "bool", lv_bool_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleStringStart
entryRuleStringStart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringStartRule()); }
	iv_ruleStringStart=ruleStringStart
	{ $current=$iv_ruleStringStart.current; }
	EOF;

// Rule StringStart
ruleStringStart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_StringStart_0_0=RULE_STRING
			{
				newLeafNode(lv_StringStart_0_0, grammarAccess.getStringStartAccess().getStringStartSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringStartRule());
				}
				setWithLastConsumed(
					$current,
					"StringStart",
					lv_StringStart_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuletypeDefinitionPart
entryRuletypeDefinitionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDefinitionPartRule()); }
	iv_ruletypeDefinitionPart=ruletypeDefinitionPart
	{ $current=$iv_ruletypeDefinitionPart.current; }
	EOF;

// Rule typeDefinitionPart
ruletypeDefinitionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeDefinitionPartAccess().getTypeKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDefinitionPartAccess().getTypeDefinitionTypeDefinitionParserRuleCall_1_0_0());
					}
					lv_typeDefinition_1_0=ruletypeDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDefinitionPartRule());
						}
						add(
							$current,
							"typeDefinition",
							lv_typeDefinition_1_0,
							"org.xtext.example.mydsl.Pascal.typeDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_semiTerminal_2_0=';'
					{
						newLeafNode(lv_semiTerminal_2_0, grammarAccess.getTypeDefinitionPartAccess().getSemiTerminalSemicolonKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeDefinitionPartRule());
						}
						addWithLastConsumed($current, "semiTerminal", lv_semiTerminal_2_0, ";");
					}
				)
			)
		)+
	)
;

// Entry rule entryRuletypeDefinition
entryRuletypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	iv_ruletypeDefinition=ruletypeDefinition
	{ $current=$iv_ruletypeDefinition.current; }
	EOF;

// Rule typeDefinition
ruletypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDefinitionAccess().getID1IdentifierParserRuleCall_0_0());
				}
				lv_ID1_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
					}
					set(
						$current,
						"ID1",
						lv_ID1_0_0,
						"org.xtext.example.mydsl.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getTypeDefinitionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDefinitionAccess().getTypeTypeStartParserRuleCall_2_0_0());
					}
					lv_type_2_1=ruletypeStart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
						}
						set(
							$current,
							"type",
							lv_type_2_1,
							"org.xtext.example.mydsl.Pascal.typeStart");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getTypeDefinitionAccess().getTypeFunctionTypeParserRuleCall_2_0_1());
					}
					lv_type_2_2=rulefunctionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
						}
						set(
							$current,
							"type",
							lv_type_2_2,
							"org.xtext.example.mydsl.Pascal.functionType");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getTypeDefinitionAccess().getTypeProcedureTypeParserRuleCall_2_0_2());
					}
					lv_type_2_3=ruleprocedureType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
						}
						set(
							$current,
							"type",
							lv_type_2_3,
							"org.xtext.example.mydsl.Pascal.procedureType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulefunctionType
entryRulefunctionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionTypeRule()); }
	iv_rulefunctionType=rulefunctionType
	{ $current=$iv_rulefunctionType.current; }
	EOF;

// Rule functionType
rulefunctionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionTypeAccess().getFunctionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionTypeAccess().getFormalParameterListFormalParameterListParserRuleCall_1_0());
				}
				lv_formalParameterList_1_0=ruleformalParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
					}
					set(
						$current,
						"formalParameterList",
						lv_formalParameterList_1_0,
						"org.xtext.example.mydsl.Pascal.formalParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionTypeAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionTypeAccess().getResultTypeResultTypeParserRuleCall_3_0());
				}
				lv_resultType_3_0=ruleresultType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
					}
					set(
						$current,
						"resultType",
						lv_resultType_3_0,
						"org.xtext.example.mydsl.Pascal.resultType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprocedureType
entryRuleprocedureType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureTypeRule()); }
	iv_ruleprocedureType=ruleprocedureType
	{ $current=$iv_ruleprocedureType.current; }
	EOF;

// Rule procedureType
ruleprocedureType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProcedureTypeAccess().getProcedureTypeAction_0(),
					$current);
			}
		)
		otherlv_1='procedure'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcedureTypeAccess().getProcedureKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureTypeAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0());
				}
				lv_formalParameterList_2_0=ruleformalParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureTypeRule());
					}
					set(
						$current,
						"formalParameterList",
						lv_formalParameterList_2_0,
						"org.xtext.example.mydsl.Pascal.formalParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuletypeStart
entryRuletypeStart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeStartRule()); }
	iv_ruletypeStart=ruletypeStart
	{ $current=$iv_ruletypeStart.current; }
	EOF;

// Rule typeStart
ruletypeStart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeStartAccess().getTypeStartSimpleTypeParserRuleCall_0_0());
				}
				lv_typeStart_0_1=rulesimpleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeStartRule());
					}
					set(
						$current,
						"typeStart",
						lv_typeStart_0_1,
						"org.xtext.example.mydsl.Pascal.simpleType");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getTypeStartAccess().getTypeStartStructuredTypeParserRuleCall_0_1());
				}
				lv_typeStart_0_2=rulestructuredType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeStartRule());
					}
					set(
						$current,
						"typeStart",
						lv_typeStart_0_2,
						"org.xtext.example.mydsl.Pascal.structuredType");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getTypeStartAccess().getTypeStartPointerTypeParserRuleCall_0_2());
				}
				lv_typeStart_0_3=rulepointerType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeStartRule());
					}
					set(
						$current,
						"typeStart",
						lv_typeStart_0_3,
						"org.xtext.example.mydsl.Pascal.pointerType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesimpleType
entryRulesimpleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleTypeRule()); }
	iv_rulesimpleType=rulesimpleType
	{ $current=$iv_rulesimpleType.current; }
	EOF;

// Rule simpleType
rulesimpleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleTypeAccess().getSimpleTypeScalarTypeParserRuleCall_0_0());
				}
				lv_simpleType_0_1=rulescalarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
					}
					set(
						$current,
						"simpleType",
						lv_simpleType_0_1,
						"org.xtext.example.mydsl.Pascal.scalarType");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSimpleTypeAccess().getSimpleTypeSubrangeTypeParserRuleCall_0_1());
				}
				lv_simpleType_0_2=rulesubrangeType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
					}
					set(
						$current,
						"simpleType",
						lv_simpleType_0_2,
						"org.xtext.example.mydsl.Pascal.subrangeType");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSimpleTypeAccess().getSimpleTypeTypeIdentifierParserRuleCall_0_2());
				}
				lv_simpleType_0_3=ruletypeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
					}
					set(
						$current,
						"simpleType",
						lv_simpleType_0_3,
						"org.xtext.example.mydsl.Pascal.typeIdentifier");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSimpleTypeAccess().getSimpleTypeStringtypeParserRuleCall_0_3());
				}
				lv_simpleType_0_4=rulestringtype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
					}
					set(
						$current,
						"simpleType",
						lv_simpleType_0_4,
						"org.xtext.example.mydsl.Pascal.stringtype");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulescalarType
entryRulescalarType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScalarTypeRule()); }
	iv_rulescalarType=rulescalarType
	{ $current=$iv_rulescalarType.current; }
	EOF;

// Rule scalarType
rulescalarType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getScalarTypeAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScalarTypeAccess().getIdentifierListIdentifierListParserRuleCall_1_0());
				}
				lv_identifierList_1_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScalarTypeRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_1_0,
						"org.xtext.example.mydsl.Pascal.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getScalarTypeAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulesubrangeType
entryRulesubrangeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubrangeTypeRule()); }
	iv_rulesubrangeType=rulesubrangeType
	{ $current=$iv_rulesubrangeType.current; }
	EOF;

// Rule subrangeType
rulesubrangeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubrangeTypeAccess().getConstant1ConstantParserRuleCall_0_0());
				}
				lv_constant1_0_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubrangeTypeRule());
					}
					set(
						$current,
						"constant1",
						lv_constant1_0_0,
						"org.xtext.example.mydsl.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='..'
		{
			newLeafNode(otherlv_1, grammarAccess.getSubrangeTypeAccess().getFullStopFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubrangeTypeAccess().getConstan2ConstantParserRuleCall_2_0());
				}
				lv_constan2_2_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubrangeTypeRule());
					}
					set(
						$current,
						"constan2",
						lv_constan2_2_0,
						"org.xtext.example.mydsl.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletypeIdentifier
entryRuletypeIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeIdentifierRule()); }
	iv_ruletypeIdentifier=ruletypeIdentifier
	{ $current=$iv_ruletypeIdentifier.current; }
	EOF;

// Rule typeIdentifier
ruletypeIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeIdentifierAccess().getIdentifierIdentifierParserRuleCall_0_0());
				}
				lv_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeIdentifierRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_0_0,
						"org.xtext.example.mydsl.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_type_1_1='Char'
					{
						newLeafNode(lv_type_1_1, grammarAccess.getTypeIdentifierAccess().getTypeCharKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeIdentifierRule());
						}
						setWithLastConsumed($current, "type", lv_type_1_1, null);
					}
					    |
					lv_type_1_2='Boolean'
					{
						newLeafNode(lv_type_1_2, grammarAccess.getTypeIdentifierAccess().getTypeBooleanKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeIdentifierRule());
						}
						setWithLastConsumed($current, "type", lv_type_1_2, null);
					}
					    |
					lv_type_1_3='Integer'
					{
						newLeafNode(lv_type_1_3, grammarAccess.getTypeIdentifierAccess().getTypeIntegerKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeIdentifierRule());
						}
						setWithLastConsumed($current, "type", lv_type_1_3, null);
					}
					    |
					lv_type_1_4='Real'
					{
						newLeafNode(lv_type_1_4, grammarAccess.getTypeIdentifierAccess().getTypeRealKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeIdentifierRule());
						}
						setWithLastConsumed($current, "type", lv_type_1_4, null);
					}
					    |
					lv_type_1_5='String'
					{
						newLeafNode(lv_type_1_5, grammarAccess.getTypeIdentifierAccess().getTypeStringKeyword_1_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeIdentifierRule());
						}
						setWithLastConsumed($current, "type", lv_type_1_5, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRulestructuredType
entryRulestructuredType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructuredTypeRule()); }
	iv_rulestructuredType=rulestructuredType
	{ $current=$iv_rulestructuredType.current; }
	EOF;

// Rule structuredType
rulestructuredType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='packed'
			{
				newLeafNode(otherlv_0, grammarAccess.getStructuredTypeAccess().getPackedKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredType1UnpackedStructuredTypeParserRuleCall_0_1_0());
					}
					lv_unpackedStructuredType1_1_0=ruleunpackedStructuredType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructuredTypeRule());
						}
						set(
							$current,
							"unpackedStructuredType1",
							lv_unpackedStructuredType1_1_0,
							"org.xtext.example.mydsl.Pascal.unpackedStructuredType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredType2UnpackedStructuredTypeParserRuleCall_1_0());
				}
				lv_unpackedStructuredType2_2_0=ruleunpackedStructuredType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructuredTypeRule());
					}
					set(
						$current,
						"unpackedStructuredType2",
						lv_unpackedStructuredType2_2_0,
						"org.xtext.example.mydsl.Pascal.unpackedStructuredType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunpackedStructuredType
entryRuleunpackedStructuredType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnpackedStructuredTypeRule()); }
	iv_ruleunpackedStructuredType=ruleunpackedStructuredType
	{ $current=$iv_ruleunpackedStructuredType.current; }
	EOF;

// Rule unpackedStructuredType
ruleunpackedStructuredType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getUnpackedStructuredTypeAccess().getUnpackedStructuredTypeRecordTypeParserRuleCall_0());
			}
			lv_unpackedStructuredType_0_0=rulerecordType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getUnpackedStructuredTypeRule());
				}
				set(
					$current,
					"unpackedStructuredType",
					lv_unpackedStructuredType_0_0,
					"org.xtext.example.mydsl.Pascal.recordType");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulestringtype
entryRulestringtype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringtypeRule()); }
	iv_rulestringtype=rulestringtype
	{ $current=$iv_rulestringtype.current; }
	EOF;

// Rule stringtype
rulestringtype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_stringTerminal_0_0=RULE_STRING
				{
					newLeafNode(lv_stringTerminal_0_0, grammarAccess.getStringtypeAccess().getStringTerminalSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringtypeRule());
					}
					setWithLastConsumed(
						$current,
						"stringTerminal",
						lv_stringTerminal_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getStringtypeAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStringtypeAccess().getIDIdentifierParserRuleCall_2_0_0());
					}
					lv_ID_2_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringtypeRule());
						}
						set(
							$current,
							"ID",
							lv_ID_2_0,
							"org.xtext.example.mydsl.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getStringtypeAccess().getUnsignedNumberUnsignedNumberParserRuleCall_2_1_0());
					}
					lv_unsignedNumber_3_0=ruleunsignedNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringtypeRule());
						}
						set(
							$current,
							"unsignedNumber",
							lv_unsignedNumber_3_0,
							"org.xtext.example.mydsl.Pascal.unsignedNumber");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getStringtypeAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRulerecordType
entryRulerecordType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordTypeRule()); }
	iv_rulerecordType=rulerecordType
	{ $current=$iv_rulerecordType.current; }
	EOF;

// Rule recordType
rulerecordType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRecordTypeAccess().getRecordTypeAction_0(),
					$current);
			}
		)
		otherlv_1='record'
		{
			newLeafNode(otherlv_1, grammarAccess.getRecordTypeAccess().getRecordKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRecordTypeAccess().getFieldListFieldListParserRuleCall_2_0_0());
					}
					lv_fieldList_2_0=rulefieldList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRecordTypeRule());
						}
						set(
							$current,
							"fieldList",
							lv_fieldList_2_0,
							"org.xtext.example.mydsl.Pascal.fieldList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_semiTerminal_3_0=';'
					{
						newLeafNode(lv_semiTerminal_3_0, grammarAccess.getRecordTypeAccess().getSemiTerminalSemicolonKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRecordTypeRule());
						}
						setWithLastConsumed($current, "semiTerminal", lv_semiTerminal_3_0, ";");
					}
				)
			)
		)?
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getRecordTypeAccess().getEndKeyword_3());
		}
	)
;

// Entry rule entryRulefieldList
entryRulefieldList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldListRule()); }
	iv_rulefieldList=rulefieldList
	{ $current=$iv_rulefieldList.current; }
	EOF;

// Rule fieldList
rulefieldList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldListAccess().getFixedPartFixedPartParserRuleCall_0_0_0());
					}
					lv_fixedPart_0_0=rulefixedPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldListRule());
						}
						set(
							$current,
							"fixedPart",
							lv_fixedPart_0_0,
							"org.xtext.example.mydsl.Pascal.fixedPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						lv_semiTerminal_1_0=';'
						{
							newLeafNode(lv_semiTerminal_1_0, grammarAccess.getFieldListAccess().getSemiTerminalSemicolonKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFieldListRule());
							}
							setWithLastConsumed($current, "semiTerminal", lv_semiTerminal_1_0, ";");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getFieldListAccess().getVariantPart1VariantPartParserRuleCall_0_1_1_0());
						}
						lv_variantPart1_2_0=rulevariantPart
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFieldListRule());
							}
							set(
								$current,
								"variantPart1",
								lv_variantPart1_2_0,
								"org.xtext.example.mydsl.Pascal.variantPart");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldListAccess().getVariantPart2VariantPartParserRuleCall_1_0());
				}
				lv_variantPart2_3_0=rulevariantPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldListRule());
					}
					set(
						$current,
						"variantPart2",
						lv_variantPart2_3_0,
						"org.xtext.example.mydsl.Pascal.variantPart");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefixedPart
entryRulefixedPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFixedPartRule()); }
	iv_rulefixedPart=rulefixedPart
	{ $current=$iv_rulefixedPart.current; }
	EOF;

// Rule fixedPart
rulefixedPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFixedPartAccess().getRecordSectionParserRuleCall_0());
		}
		this_recordSection_0=rulerecordSection
		{
			$current = $this_recordSection_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					lv_semiTerminal_1_0=';'
					{
						newLeafNode(lv_semiTerminal_1_0, grammarAccess.getFixedPartAccess().getSemiTerminalSemicolonKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFixedPartRule());
						}
						addWithLastConsumed($current, "semiTerminal", lv_semiTerminal_1_0, ";");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFixedPartAccess().getRecordSectionRecordSectionParserRuleCall_1_1_0());
					}
					lv_recordSection_2_0=rulerecordSection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFixedPartRule());
						}
						add(
							$current,
							"recordSection",
							lv_recordSection_2_0,
							"org.xtext.example.mydsl.Pascal.recordSection");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulerecordSection
entryRulerecordSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordSectionRule()); }
	iv_rulerecordSection=rulerecordSection
	{ $current=$iv_rulerecordSection.current; }
	EOF;

// Rule recordSection
rulerecordSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordSectionAccess().getIdentifierListIdentifierListParserRuleCall_0_0());
				}
				lv_identifierList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordSectionRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_0_0,
						"org.xtext.example.mydsl.Pascal.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRecordSectionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordSectionAccess().getTypeStartTypeStartParserRuleCall_2_0());
				}
				lv_typeStart_2_0=ruletypeStart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordSectionRule());
					}
					set(
						$current,
						"typeStart",
						lv_typeStart_2_0,
						"org.xtext.example.mydsl.Pascal.typeStart");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariantPart
entryRulevariantPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantPartRule()); }
	iv_rulevariantPart=rulevariantPart
	{ $current=$iv_rulevariantPart.current; }
	EOF;

// Rule variantPart
rulevariantPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariantPartAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantPartAccess().getTagTagParserRuleCall_1_0());
				}
				lv_tag_1_0=ruletag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantPartRule());
					}
					set(
						$current,
						"tag",
						lv_tag_1_0,
						"org.xtext.example.mydsl.Pascal.tag");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='of'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariantPartAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantPartAccess().getVariant1VariantParserRuleCall_3_0());
				}
				lv_variant1_3_0=rulevariant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantPartRule());
					}
					set(
						$current,
						"variant1",
						lv_variant1_3_0,
						"org.xtext.example.mydsl.Pascal.variant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_semiTerminal_4_0=';'
					{
						newLeafNode(lv_semiTerminal_4_0, grammarAccess.getVariantPartAccess().getSemiTerminalSemicolonKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariantPartRule());
						}
						addWithLastConsumed($current, "semiTerminal", lv_semiTerminal_4_0, ";");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVariantPartAccess().getVariant2VariantParserRuleCall_4_1_0());
					}
					lv_variant2_5_0=rulevariant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariantPartRule());
						}
						add(
							$current,
							"variant2",
							lv_variant2_5_0,
							"org.xtext.example.mydsl.Pascal.variant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuletag
entryRuletag returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTagRule()); }
	iv_ruletag=ruletag
	{ $current=$iv_ruletag.current; }
	EOF;

// Rule tag
ruletag returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTagAccess().getIDIdentifierParserRuleCall_0_0_0());
					}
					lv_ID_0_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTagRule());
						}
						set(
							$current,
							"ID",
							lv_ID_0_0,
							"org.xtext.example.mydsl.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getTagAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTagAccess().getTypeIdentifier1TypeIdentifierParserRuleCall_0_2_0());
					}
					lv_typeIdentifier1_2_0=ruletypeIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTagRule());
						}
						set(
							$current,
							"typeIdentifier1",
							lv_typeIdentifier1_2_0,
							"org.xtext.example.mydsl.Pascal.typeIdentifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTagAccess().getTypeIdentifier2TypeIdentifierParserRuleCall_1_0());
				}
				lv_typeIdentifier2_3_0=ruletypeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTagRule());
					}
					set(
						$current,
						"typeIdentifier2",
						lv_typeIdentifier2_3_0,
						"org.xtext.example.mydsl.Pascal.typeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariant
entryRulevariant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantRule()); }
	iv_rulevariant=rulevariant
	{ $current=$iv_rulevariant.current; }
	EOF;

// Rule variant
rulevariant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantAccess().getConstListConstListParserRuleCall_0_0());
				}
				lv_constList_0_0=ruleconstList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantRule());
					}
					set(
						$current,
						"constList",
						lv_constList_0_0,
						"org.xtext.example.mydsl.Pascal.constList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariantAccess().getColonKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getVariantAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantAccess().getFieldListFieldListParserRuleCall_3_0());
				}
				lv_fieldList_3_0=rulefieldList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantRule());
					}
					set(
						$current,
						"fieldList",
						lv_fieldList_3_0,
						"org.xtext.example.mydsl.Pascal.fieldList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariantAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulepointerType
entryRulepointerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointerTypeRule()); }
	iv_rulepointerType=rulepointerType
	{ $current=$iv_rulepointerType.current; }
	EOF;

// Rule pointerType
rulepointerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='^'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointerTypeAccess().getCircumflexAccentKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPointerTypeAccess().getTypeIdentifierTypeIdentifierParserRuleCall_1_0());
				}
				lv_typeIdentifier_1_0=ruletypeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPointerTypeRule());
					}
					set(
						$current,
						"typeIdentifier",
						lv_typeIdentifier_1_0,
						"org.xtext.example.mydsl.Pascal.typeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariableDeclarationPart
entryRulevariableDeclarationPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationPartRule()); }
	iv_rulevariableDeclarationPart=rulevariableDeclarationPart
	{ $current=$iv_rulevariableDeclarationPart.current; }
	EOF;

// Rule variableDeclarationPart
rulevariableDeclarationPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationPartAccess().getVarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclaration1VariableDeclarationParserRuleCall_1_0());
				}
				lv_variableDeclaration1_1_0=rulevariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationPartRule());
					}
					set(
						$current,
						"variableDeclaration1",
						lv_variableDeclaration1_1_0,
						"org.xtext.example.mydsl.Pascal.variableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_semiTerminal_2_0=';'
					{
						newLeafNode(lv_semiTerminal_2_0, grammarAccess.getVariableDeclarationPartAccess().getSemiTerminalSemicolonKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationPartRule());
						}
						addWithLastConsumed($current, "semiTerminal", lv_semiTerminal_2_0, ";");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclaration2VariableDeclarationParserRuleCall_2_1_0());
					}
					lv_variableDeclaration2_3_0=rulevariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationPartRule());
						}
						add(
							$current,
							"variableDeclaration2",
							lv_variableDeclaration2_3_0,
							"org.xtext.example.mydsl.Pascal.variableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariableDeclarationPartAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulevariableDeclaration
entryRulevariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_rulevariableDeclaration=rulevariableDeclaration
	{ $current=$iv_rulevariableDeclaration.current; }
	EOF;

// Rule variableDeclaration
rulevariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getIdentifierListIdentifierListParserRuleCall_0_0());
				}
				lv_identifierList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_0_0,
						"org.xtext.example.mydsl.Pascal.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeStartTypeStartParserRuleCall_2_0());
				}
				lv_typeStart_2_0=ruletypeStart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"typeStart",
						lv_typeStart_2_0,
						"org.xtext.example.mydsl.Pascal.typeStart");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprocedureAndFunctionDeclarationPart
entryRuleprocedureAndFunctionDeclarationPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureAndFunctionDeclarationPartRule()); }
	iv_ruleprocedureAndFunctionDeclarationPart=ruleprocedureAndFunctionDeclarationPart
	{ $current=$iv_ruleprocedureAndFunctionDeclarationPart.current; }
	EOF;

// Rule procedureAndFunctionDeclarationPart
ruleprocedureAndFunctionDeclarationPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getProcedureOrFunctionDeclarationProcedureOrFunctionDeclarationParserRuleCall_0_0());
				}
				lv_procedureOrFunctionDeclaration_0_0=ruleprocedureOrFunctionDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureAndFunctionDeclarationPartRule());
					}
					set(
						$current,
						"procedureOrFunctionDeclaration",
						lv_procedureOrFunctionDeclaration_0_0,
						"org.xtext.example.mydsl.Pascal.procedureOrFunctionDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleprocedureOrFunctionDeclaration
entryRuleprocedureOrFunctionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureOrFunctionDeclarationRule()); }
	iv_ruleprocedureOrFunctionDeclaration=ruleprocedureOrFunctionDeclaration
	{ $current=$iv_ruleprocedureOrFunctionDeclaration.current; }
	EOF;

// Rule procedureOrFunctionDeclaration
ruleprocedureOrFunctionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureOrFunctionDeclarationAccess().getProcedureDeclarationProcedureDeclarationParserRuleCall_0_0());
				}
				lv_procedureDeclaration_0_0=ruleprocedureDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureOrFunctionDeclarationRule());
					}
					set(
						$current,
						"procedureDeclaration",
						lv_procedureDeclaration_0_0,
						"org.xtext.example.mydsl.Pascal.procedureDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureOrFunctionDeclarationAccess().getFunctionDeclarationFunctionDeclarationParserRuleCall_1_0());
				}
				lv_functionDeclaration_1_0=rulefunctionDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureOrFunctionDeclarationRule());
					}
					set(
						$current,
						"functionDeclaration",
						lv_functionDeclaration_1_0,
						"org.xtext.example.mydsl.Pascal.functionDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprocedureDeclaration
entryRuleprocedureDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureDeclarationRule()); }
	iv_ruleprocedureDeclaration=ruleprocedureDeclaration
	{ $current=$iv_ruleprocedureDeclaration.current; }
	EOF;

// Rule procedureDeclaration
ruleprocedureDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='procedure'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcedureDeclarationAccess().getProcedureKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureDeclarationAccess().getIdentifierIdentifierParserRuleCall_1_0());
				}
				lv_identifier_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureDeclarationRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_1_0,
						"org.xtext.example.mydsl.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureDeclarationAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0());
				}
				lv_formalParameterList_2_0=ruleformalParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureDeclarationRule());
					}
					set(
						$current,
						"formalParameterList",
						lv_formalParameterList_2_0,
						"org.xtext.example.mydsl.Pascal.formalParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureDeclarationAccess().getBlockBlockParserRuleCall_4_0());
				}
				lv_block_4_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureDeclarationRule());
					}
					set(
						$current,
						"block",
						lv_block_4_0,
						"org.xtext.example.mydsl.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleformalParameterList
entryRuleformalParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalParameterListRule()); }
	iv_ruleformalParameterList=ruleformalParameterList
	{ $current=$iv_ruleformalParameterList.current; }
	EOF;

// Rule formalParameterList
ruleformalParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFormalParameterListAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormalParameterListAccess().getFormalParameterSection1FormalParameterSectionParserRuleCall_1_0());
				}
				lv_formalParameterSection1_1_0=ruleformalParameterSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormalParameterListRule());
					}
					set(
						$current,
						"formalParameterSection1",
						lv_formalParameterSection1_1_0,
						"org.xtext.example.mydsl.Pascal.formalParameterSection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_semiterminal_2_0=';'
					{
						newLeafNode(lv_semiterminal_2_0, grammarAccess.getFormalParameterListAccess().getSemiterminalSemicolonKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFormalParameterListRule());
						}
						addWithLastConsumed($current, "semiterminal", lv_semiterminal_2_0, ";");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFormalParameterListAccess().getFormalParameterSection2FormalParameterSectionParserRuleCall_2_1_0());
					}
					lv_formalParameterSection2_3_0=ruleformalParameterSection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormalParameterListRule());
						}
						add(
							$current,
							"formalParameterSection2",
							lv_formalParameterSection2_3_0,
							"org.xtext.example.mydsl.Pascal.formalParameterSection");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFormalParameterListAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleformalParameterSection
entryRuleformalParameterSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalParameterSectionRule()); }
	iv_ruleformalParameterSection=ruleformalParameterSection
	{ $current=$iv_ruleformalParameterSection.current; }
	EOF;

// Rule formalParameterSection
ruleformalParameterSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFormalParameterSectionAccess().getParameterGroupParameterGroupParserRuleCall_0_0());
				}
				lv_parameterGroup_0_0=ruleparameterGroup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormalParameterSectionRule());
					}
					set(
						$current,
						"parameterGroup",
						lv_parameterGroup_0_0,
						"org.xtext.example.mydsl.Pascal.parameterGroup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='var'
			{
				newLeafNode(otherlv_1, grammarAccess.getFormalParameterSectionAccess().getVarKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormalParameterSectionAccess().getParameterGroupParameterGroupParserRuleCall_1_1_0());
					}
					lv_parameterGroup_2_0=ruleparameterGroup
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormalParameterSectionRule());
						}
						set(
							$current,
							"parameterGroup",
							lv_parameterGroup_2_0,
							"org.xtext.example.mydsl.Pascal.parameterGroup");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_3='function'
			{
				newLeafNode(otherlv_3, grammarAccess.getFormalParameterSectionAccess().getFunctionKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormalParameterSectionAccess().getParameterGroupParameterGroupParserRuleCall_2_1_0());
					}
					lv_parameterGroup_4_0=ruleparameterGroup
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormalParameterSectionRule());
						}
						set(
							$current,
							"parameterGroup",
							lv_parameterGroup_4_0,
							"org.xtext.example.mydsl.Pascal.parameterGroup");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_5='procedure'
			{
				newLeafNode(otherlv_5, grammarAccess.getFormalParameterSectionAccess().getProcedureKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormalParameterSectionAccess().getParameterGroupParameterGroupParserRuleCall_3_1_0());
					}
					lv_parameterGroup_6_0=ruleparameterGroup
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormalParameterSectionRule());
						}
						set(
							$current,
							"parameterGroup",
							lv_parameterGroup_6_0,
							"org.xtext.example.mydsl.Pascal.parameterGroup");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleparameterGroup
entryRuleparameterGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterGroupRule()); }
	iv_ruleparameterGroup=ruleparameterGroup
	{ $current=$iv_ruleparameterGroup.current; }
	EOF;

// Rule parameterGroup
ruleparameterGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterGroupAccess().getIdentifierListIdentifierListParserRuleCall_0_0());
				}
				lv_identifierList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterGroupRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_0_0,
						"org.xtext.example.mydsl.Pascal.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterGroupAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterGroupAccess().getTypeIdentifierTypeIdentifierParserRuleCall_2_0());
				}
				lv_typeIdentifier_2_0=ruletypeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterGroupRule());
					}
					set(
						$current,
						"typeIdentifier",
						lv_typeIdentifier_2_0,
						"org.xtext.example.mydsl.Pascal.typeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleidentifierList
entryRuleidentifierList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierListRule()); }
	iv_ruleidentifierList=ruleidentifierList
	{ $current=$iv_ruleidentifierList.current; }
	EOF;

// Rule identifierList
ruleidentifierList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIdentifierListAccess().getIdentifier1IdentifierParserRuleCall_0_0());
				}
				lv_identifier1_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIdentifierListRule());
					}
					set(
						$current,
						"identifier1",
						lv_identifier1_0_0,
						"org.xtext.example.mydsl.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_commaTerminal_1_0=','
					{
						newLeafNode(lv_commaTerminal_1_0, grammarAccess.getIdentifierListAccess().getCommaTerminalCommaKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdentifierListRule());
						}
						addWithLastConsumed($current, "commaTerminal", lv_commaTerminal_1_0, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIdentifierListAccess().getIdentifier2IdentifierParserRuleCall_1_1_0());
					}
					lv_identifier2_2_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIdentifierListRule());
						}
						add(
							$current,
							"identifier2",
							lv_identifier2_2_0,
							"org.xtext.example.mydsl.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleconstList
entryRuleconstList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstListRule()); }
	iv_ruleconstList=ruleconstList
	{ $current=$iv_ruleconstList.current; }
	EOF;

// Rule constList
ruleconstList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstListAccess().getConstant1ConstantParserRuleCall_0_0());
				}
				lv_constant1_0_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstListRule());
					}
					set(
						$current,
						"constant1",
						lv_constant1_0_0,
						"org.xtext.example.mydsl.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_commaTerminal_1_0=','
					{
						newLeafNode(lv_commaTerminal_1_0, grammarAccess.getConstListAccess().getCommaTerminalCommaKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstListRule());
						}
						addWithLastConsumed($current, "commaTerminal", lv_commaTerminal_1_0, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConstListAccess().getConstant2ConstantParserRuleCall_1_1_0());
					}
					lv_constant2_2_0=ruleconstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstListRule());
						}
						add(
							$current,
							"constant2",
							lv_constant2_2_0,
							"org.xtext.example.mydsl.Pascal.constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulefunctionDeclaration
entryRulefunctionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	iv_rulefunctionDeclaration=rulefunctionDeclaration
	{ $current=$iv_rulefunctionDeclaration.current; }
	EOF;

// Rule functionDeclaration
rulefunctionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getIdentifierIdentifierParserRuleCall_1_0());
				}
				lv_identifier_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_1_0,
						"org.xtext.example.mydsl.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0());
				}
				lv_formalParameterList_2_0=ruleformalParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"formalParameterList",
						lv_formalParameterList_2_0,
						"org.xtext.example.mydsl.Pascal.formalParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getResultTypeResultTypeParserRuleCall_4_0());
				}
				lv_resultType_4_0=ruleresultType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"resultType",
						lv_resultType_4_0,
						"org.xtext.example.mydsl.Pascal.resultType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getSemicolonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBlockBlockParserRuleCall_6_0());
				}
				lv_block_6_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"block",
						lv_block_6_0,
						"org.xtext.example.mydsl.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleresultType
entryRuleresultType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultTypeRule()); }
	iv_ruleresultType=ruleresultType
	{ $current=$iv_ruleresultType.current; }
	EOF;

// Rule resultType
ruleresultType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getResultTypeAccess().getTypeIdentifierTypeIdentifierParserRuleCall_0());
			}
			lv_typeIdentifier_0_0=ruletypeIdentifier
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getResultTypeRule());
				}
				set(
					$current,
					"typeIdentifier",
					lv_typeIdentifier_0_0,
					"org.xtext.example.mydsl.Pascal.typeIdentifier");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getLabelStartLabelStartParserRuleCall_0_0_0());
					}
					lv_labelStart_0_0=rulelabelStart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"labelStart",
							lv_labelStart_0_0,
							"org.xtext.example.mydsl.Pascal.labelStart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getUnlabelledStatementUnlabelledStatementParserRuleCall_0_2_0());
					}
					lv_unlabelledStatement_2_0=ruleunlabelledStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"unlabelledStatement",
							lv_unlabelledStatement_2_0,
							"org.xtext.example.mydsl.Pascal.unlabelledStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getUnlabelledStatementUnlabelledStatementParserRuleCall_1_0());
				}
				lv_unlabelledStatement_3_0=ruleunlabelledStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"unlabelledStatement",
						lv_unlabelledStatement_3_0,
						"org.xtext.example.mydsl.Pascal.unlabelledStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunlabelledStatement
entryRuleunlabelledStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnlabelledStatementRule()); }
	iv_ruleunlabelledStatement=ruleunlabelledStatement
	{ $current=$iv_ruleunlabelledStatement.current; }
	EOF;

// Rule unlabelledStatement
ruleunlabelledStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnlabelledStatementAccess().getUnlabelledStatementAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnlabelledStatementAccess().getSimpleStatementSimpleStatementParserRuleCall_0_1_0());
					}
					lv_simpleStatement_1_0=rulesimpleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnlabelledStatementRule());
						}
						set(
							$current,
							"simpleStatement",
							lv_simpleStatement_1_0,
							"org.xtext.example.mydsl.Pascal.simpleStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnlabelledStatementAccess().getStructuredStatementStructuredStatementParserRuleCall_1_0());
				}
				lv_structuredStatement_2_0=rulestructuredStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnlabelledStatementRule());
					}
					set(
						$current,
						"structuredStatement",
						lv_structuredStatement_2_0,
						"org.xtext.example.mydsl.Pascal.structuredStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesimpleStatement
entryRulesimpleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStatementRule()); }
	iv_rulesimpleStatement=rulesimpleStatement
	{ $current=$iv_rulesimpleStatement.current; }
	EOF;

// Rule simpleStatement
rulesimpleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStatementAccess().getAssignmentStatementAssignmentStatementParserRuleCall_0_0());
				}
				lv_assignmentStatement_0_0=ruleassignmentStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
					}
					set(
						$current,
						"assignmentStatement",
						lv_assignmentStatement_0_0,
						"org.xtext.example.mydsl.Pascal.assignmentStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStatementAccess().getProcedureStatementProcedureStatementParserRuleCall_1_0());
				}
				lv_procedureStatement_1_0=ruleprocedureStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
					}
					set(
						$current,
						"procedureStatement",
						lv_procedureStatement_1_0,
						"org.xtext.example.mydsl.Pascal.procedureStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStatementAccess().getGotoStatementGotoStatementParserRuleCall_2_0());
				}
				lv_gotoStatement_2_0=rulegotoStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
					}
					set(
						$current,
						"gotoStatement",
						lv_gotoStatement_2_0,
						"org.xtext.example.mydsl.Pascal.gotoStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleassignmentStatement
entryRuleassignmentStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentStatementRule()); }
	iv_ruleassignmentStatement=ruleassignmentStatement
	{ $current=$iv_ruleassignmentStatement.current; }
	EOF;

// Rule assignmentStatement
ruleassignmentStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentStatementAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=rulevariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"org.xtext.example.mydsl.Pascal.variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentStatementAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentStatementAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.example.mydsl.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariable
entryRulevariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_rulevariable=rulevariable
	{ $current=$iv_rulevariable.current; }
	EOF;

// Rule variable
rulevariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='@'
				{
					newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getCommercialAtKeyword_0_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableAccess().getIdentifier1IdentifierParserRuleCall_0_0_1_0());
						}
						lv_identifier1_1_0=ruleidentifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableRule());
							}
							set(
								$current,
								"identifier1",
								lv_identifier1_1_0,
								"org.xtext.example.mydsl.Pascal.identifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableAccess().getIdentifier2IdentifierParserRuleCall_0_1_0());
					}
					lv_identifier2_2_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableRule());
						}
						set(
							$current,
							"identifier2",
							lv_identifier2_2_0,
							"org.xtext.example.mydsl.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				otherlv_3='['
				{
					newLeafNode(otherlv_3, grammarAccess.getVariableAccess().getLeftSquareBracketKeyword_1_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_1_0_1_0());
						}
						lv_expression_4_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableRule());
							}
							add(
								$current,
								"expression",
								lv_expression_4_0,
								"org.xtext.example.mydsl.Pascal.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5=','
					{
						newLeafNode(otherlv_5, grammarAccess.getVariableAccess().getCommaKeyword_1_0_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_1_0_2_1_0());
							}
							lv_expression_6_0=ruleexpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVariableRule());
								}
								add(
									$current,
									"expression",
									lv_expression_6_0,
									"org.xtext.example.mydsl.Pascal.expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_7=']'
				{
					newLeafNode(otherlv_7, grammarAccess.getVariableAccess().getRightSquareBracketKeyword_1_0_3());
				}
			)
			    |
			(
				otherlv_8='(.'
				{
					newLeafNode(otherlv_8, grammarAccess.getVariableAccess().getLeftParenthesisFullStopKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_1_1_1_0());
						}
						lv_expression_9_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableRule());
							}
							add(
								$current,
								"expression",
								lv_expression_9_0,
								"org.xtext.example.mydsl.Pascal.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_10=','
					{
						newLeafNode(otherlv_10, grammarAccess.getVariableAccess().getCommaKeyword_1_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_1_1_2_1_0());
							}
							lv_expression_11_0=ruleexpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVariableRule());
								}
								add(
									$current,
									"expression",
									lv_expression_11_0,
									"org.xtext.example.mydsl.Pascal.expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_12='.)'
				{
					newLeafNode(otherlv_12, grammarAccess.getVariableAccess().getFullStopRightParenthesisKeyword_1_1_3());
				}
			)
			    |
			(
				otherlv_13='.'
				{
					newLeafNode(otherlv_13, grammarAccess.getVariableAccess().getFullStopKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableAccess().getIdentifier3IdentifierParserRuleCall_1_2_1_0());
						}
						lv_identifier3_14_0=ruleidentifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableRule());
							}
							add(
								$current,
								"identifier3",
								lv_identifier3_14_0,
								"org.xtext.example.mydsl.Pascal.identifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			otherlv_15='^'
			{
				newLeafNode(otherlv_15, grammarAccess.getVariableAccess().getCircumflexAccentKeyword_1_3());
			}
		)*
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0());
			}
			lv_simpleExpression_0_0=rulesimpleExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExpressionRule());
				}
				set(
					$current,
					"simpleExpression",
					lv_simpleExpression_0_0,
					"org.xtext.example.mydsl.Pascal.simpleExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulesimpleExpression
entryRulesimpleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	iv_rulesimpleExpression=rulesimpleExpression
	{ $current=$iv_rulesimpleExpression.current; }
	EOF;

// Rule simpleExpression
rulesimpleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleExpressionAccess().getTermTermParserRuleCall_0_0());
				}
				lv_term_0_0=ruleterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
					}
					set(
						$current,
						"term",
						lv_term_0_0,
						"org.xtext.example.mydsl.Pascal.term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getSimpleExpressionAccess().getAdditiveoperatorParserRuleCall_1_0());
			}
			ruleadditiveoperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_1_1_0());
					}
					lv_simpleExpression_2_0=rulesimpleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
						}
						set(
							$current,
							"simpleExpression",
							lv_simpleExpression_2_0,
							"org.xtext.example.mydsl.Pascal.simpleExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleadditiveoperator
entryRuleadditiveoperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveoperatorRule()); }
	iv_ruleadditiveoperator=ruleadditiveoperator
	{ $current=$iv_ruleadditiveoperator.current.getText(); }
	EOF;

// Rule additiveoperator
ruleadditiveoperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdditiveoperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdditiveoperatorAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdditiveoperatorAccess().getOrKeyword_2());
		}
		    |
		kw='xor'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdditiveoperatorAccess().getXorKeyword_3());
		}
	)
;

// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleterm=ruleterm
	{ $current=$iv_ruleterm.current; }
	EOF;

// Rule term
ruleterm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getSignedFactorSignedFactorParserRuleCall_0_0());
				}
				lv_signedFactor_0_0=rulesignedFactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					set(
						$current,
						"signedFactor",
						lv_signedFactor_0_0,
						"org.xtext.example.mydsl.Pascal.signedFactor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getTermAccess().getMultiplicativeoperatorParserRuleCall_1_0());
			}
			rulemultiplicativeoperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getTermTermParserRuleCall_1_1_0());
					}
					lv_term_2_0=ruleterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"term",
							lv_term_2_0,
							"org.xtext.example.mydsl.Pascal.term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulemultiplicativeoperator
entryRulemultiplicativeoperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeoperatorRule()); }
	iv_rulemultiplicativeoperator=rulemultiplicativeoperator
	{ $current=$iv_rulemultiplicativeoperator.current.getText(); }
	EOF;

// Rule multiplicativeoperator
rulemultiplicativeoperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getSolidusKeyword_1());
		}
		    |
		kw='div'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getDivKeyword_2());
		}
		    |
		kw='mod'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getModKeyword_3());
		}
		    |
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getAndKeyword_4());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getEqualsSignKeyword_5());
		}
		    |
		kw='<>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getLessThanSignGreaterThanSignKeyword_6());
		}
	)
;

// Entry rule entryRulesignedFactor
entryRulesignedFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignedFactorRule()); }
	iv_rulesignedFactor=rulesignedFactor
	{ $current=$iv_rulesignedFactor.current; }
	EOF;

// Rule signedFactor
rulesignedFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='+'
			{
				newLeafNode(otherlv_0, grammarAccess.getSignedFactorAccess().getPlusSignKeyword_0_0());
			}
			    |
			otherlv_1='-'
			{
				newLeafNode(otherlv_1, grammarAccess.getSignedFactorAccess().getHyphenMinusKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSignedFactorAccess().getFactorFactorParserRuleCall_1_0());
				}
				lv_factor_2_0=rulefactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignedFactorRule());
					}
					set(
						$current,
						"factor",
						lv_factor_2_0,
						"org.xtext.example.mydsl.Pascal.factor");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefactor
entryRulefactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_rulefactor=rulefactor
	{ $current=$iv_rulefactor.current; }
	EOF;

// Rule factor
rulefactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=rulevariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"org.xtext.example.mydsl.Pascal.variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"org.xtext.example.mydsl.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getFactorAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getFunctionDesignatorFunctionDesignatorParserRuleCall_2_0());
				}
				lv_functionDesignator_4_0=rulefunctionDesignator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"functionDesignator",
						lv_functionDesignator_4_0,
						"org.xtext.example.mydsl.Pascal.functionDesignator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getUnsignedConstantUnsignedConstantParserRuleCall_3_0());
				}
				lv_unsignedConstant_5_0=ruleunsignedConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"unsignedConstant",
						lv_unsignedConstant_5_0,
						"org.xtext.example.mydsl.Pascal.unsignedConstant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_not_6_0='not'
					{
						newLeafNode(lv_not_6_0, grammarAccess.getFactorAccess().getNotNotKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFactorRule());
						}
						setWithLastConsumed($current, "not", lv_not_6_0, "not");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_4_1_0());
					}
					lv_factor_7_0=rulefactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"factor",
							lv_factor_7_0,
							"org.xtext.example.mydsl.Pascal.factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getBoolBoolParserRuleCall_5_0());
				}
				lv_bool_8_0=rulebool
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"bool",
						lv_bool_8_0,
						"org.xtext.example.mydsl.Pascal.bool");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunsignedConstant
entryRuleunsignedConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnsignedConstantRule()); }
	iv_ruleunsignedConstant=ruleunsignedConstant
	{ $current=$iv_ruleunsignedConstant.current; }
	EOF;

// Rule unsignedConstant
ruleunsignedConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsignedConstantAccess().getUnsignedNumberUnsignedNumberParserRuleCall_0_0());
				}
				lv_unsignedNumber_0_0=ruleunsignedNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsignedConstantRule());
					}
					set(
						$current,
						"unsignedNumber",
						lv_unsignedNumber_0_0,
						"org.xtext.example.mydsl.Pascal.unsignedNumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsignedConstantAccess().getConstantChrConstantChrParserRuleCall_1_0());
				}
				lv_constantChr_1_0=ruleconstantChr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsignedConstantRule());
					}
					set(
						$current,
						"constantChr",
						lv_constantChr_1_0,
						"org.xtext.example.mydsl.Pascal.constantChr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsignedConstantAccess().getStringStartStringStartParserRuleCall_2_0());
				}
				lv_StringStart_2_0=ruleStringStart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsignedConstantRule());
					}
					set(
						$current,
						"StringStart",
						lv_StringStart_2_0,
						"org.xtext.example.mydsl.Pascal.StringStart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_nil_3_0='nil'
				{
					newLeafNode(lv_nil_3_0, grammarAccess.getUnsignedConstantAccess().getNilNilKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnsignedConstantRule());
					}
					setWithLastConsumed($current, "nil", lv_nil_3_0, "nil");
				}
			)
		)
	)
;

// Entry rule entryRulefunctionDesignator
entryRulefunctionDesignator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDesignatorRule()); }
	iv_rulefunctionDesignator=rulefunctionDesignator
	{ $current=$iv_rulefunctionDesignator.current; }
	EOF;

// Rule functionDesignator
rulefunctionDesignator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDesignatorAccess().getIdentifierIdentifierParserRuleCall_0_0());
				}
				lv_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDesignatorRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_0_0,
						"org.xtext.example.mydsl.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionDesignatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDesignatorAccess().getParameterListParameterListParserRuleCall_2_0());
				}
				lv_parameterList_2_0=ruleparameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDesignatorRule());
					}
					set(
						$current,
						"parameterList",
						lv_parameterList_2_0,
						"org.xtext.example.mydsl.Pascal.parameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionDesignatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleparameterList
entryRuleparameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleparameterList=ruleparameterList
	{ $current=$iv_ruleparameterList.current; }
	EOF;

// Rule parameterList
ruleparameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterListAccess().getActualParameter1ActualParameterParserRuleCall_0_0());
				}
				lv_actualParameter1_0_0=ruleactualParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterListRule());
					}
					set(
						$current,
						"actualParameter1",
						lv_actualParameter1_0_0,
						"org.xtext.example.mydsl.Pascal.actualParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getActualParameter2ActualParameterParserRuleCall_1_1_0());
					}
					lv_actualParameter2_2_0=ruleactualParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						add(
							$current,
							"actualParameter2",
							lv_actualParameter2_2_0,
							"org.xtext.example.mydsl.Pascal.actualParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleprocedureStatement
entryRuleprocedureStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureStatementRule()); }
	iv_ruleprocedureStatement=ruleprocedureStatement
	{ $current=$iv_ruleprocedureStatement.current; }
	EOF;

// Rule procedureStatement
ruleprocedureStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureStatementAccess().getIdentifierIdentifierParserRuleCall_0_0());
				}
				lv_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureStatementRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_0_0,
						"org.xtext.example.mydsl.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getProcedureStatementAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProcedureStatementAccess().getParameterListParameterListParserRuleCall_1_1_0());
					}
					lv_parameterList_2_0=ruleparameterList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcedureStatementRule());
						}
						set(
							$current,
							"parameterList",
							lv_parameterList_2_0,
							"org.xtext.example.mydsl.Pascal.parameterList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getProcedureStatementAccess().getRightParenthesisKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleactualParameter
entryRuleactualParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActualParameterRule()); }
	iv_ruleactualParameter=ruleactualParameter
	{ $current=$iv_ruleactualParameter.current; }
	EOF;

// Rule actualParameter
ruleactualParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getActualParameterAccess().getExpressionExpressionParserRuleCall_0());
			}
			lv_expression_0_0=ruleexpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getActualParameterRule());
				}
				set(
					$current,
					"expression",
					lv_expression_0_0,
					"org.xtext.example.mydsl.Pascal.expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulegotoStatement
entryRulegotoStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGotoStatementRule()); }
	iv_rulegotoStatement=rulegotoStatement
	{ $current=$iv_rulegotoStatement.current; }
	EOF;

// Rule gotoStatement
rulegotoStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='goto'
		{
			newLeafNode(otherlv_0, grammarAccess.getGotoStatementAccess().getGotoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGotoStatementAccess().getLabelStartLabelStartParserRuleCall_1_0());
				}
				lv_labelStart_1_0=rulelabelStart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGotoStatementRule());
					}
					set(
						$current,
						"labelStart",
						lv_labelStart_1_0,
						"org.xtext.example.mydsl.Pascal.labelStart");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulestructuredStatement
entryRulestructuredStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructuredStatementRule()); }
	iv_rulestructuredStatement=rulestructuredStatement
	{ $current=$iv_rulestructuredStatement.current; }
	EOF;

// Rule structuredStatement
rulestructuredStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStructuredStatementAccess().getCompoundStatementCompoundStatementParserRuleCall_0_0());
				}
				lv_compoundStatement_0_0=rulecompoundStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructuredStatementRule());
					}
					set(
						$current,
						"compoundStatement",
						lv_compoundStatement_0_0,
						"org.xtext.example.mydsl.Pascal.compoundStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStructuredStatementAccess().getRepetetiveStatementRepetetiveStatementParserRuleCall_1_0());
				}
				lv_repetetiveStatement_1_0=rulerepetetiveStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructuredStatementRule());
					}
					set(
						$current,
						"repetetiveStatement",
						lv_repetetiveStatement_1_0,
						"org.xtext.example.mydsl.Pascal.repetetiveStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStructuredStatementAccess().getWithStatementWithStatementParserRuleCall_2_0());
				}
				lv_withStatement_2_0=rulewithStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructuredStatementRule());
					}
					set(
						$current,
						"withStatement",
						lv_withStatement_2_0,
						"org.xtext.example.mydsl.Pascal.withStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulecompoundStatement
entryRulecompoundStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompoundStatementRule()); }
	iv_rulecompoundStatement=rulecompoundStatement
	{ $current=$iv_rulecompoundStatement.current; }
	EOF;

// Rule compoundStatement
rulecompoundStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='begin'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompoundStatementAccess().getBeginKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundStatementAccess().getStatementsStatementsParserRuleCall_1_0());
				}
				lv_statements_1_0=rulestatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundStatementRule());
					}
					set(
						$current,
						"statements",
						lv_statements_1_0,
						"org.xtext.example.mydsl.Pascal.statements");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='end'
		{
			newLeafNode(otherlv_2, grammarAccess.getCompoundStatementAccess().getEndKeyword_2());
		}
	)
;

// Entry rule entryRulestatements
entryRulestatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementsRule()); }
	iv_rulestatements=rulestatements
	{ $current=$iv_rulestatements.current; }
	EOF;

// Rule statements
rulestatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementsAccess().getStatement1StatementParserRuleCall_0_0());
				}
				lv_statement1_0_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementsRule());
					}
					add(
						$current,
						"statement1",
						lv_statement1_0_0,
						"org.xtext.example.mydsl.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_semiTerminal1_1_0=';'
					{
						newLeafNode(lv_semiTerminal1_1_0, grammarAccess.getStatementsAccess().getSemiTerminal1SemicolonKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementsRule());
						}
						addWithLastConsumed($current, "semiTerminal1", lv_semiTerminal1_1_0, ";");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementsAccess().getStatement2StatementParserRuleCall_1_1_0());
					}
					lv_statement2_2_0=rulestatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementsRule());
						}
						add(
							$current,
							"statement2",
							lv_statement2_2_0,
							"org.xtext.example.mydsl.Pascal.statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				lv_semiTerminal2_3_0=';'
				{
					newLeafNode(lv_semiTerminal2_3_0, grammarAccess.getStatementsAccess().getSemiTerminal2SemicolonKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStatementsRule());
					}
					setWithLastConsumed($current, "semiTerminal2", lv_semiTerminal2_3_0, ";");
				}
			)
		)
	)
;

// Entry rule entryRulerepetetiveStatement
entryRulerepetetiveStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepetetiveStatementRule()); }
	iv_rulerepetetiveStatement=rulerepetetiveStatement
	{ $current=$iv_rulerepetetiveStatement.current; }
	EOF;

// Rule repetetiveStatement
rulerepetetiveStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getRepetetiveStatementAccess().getRepeatStatementParserRuleCall());
	}
	this_repeatStatement_0=rulerepeatStatement
	{
		$current = $this_repeatStatement_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulerepeatStatement
entryRulerepeatStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatStatementRule()); }
	iv_rulerepeatStatement=rulerepeatStatement
	{ $current=$iv_rulerepeatStatement.current; }
	EOF;

// Rule repeatStatement
rulerepeatStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='repeat'
		{
			newLeafNode(otherlv_0, grammarAccess.getRepeatStatementAccess().getRepeatKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStatementAccess().getStatementStatementsParserRuleCall_1_0());
				}
				lv_statement_1_0=rulestatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_1_0,
						"org.xtext.example.mydsl.Pascal.statements");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='until'
		{
			newLeafNode(otherlv_2, grammarAccess.getRepeatStatementAccess().getUntilKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStatementAccess().getExpressionExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"org.xtext.example.mydsl.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulewithStatement
entryRulewithStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWithStatementRule()); }
	iv_rulewithStatement=rulewithStatement
	{ $current=$iv_rulewithStatement.current; }
	EOF;

// Rule withStatement
rulewithStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='with'
		{
			newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWithStatementAccess().getRecordVariableListRecordVariableListParserRuleCall_1_0());
				}
				lv_recordVariableList_1_0=rulerecordVariableList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWithStatementRule());
					}
					set(
						$current,
						"recordVariableList",
						lv_recordVariableList_1_0,
						"org.xtext.example.mydsl.Pascal.recordVariableList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getWithStatementAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_3_0());
				}
				lv_statement_3_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWithStatementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_3_0,
						"org.xtext.example.mydsl.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulerecordVariableList
entryRulerecordVariableList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordVariableListRule()); }
	iv_rulerecordVariableList=rulerecordVariableList
	{ $current=$iv_rulerecordVariableList.current; }
	EOF;

// Rule recordVariableList
rulerecordVariableList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordVariableListAccess().getVariable1VariableParserRuleCall_0_0());
				}
				lv_variable1_0_0=rulevariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordVariableListRule());
					}
					set(
						$current,
						"variable1",
						lv_variable1_0_0,
						"org.xtext.example.mydsl.Pascal.variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_commaTerminal_1_0=','
					{
						newLeafNode(lv_commaTerminal_1_0, grammarAccess.getRecordVariableListAccess().getCommaTerminalCommaKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRecordVariableListRule());
						}
						addWithLastConsumed($current, "commaTerminal", lv_commaTerminal_1_0, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRecordVariableListAccess().getVariable2VariableParserRuleCall_1_1_0());
					}
					lv_variable2_2_0=rulevariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRecordVariableListRule());
						}
						add(
							$current,
							"variable2",
							lv_variable2_2_0,
							"org.xtext.example.mydsl.Pascal.variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

RULE_COMMENT_1 : '(*' ( options {greedy=false;} : . )*'*)';

RULE_COMMENT_2 : '{' ( options {greedy=false;} : . )*'}';

RULE_IDENT : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;

RULE_NUM_INT : RULE_INT;

RULE_NUM_REAL : RULE_NUM_INT+ (('.' RULE_NUM_INT+ RULE_EXPONENT?)?|RULE_EXPONENT);

fragment RULE_EXPONENT : 'e' ('+'|'-')? ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
