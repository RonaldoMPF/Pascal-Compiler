/**
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.pascal.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.pascal.PascalPackage;
import org.xtext.example.mydsl.pascal.labelDeclarationPart;
import org.xtext.example.mydsl.pascal.labelStart;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>label Declaration Part</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.pascal.impl.labelDeclarationPartImpl#getLabelStart1 <em>Label Start1</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.pascal.impl.labelDeclarationPartImpl#getCommaTerminal <em>Comma Terminal</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.pascal.impl.labelDeclarationPartImpl#getLabelStart2 <em>Label Start2</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class labelDeclarationPartImpl extends MinimalEObjectImpl.Container implements labelDeclarationPart
{
  /**
   * The cached value of the '{@link #getLabelStart1() <em>Label Start1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabelStart1()
   * @generated
   * @ordered
   */
  protected labelStart labelStart1;

  /**
   * The cached value of the '{@link #getCommaTerminal() <em>Comma Terminal</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommaTerminal()
   * @generated
   * @ordered
   */
  protected EList<String> commaTerminal;

  /**
   * The cached value of the '{@link #getLabelStart2() <em>Label Start2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabelStart2()
   * @generated
   * @ordered
   */
  protected EList<labelStart> labelStart2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected labelDeclarationPartImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.LABEL_DECLARATION_PART;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public labelStart getLabelStart1()
  {
    return labelStart1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabelStart1(labelStart newLabelStart1, NotificationChain msgs)
  {
    labelStart oldLabelStart1 = labelStart1;
    labelStart1 = newLabelStart1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.LABEL_DECLARATION_PART__LABEL_START1, oldLabelStart1, newLabelStart1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLabelStart1(labelStart newLabelStart1)
  {
    if (newLabelStart1 != labelStart1)
    {
      NotificationChain msgs = null;
      if (labelStart1 != null)
        msgs = ((InternalEObject)labelStart1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.LABEL_DECLARATION_PART__LABEL_START1, null, msgs);
      if (newLabelStart1 != null)
        msgs = ((InternalEObject)newLabelStart1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.LABEL_DECLARATION_PART__LABEL_START1, null, msgs);
      msgs = basicSetLabelStart1(newLabelStart1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.LABEL_DECLARATION_PART__LABEL_START1, newLabelStart1, newLabelStart1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getCommaTerminal()
  {
    if (commaTerminal == null)
    {
      commaTerminal = new EDataTypeEList<String>(String.class, this, PascalPackage.LABEL_DECLARATION_PART__COMMA_TERMINAL);
    }
    return commaTerminal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<labelStart> getLabelStart2()
  {
    if (labelStart2 == null)
    {
      labelStart2 = new EObjectContainmentEList<labelStart>(labelStart.class, this, PascalPackage.LABEL_DECLARATION_PART__LABEL_START2);
    }
    return labelStart2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.LABEL_DECLARATION_PART__LABEL_START1:
        return basicSetLabelStart1(null, msgs);
      case PascalPackage.LABEL_DECLARATION_PART__LABEL_START2:
        return ((InternalEList<?>)getLabelStart2()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.LABEL_DECLARATION_PART__LABEL_START1:
        return getLabelStart1();
      case PascalPackage.LABEL_DECLARATION_PART__COMMA_TERMINAL:
        return getCommaTerminal();
      case PascalPackage.LABEL_DECLARATION_PART__LABEL_START2:
        return getLabelStart2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.LABEL_DECLARATION_PART__LABEL_START1:
        setLabelStart1((labelStart)newValue);
        return;
      case PascalPackage.LABEL_DECLARATION_PART__COMMA_TERMINAL:
        getCommaTerminal().clear();
        getCommaTerminal().addAll((Collection<? extends String>)newValue);
        return;
      case PascalPackage.LABEL_DECLARATION_PART__LABEL_START2:
        getLabelStart2().clear();
        getLabelStart2().addAll((Collection<? extends labelStart>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.LABEL_DECLARATION_PART__LABEL_START1:
        setLabelStart1((labelStart)null);
        return;
      case PascalPackage.LABEL_DECLARATION_PART__COMMA_TERMINAL:
        getCommaTerminal().clear();
        return;
      case PascalPackage.LABEL_DECLARATION_PART__LABEL_START2:
        getLabelStart2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.LABEL_DECLARATION_PART__LABEL_START1:
        return labelStart1 != null;
      case PascalPackage.LABEL_DECLARATION_PART__COMMA_TERMINAL:
        return commaTerminal != null && !commaTerminal.isEmpty();
      case PascalPackage.LABEL_DECLARATION_PART__LABEL_START2:
        return labelStart2 != null && !labelStart2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (commaTerminal: ");
    result.append(commaTerminal);
    result.append(')');
    return result.toString();
  }

} //labelDeclarationPartImpl
