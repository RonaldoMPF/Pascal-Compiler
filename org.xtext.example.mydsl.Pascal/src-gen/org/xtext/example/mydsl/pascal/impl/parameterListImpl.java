/**
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.pascal.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.pascal.PascalPackage;
import org.xtext.example.mydsl.pascal.actualParameter;
import org.xtext.example.mydsl.pascal.parameterList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>parameter List</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.pascal.impl.parameterListImpl#getActualParameter1 <em>Actual Parameter1</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.pascal.impl.parameterListImpl#getActualParameter2 <em>Actual Parameter2</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class parameterListImpl extends MinimalEObjectImpl.Container implements parameterList
{
  /**
   * The cached value of the '{@link #getActualParameter1() <em>Actual Parameter1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActualParameter1()
   * @generated
   * @ordered
   */
  protected actualParameter actualParameter1;

  /**
   * The cached value of the '{@link #getActualParameter2() <em>Actual Parameter2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActualParameter2()
   * @generated
   * @ordered
   */
  protected EList<actualParameter> actualParameter2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected parameterListImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.PARAMETER_LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public actualParameter getActualParameter1()
  {
    return actualParameter1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActualParameter1(actualParameter newActualParameter1, NotificationChain msgs)
  {
    actualParameter oldActualParameter1 = actualParameter1;
    actualParameter1 = newActualParameter1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER1, oldActualParameter1, newActualParameter1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActualParameter1(actualParameter newActualParameter1)
  {
    if (newActualParameter1 != actualParameter1)
    {
      NotificationChain msgs = null;
      if (actualParameter1 != null)
        msgs = ((InternalEObject)actualParameter1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER1, null, msgs);
      if (newActualParameter1 != null)
        msgs = ((InternalEObject)newActualParameter1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER1, null, msgs);
      msgs = basicSetActualParameter1(newActualParameter1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER1, newActualParameter1, newActualParameter1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<actualParameter> getActualParameter2()
  {
    if (actualParameter2 == null)
    {
      actualParameter2 = new EObjectContainmentEList<actualParameter>(actualParameter.class, this, PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER2);
    }
    return actualParameter2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER1:
        return basicSetActualParameter1(null, msgs);
      case PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER2:
        return ((InternalEList<?>)getActualParameter2()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER1:
        return getActualParameter1();
      case PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER2:
        return getActualParameter2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER1:
        setActualParameter1((actualParameter)newValue);
        return;
      case PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER2:
        getActualParameter2().clear();
        getActualParameter2().addAll((Collection<? extends actualParameter>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER1:
        setActualParameter1((actualParameter)null);
        return;
      case PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER2:
        getActualParameter2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER1:
        return actualParameter1 != null;
      case PascalPackage.PARAMETER_LIST__ACTUAL_PARAMETER2:
        return actualParameter2 != null && !actualParameter2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //parameterListImpl
