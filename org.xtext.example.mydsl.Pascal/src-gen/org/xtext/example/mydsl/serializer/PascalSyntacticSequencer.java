/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.PascalGrammarAccess;

@SuppressWarnings("all")
public class PascalSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PascalGrammarAccess grammarAccess;
	protected AbstractElementAlias match_signedFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q;
	protected AbstractElementAlias match_variable_CircumflexAccentKeyword_1_3_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PascalGrammarAccess) access;
		match_signedFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getSignedFactorAccess().getHyphenMinusKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSignedFactorAccess().getPlusSignKeyword_0_0()));
		match_variable_CircumflexAccentKeyword_1_3_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getCircumflexAccentKeyword_1_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getAdditiveoperatorRule())
			return getadditiveoperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMultiplicativeoperatorRule())
			return getmultiplicativeoperatorToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * additiveoperator
	 *    : "+"
	 *    | "-"
	 *    | "or"
	 *    | "xor"
	 *    ;
	 */
	protected String getadditiveoperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * multiplicativeoperator
	 *    : "*"
	 *    | "/"
	 *    | "div"
	 *    | "mod"
	 *    | "and"
	 *    | "="
	 *    | "<>"
	 *    ;
	 */
	protected String getmultiplicativeoperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "*";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_signedFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q.equals(syntax))
				emit_signedFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_variable_CircumflexAccentKeyword_1_3_a.equals(syntax))
				emit_variable_CircumflexAccentKeyword_1_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('+' | '-')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) factor=factor
	 */
	protected void emit_signedFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '^'*
	 *
	 * This ambiguous syntax occurs at:
	 *     expression+=expression '.)' (ambiguity) '(.' expression+=expression
	 *     expression+=expression '.)' (ambiguity) '.' identifier3+=identifier
	 *     expression+=expression '.)' (ambiguity) '[' expression+=expression
	 *     expression+=expression '.)' (ambiguity) (rule end)
	 *     expression+=expression ']' (ambiguity) '(.' expression+=expression
	 *     expression+=expression ']' (ambiguity) '.' identifier3+=identifier
	 *     expression+=expression ']' (ambiguity) '[' expression+=expression
	 *     expression+=expression ']' (ambiguity) (rule end)
	 *     identifier1=identifier (ambiguity) '(.' expression+=expression
	 *     identifier1=identifier (ambiguity) '.' identifier3+=identifier
	 *     identifier1=identifier (ambiguity) '[' expression+=expression
	 *     identifier1=identifier (ambiguity) (rule end)
	 *     identifier2=identifier (ambiguity) '(.' expression+=expression
	 *     identifier2=identifier (ambiguity) '.' identifier3+=identifier
	 *     identifier2=identifier (ambiguity) '[' expression+=expression
	 *     identifier2=identifier (ambiguity) (rule end)
	 *     identifier3+=identifier (ambiguity) '(.' expression+=expression
	 *     identifier3+=identifier (ambiguity) '.' identifier3+=identifier
	 *     identifier3+=identifier (ambiguity) '[' expression+=expression
	 *     identifier3+=identifier (ambiguity) (rule end)
	 */
	protected void emit_variable_CircumflexAccentKeyword_1_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
