/**
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.generator;

import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.xtext.example.mydsl.pascal.block;
import org.xtext.example.mydsl.pascal.digitSequence;
import org.xtext.example.mydsl.pascal.factor;
import org.xtext.example.mydsl.pascal.integerNumber;
import org.xtext.example.mydsl.pascal.realNumber;
import org.xtext.example.mydsl.pascal.scaleFactor;
import org.xtext.example.mydsl.pascal.term;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PascalGenerator extends AbstractGenerator {
  private int currentReg;
  
  private int currentLine;
  
  private Map<String, String> mapRegs;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
  
  public CharSequence compileAttribution(final block block) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field statement is undefined for the type statements"
      + "\n!== cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nunlabelledStatement cannot be resolved"
      + "\nsimpleStatement cannot be resolved"
      + "\n!== cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nunlabelledStatement cannot be resolved"
      + "\nsimpleStatement cannot be resolved"
      + "\nassignmentStatement cannot be resolved"
      + "\n!== cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nunlabelledStatement cannot be resolved"
      + "\nsimpleStatement cannot be resolved"
      + "\nassignmentStatement cannot be resolved"
      + "\nexpression cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nunlabelledStatement cannot be resolved"
      + "\nsimpleStatement cannot be resolved"
      + "\nassignmentStatement cannot be resolved"
      + "\nexpression cannot be resolved"
      + "\nsimpleExpression cannot be resolved"
      + "\nassignment_statement cannot be resolved"
      + "\nvariable cannot be resolved"
      + "\nentire_variable cannot be resolved"
      + "\nidentifier cannot be resolved"
      + "\nidentifier cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nterm cannot be resolved"
      + "\naddition_operator cannot be resolved"
      + "\nsize cannot be resolved"
      + "\n== cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nmultiplication_operator cannot be resolved"
      + "\nsize cannot be resolved"
      + "\n== cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nfactor cannot be resolved"
      + "\naddition_operator cannot be resolved"
      + "\nsize cannot be resolved"
      + "\n== cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nmultiplication_operator cannot be resolved"
      + "\nsize cannot be resolved"
      + "\n> cannot be resolved"
      + "\nmultiplication_operator cannot be resolved"
      + "\n!== cannot be resolved"
      + "\naddition_operator cannot be resolved"
      + "\nsize cannot be resolved"
      + "\n> cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nmultiplication_operator cannot be resolved"
      + "\nsize cannot be resolved"
      + "\n== cannot be resolved"
      + "\naddition_operator cannot be resolved"
      + "\nsign cannot be resolved"
      + "\n!== cannot be resolved");
  }
  
  public String getNextLine() {
    int _currentLine = this.currentLine;
    this.currentLine = (_currentLine + 8);
    return (Integer.valueOf(this.currentLine) + ": ");
  }
  
  public String getNextReg() {
    this.currentReg++;
    return ("R" + Integer.valueOf(this.currentReg));
  }
  
  public String getCurrentReg() {
    return ("R" + Integer.valueOf(this.currentReg));
  }
  
  public CharSequence storageMUL(final List<Integer> listMul, final String variableLeftName, final List<String> listSign) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _size = listMul.size();
      boolean _greaterThan = (_size > 1);
      if (_greaterThan) {
        {
          int _size_1 = listMul.size();
          int _minus = (_size_1 - 1);
          IntegerRange _upTo = new IntegerRange(1, _minus);
          for(final Integer i : _upTo) {
            {
              boolean _equals = listSign.get(((i).intValue() - 1)).equals("*");
              if (_equals) {
                String _nextLine = this.getNextLine();
                String _plus = (_nextLine + "MUL ");
                String _plus_1 = (_plus + "R");
                Integer _get = listMul.get(0);
                String _plus_2 = (_plus_1 + _get);
                String _plus_3 = (_plus_2 + ", R");
                Integer _get_1 = listMul.get(0);
                String _plus_4 = (_plus_3 + _get_1);
                String _plus_5 = (_plus_4 + ", R");
                Integer _get_2 = listMul.get((i).intValue());
                String _plus_6 = (_plus_5 + _get_2);
                _builder.append(_plus_6);
                _builder.newLineIfNotEmpty();
              }
            }
            {
              if ((listSign.get(((i).intValue() - 1)).equals("/") || listSign.get(((i).intValue() - 1)).equals("div"))) {
                String _nextLine_1 = this.getNextLine();
                String _plus_7 = (_nextLine_1 + "DIV ");
                String _plus_8 = (_plus_7 + "R");
                Integer _get_3 = listMul.get(0);
                String _plus_9 = (_plus_8 + _get_3);
                String _plus_10 = (_plus_9 + ", R");
                Integer _get_4 = listMul.get(0);
                String _plus_11 = (_plus_10 + _get_4);
                String _plus_12 = (_plus_11 + ", R");
                Integer _get_5 = listMul.get((i).intValue());
                String _plus_13 = (_plus_12 + _get_5);
                _builder.append(_plus_13);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        String _nextLine_2 = this.getNextLine();
        String _plus_14 = (_nextLine_2 + "ST ");
        String _plus_15 = (_plus_14 + variableLeftName);
        String _plus_16 = (_plus_15 + ", R");
        Integer _get_6 = listMul.get(0);
        String _plus_17 = (_plus_16 + _get_6);
        _builder.append(_plus_17);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence storageSum(final List<Integer> listSum, final String variableLeftName, final List<String> listSign) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _size = listSum.size();
      boolean _greaterThan = (_size > 1);
      if (_greaterThan) {
        {
          int _size_1 = listSum.size();
          int _minus = (_size_1 - 1);
          IntegerRange _upTo = new IntegerRange(1, _minus);
          for(final Integer i : _upTo) {
            {
              boolean _equals = listSign.get(((i).intValue() - 1)).equals("+");
              if (_equals) {
                String _nextLine = this.getNextLine();
                String _plus = (_nextLine + "ADD ");
                String _plus_1 = (_plus + "R");
                Integer _get = listSum.get(0);
                String _plus_2 = (_plus_1 + _get);
                String _plus_3 = (_plus_2 + ", R");
                Integer _get_1 = listSum.get(0);
                String _plus_4 = (_plus_3 + _get_1);
                String _plus_5 = (_plus_4 + ", R");
                Integer _get_2 = listSum.get((i).intValue());
                String _plus_6 = (_plus_5 + _get_2);
                _builder.append(_plus_6);
                _builder.newLineIfNotEmpty();
              }
            }
            {
              boolean _equals_1 = listSign.get(((i).intValue() - 1)).equals("-");
              if (_equals_1) {
                String _nextLine_1 = this.getNextLine();
                String _plus_7 = (_nextLine_1 + "SUB ");
                String _plus_8 = (_plus_7 + "R");
                Integer _get_3 = listSum.get(0);
                String _plus_9 = (_plus_8 + _get_3);
                String _plus_10 = (_plus_9 + ", R");
                Integer _get_4 = listSum.get(0);
                String _plus_11 = (_plus_10 + _get_4);
                String _plus_12 = (_plus_11 + ", R");
                Integer _get_5 = listSum.get((i).intValue());
                String _plus_13 = (_plus_12 + _get_5);
                _builder.append(_plus_13);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        String _nextLine_2 = this.getNextLine();
        String _plus_14 = (_nextLine_2 + "ST ");
        String _plus_15 = (_plus_14 + variableLeftName);
        String _plus_16 = (_plus_15 + ", R");
        Integer _get_6 = listSum.get(0);
        String _plus_17 = (_plus_16 + _get_6);
        _builder.append(_plus_17);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence loadForExpressionAddOrMul(final term term, final String variableLeftName, final List<Integer> listOperands) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<factor> _factor = term.getFactor();
      for(final factor factor : _factor) {
        {
          if ((((factor != null) && (factor.getVariable() != null)) && (factor.getVariable().getEntireVariable() != null))) {
            String variableRigthName = factor.getVariable().getEntireVariable().getIdentifier().getIdentifier();
            _builder.newLineIfNotEmpty();
            String _nextLine = this.getNextLine();
            String _plus = (_nextLine + "LD ");
            String _nextReg = this.getNextReg();
            String _plus_1 = (_plus + _nextReg);
            String _plus_2 = (_plus_1 + ", ");
            String _plus_3 = (_plus_2 + variableRigthName);
            _builder.append(_plus_3);
            _builder.newLineIfNotEmpty();
            boolean aux = listOperands.add(Integer.valueOf(this.currentReg));
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if (((factor != null) && (factor.getIdentifier() != null))) {
            String _nextLine_1 = this.getNextLine();
            String _plus_4 = (_nextLine_1 + "LD ");
            String _nextReg_1 = this.getNextReg();
            String _plus_5 = (_plus_4 + _nextReg_1);
            String _plus_6 = (_plus_5 + ", ");
            String _identifier = factor.getIdentifier().getIdentifier();
            String _plus_7 = (_plus_6 + _identifier);
            _builder.append(_plus_7);
            _builder.newLineIfNotEmpty();
            boolean aux_1 = listOperands.add(Integer.valueOf(this.currentReg));
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if (((factor != null) && (factor.getNumber() != null))) {
            {
              integerNumber _integerNumber = factor.getNumber().getIntegerNumber();
              boolean _tripleNotEquals = (_integerNumber != null);
              if (_tripleNotEquals) {
                String _nextLine_2 = this.getNextLine();
                String _plus_8 = (_nextLine_2 + "LD ");
                String _nextReg_2 = this.getNextReg();
                String _plus_9 = (_plus_8 + _nextReg_2);
                String _plus_10 = (_plus_9 + ", #");
                String _integerNumber_1 = this.getIntegerNumber(factor.getNumber().getIntegerNumber());
                String _plus_11 = (_plus_10 + _integerNumber_1);
                _builder.append(_plus_11);
                _builder.newLineIfNotEmpty();
                boolean aux_2 = listOperands.add(Integer.valueOf(this.currentReg));
                _builder.newLineIfNotEmpty();
              } else {
                String _nextLine_3 = this.getNextLine();
                String _plus_12 = (_nextLine_3 + "LD ");
                String _nextReg_3 = this.getNextReg();
                String _plus_13 = (_plus_12 + _nextReg_3);
                String _plus_14 = (_plus_13 + ", #");
                String _realNumber = this.getRealNumber(factor.getNumber().getRealNumber());
                String _plus_15 = (_plus_14 + _realNumber);
                _builder.append(_plus_15);
                _builder.newLineIfNotEmpty();
                boolean aux_3 = listOperands.add(Integer.valueOf(this.currentReg));
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          if (((factor != null) && (factor.getStrings() != null))) {
            String _nextLine_4 = this.getNextLine();
            String _plus_16 = (_nextLine_4 + "LD ");
            String _nextReg_4 = this.getNextReg();
            String _plus_17 = (_plus_16 + _nextReg_4);
            String _plus_18 = (_plus_17 + ", ");
            String _strings = factor.getStrings();
            String _plus_19 = (_plus_18 + _strings);
            _builder.append(_plus_19);
            _builder.newLineIfNotEmpty();
            boolean aux_4 = listOperands.add(Integer.valueOf(this.currentReg));
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence getCodeExpression(final factor factor, final String variableLeftName) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((((factor != null) && (factor.getVariable() != null)) && (factor.getVariable().getEntireVariable() != null))) {
        String variableRigthName = factor.getVariable().getEntireVariable().getIdentifier().getIdentifier();
        _builder.newLineIfNotEmpty();
        String _nextLine = this.getNextLine();
        String _plus = (_nextLine + "ST ");
        String _plus_1 = (_plus + variableLeftName);
        String _plus_2 = (_plus_1 + ", ");
        String _plus_3 = (_plus_2 + variableRigthName);
        _builder.append(_plus_3);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((factor != null) && (factor.getIdentifier() != null))) {
        String _nextLine_1 = this.getNextLine();
        String _plus_4 = (_nextLine_1 + "ST ");
        String _plus_5 = (_plus_4 + variableLeftName);
        String _plus_6 = (_plus_5 + ", ");
        String _identifier = factor.getIdentifier().getIdentifier();
        String _plus_7 = (_plus_6 + _identifier);
        _builder.append(_plus_7);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((factor != null) && (factor.getNumber() != null))) {
        {
          integerNumber _integerNumber = factor.getNumber().getIntegerNumber();
          boolean _tripleNotEquals = (_integerNumber != null);
          if (_tripleNotEquals) {
            String _nextLine_2 = this.getNextLine();
            String _plus_8 = (_nextLine_2 + "ST ");
            String _plus_9 = (_plus_8 + variableLeftName);
            String _plus_10 = (_plus_9 + ", #");
            String _integerNumber_1 = this.getIntegerNumber(factor.getNumber().getIntegerNumber());
            String _plus_11 = (_plus_10 + _integerNumber_1);
            _builder.append(_plus_11);
            _builder.newLineIfNotEmpty();
          } else {
            String _nextLine_3 = this.getNextLine();
            String _plus_12 = (_nextLine_3 + "ST ");
            String _plus_13 = (_plus_12 + variableLeftName);
            String _plus_14 = (_plus_13 + ", #");
            String _realNumber = this.getRealNumber(factor.getNumber().getRealNumber());
            String _plus_15 = (_plus_14 + _realNumber);
            _builder.append(_plus_15);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      if (((factor != null) && (factor.getStrings() != null))) {
        String _nextLine_4 = this.getNextLine();
        String _plus_16 = (_nextLine_4 + "ST ");
        String _plus_17 = (_plus_16 + variableLeftName);
        String _plus_18 = (_plus_17 + ", ");
        String _strings = factor.getStrings();
        String _plus_19 = (_plus_18 + _strings);
        _builder.append(_plus_19);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String getRealNumber(final realNumber realNumber) {
    String output = "";
    String _output = output;
    String _digitSequence = this.getDigitSequence(realNumber.getDigitSequence());
    output = (_output + _digitSequence);
    digitSequence _digitSequence2 = realNumber.getDigitSequence2();
    boolean _tripleNotEquals = (_digitSequence2 != null);
    if (_tripleNotEquals) {
      String _output_1 = output;
      String _digitSequence_1 = this.getDigitSequence(realNumber.getDigitSequence2());
      String _plus = ("." + _digitSequence_1);
      output = (_output_1 + _plus);
    }
    scaleFactor _scaleFactor = realNumber.getScaleFactor();
    boolean _tripleNotEquals_1 = (_scaleFactor != null);
    if (_tripleNotEquals_1) {
      String _output_2 = output;
      String _scaleFactor_1 = this.getScaleFactor(realNumber.getScaleFactor());
      output = (_output_2 + _scaleFactor_1);
    }
    return output;
  }
  
  public String getScaleFactor(final scaleFactor factor) {
    String _xblockexpression = null;
    {
      String output = "";
      String _output = output;
      output = (_output + "e");
      String _sign = factor.getSign();
      boolean _tripleNotEquals = (_sign != null);
      if (_tripleNotEquals) {
        String _output_1 = output;
        String _sign_1 = factor.getSign();
        output = (_output_1 + _sign_1);
      }
      String _output_2 = output;
      String _digitSequence = this.getDigitSequence(factor.getDigitSequence());
      _xblockexpression = output = (_output_2 + _digitSequence);
    }
    return _xblockexpression;
  }
  
  public String getDigitSequence(final digitSequence digitSequence) {
    String output = "";
    String _sign = digitSequence.getSign();
    boolean _tripleNotEquals = (_sign != null);
    if (_tripleNotEquals) {
      String _output = output;
      String _sign_1 = digitSequence.getSign();
      output = (_output + _sign_1);
    }
    String _output_1 = output;
    String _unsignedDigitSequence = digitSequence.getUnsignedDigitSequence();
    output = (_output_1 + _unsignedDigitSequence);
    return output;
  }
  
  public String getIntegerNumber(final integerNumber integerNumber) {
    return this.getDigitSequence(integerNumber.getDigitSequence());
  }
}
